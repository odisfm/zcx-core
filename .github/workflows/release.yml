name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Set environment variables
        run: |
          echo "REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)" >> $GITHUB_ENV
          echo "TAG_NAME=${GITHUB_REF_NAME:-latest}" >> $GITHUB_ENV

      - name: Get controllers list
        id: controllers
        run: |
          CONTROLLERS=$(ls -d hardware/*/ | cut -f2 -d'/' | grep -v '^__test$' | jq -R -s -c 'split("\n")[:-1]')
          echo "Found controllers: $CONTROLLERS"
          echo "list=$CONTROLLERS" >> $GITHUB_OUTPUT

      - name: Create shared vendor directory
        run: |
          mkdir -p shared_vendor
          # Define packages to download
          PACKAGES=("pyyaml>=6.0.2,<7.0.0" "asteval>=1.0.6,<2.0.0" "requests" "semver>=3.0.4,<4.0.0")
          
          # Install all packages once into shared vendor directory
          for package in "${PACKAGES[@]}"; do
            pip install "$package" --target "./shared_vendor/"
          done

      - name: Build packages for all controllers
        run: |
          CONTROLLERS='${{ steps.controllers.outputs.list }}'
          
          # Parse JSON array of controllers
          for controller in $(echo $CONTROLLERS | jq -r '.[]'); do
            echo "Building package for controller: $controller"
            
            PACKAGE_NAME="_zcx_$controller"
            
            # Create package directory structure
            mkdir -p "$PACKAGE_NAME"
            mkdir -p "$PACKAGE_NAME/vendor"
            
            # Copy shared vendor files
            cp -r shared_vendor/* "$PACKAGE_NAME/vendor/"
            
            # Copy application files
            cp -r app/* "$PACKAGE_NAME/"
            
            # Create hardware directory and copy controller-specific files
            mkdir -p "$PACKAGE_NAME/hardware"
            cp -r "hardware/$controller"/* "$PACKAGE_NAME/hardware/"
            
            # Handle demo_config
            if [ -d "$PACKAGE_NAME/hardware/demo_config" ]; then
              mv "$PACKAGE_NAME/hardware/demo_config" "$PACKAGE_NAME/_config"
            else
              echo "Error: demo_config directory not found for controller '$controller'!" >&2
              exit 1
            fi
            
            # Update zcx.yaml with version and hardware information
            sed -i "s/^version:.*/version: ${TAG_NAME:1}/" "$PACKAGE_NAME/zcx.yaml"
            sed -i "s/^hardware:.*/hardware: $controller/" "$PACKAGE_NAME/zcx.yaml"
            
            # Create ZIP archive with README and user actions
            cp resources/bundled_instructions.txt ./README.txt
            sed -i "1i${REPO_NAME} ${TAG_NAME}\n\n" README.txt
            cp -r user_actions _user_actions
            
            # Create ZIP
            zip -r "$PACKAGE_NAME.zip" README.txt "$PACKAGE_NAME" _user_actions
            
            # Clean up for next iteration
            rm README.txt
            rm -rf _user_actions
            rm -rf "$PACKAGE_NAME"
            
            echo "âœ… Built $PACKAGE_NAME.zip"
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: "*.zip"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TOKEN }}