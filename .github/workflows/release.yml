name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  get-controllers:
    runs-on: ubuntu-latest
    outputs:
      controllers: ${{ steps.set-controllers.outputs.controllers }}
    steps:
      - uses: actions/checkout@v3

      - id: set-controllers
        run: |
          CONTROLLERS=$(ls -d hardware/*/ | cut -f2 -d'/' | jq -R -s -c 'split("\n")[:-1]')
          echo "controllers=$CONTROLLERS" >> $GITHUB_OUTPUT

  build:
    needs: get-controllers
    runs-on: ubuntu-latest
    strategy:
      matrix:
        controller: ${{ fromJson(needs.get-controllers.outputs.controllers) }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Set package name
        run: |
          echo "PACKAGE_NAME=_zcx_${{ matrix.controller }}" >> $GITHUB_ENV
          # Get repository name from GITHUB_REPOSITORY (owner/repo)
          echo "REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)" >> $GITHUB_ENV
          # Get tag name or default to 'latest'
          echo "TAG_NAME=${GITHUB_REF_NAME:-latest}" >> $GITHUB_ENV

      - name: Create package directory structure
        run: |
          # Create main package directory
          mkdir -p ${{ env.PACKAGE_NAME }}
          # Create vendor directory
          mkdir -p ${{ env.PACKAGE_NAME }}/vendor

      - name: Download and prepare vendor packages
        run: |
          # Define packages to download
          PACKAGES=("pyyaml>=6.0.2,<7.0.0" "asteval>=1.0.6,<2.0.0" "requests")

          # Create temporary directory for downloads
          mkdir vendor_temp
          cd vendor_temp

          # Download and extract each package and its dependencies
          for package in "${PACKAGES[@]}"; do
            pip download "$package"
            for whl in *.whl; do
              unzip -q "$whl" -d "../${{ env.PACKAGE_NAME }}/vendor/"
            done
            rm -f *.whl
          done

          # Cleanup
          cd ..
          rm -rf vendor_temp

      - name: Copy application files
        run: |
          # Copy all files from app/ to root of package
          cp -r app/* ${{ env.PACKAGE_NAME }}/

          # Create hardware directory and copy controller-specific files
          mkdir -p ${{ env.PACKAGE_NAME }}/hardware
          cp hardware/${{ matrix.controller }}/*.{py,yaml} ${{ env.PACKAGE_NAME }}/hardware/ 2>/dev/null || true

          # Abort if no demo config
          if [ -d "hardware/${{ matrix.controller }}/demo_config" ]; then
            mv "hardware/${{ matrix.controller }}/demo_config" "${{ env.PACKAGE_NAME }}/_config"
          else
            echo "Error: demo_config directory not found for controller '${{ matrix.controller }}'!" >&2
            exit 1
          fi

      - name: Create ZIP archive with README and user actions
        run: |
          # Copy bundled_instructions.txt to temporary location and rename to README.txt
          cp resources/bundled_instructions.txt ./README.txt
          
          # Prepend repo name and tag
          sed -i "1i${{ env.REPO_NAME }} ${{ env.TAG_NAME }}\n\n" README.txt
          
          # Copy user_actions directory with new name
          cp -r user_actions _user_actions
          
          # Create ZIP with README.txt at root, package folder, and _user_actions
          zip -r ${{ env.PACKAGE_NAME }}.zip README.txt ${{ env.PACKAGE_NAME }} _user_actions
          
          # Clean up temporary files
          rm README.txt
          rm -rf _user_actions
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: ${{ env.PACKAGE_NAME }}.zip

  release:
    needs: [get-controllers, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: "**/*.zip"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
