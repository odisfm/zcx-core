{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"zcx-core","text":"<p>Extending ClyphX Pro from NativeKontrol, zcx turns the user mode of your matrix-equipped MIDI controller into a deeply customisable interface for Ableton Live. It offers an alternative configuration system that makes heavy use of yaml files and templating to allow rapid prototyping of new ideas. It aims to enable musicians to program more ambitious controller setups with less work than it took before.</p> <p>documentation </p> <p>download </p> <p>discord </p>"},{"location":"#hardware","title":"hardware","text":"<p>zcx is currently maintained for these devices, with more planned:</p> <ul> <li>Ableton Push 1</li> <li>Ableton Push 2</li> <li>Akai APC mini mk2</li> <li>Novation Launchpad X</li> <li>Novation Launchpad Pro mk3</li> <li>Novation Launchpad Mini mk3</li> <li>TouchOSC</li> <li>generic controllers</li> </ul> <p>If your device isn't here </p>"},{"location":"#features","title":"features","text":"<p>zcx scripts contain many features that are impractical or impossible to replicate natively in ClyphX Pro</p>"},{"location":"#built-for-modes","title":"built for modes","text":"<p>Easily define any control as a modifier for any other control.</p> <p><pre><code>record:\n  color: red\n  gestures:\n    pressed: SEL / ARM ON\n    pressed__shift: SEL / STOP\n    pressed_delayed: SREC  8\n    pressed_delayed__shift: SREC 16\n    pressed__shift__select: SETSTOP\n\nshift:\n  gestures:\n    pressed:\n      mode_on: shift\n    released:\n      mode_off: shift\n\nselect:\n  gestures:\n    pressed:\n      mode_on: select\n    released:\n      mode_off: select\n</code></pre> <sup>see how</sup></p>"},{"location":"#unlimited-pages","title":"unlimited pages","text":"<p>Turn an 8x8 matrix into an 8\u00d78\u00d7\u221e matrix.</p> <p><pre><code># matrix_sections.yaml\n\nhome_row:\n  col_start: 0\n  col_end: 7\n  row_start: 0\n  row_end: 1\n\n# pages.yaml\n\npages:\n  main:\n    - home_row\n    - main_left\n    - main_right\n  track_page:\n    - home_row\n    - track_control\n    - device_control\n  drums:\n    - home_row\n    - drums_section\n</code></pre> <sup>see how</sup></p>"},{"location":"#rapid-configuration","title":"rapid configuration","text":"<p>Configure dozens of buttons in seconds.</p> <pre><code># matrix_sections.yaml\n\nclip_section:\n  col_start: 0\n  col_end: 7\n  row_start: 0\n  row_end: 7\n\n# matrix_sections/clip_section.yaml\n\ncolor:\n  palette: nebula\ngestures:\n  pressed: SEL / PLAY ${me.Index}\n</code></pre> <pre><code>pad 1: SEL / PLAY 1\npad 2: SEL / PLAY 2\n..\npad 64: SEL / PLAY 64\n</code></pre> <p><sup>see how</sup></p>"},{"location":"#deeper-customisation","title":"deeper customisation","text":"<p>Unlock the full capabilities of your hardware.</p> <p><pre><code>play:\n  color:\n    pulse:\n      a: red\n      b: purple\n      speed: 1\n  gestures:\n    double_clicked: STOPALL NQ\n</code></pre> <sup>see how</sup></p>"},{"location":"#intelligent-controls","title":"intelligent controls","text":"<p>Specialised control types give smart LED feedback without you writing any code.</p> <pre><code>__state_row:\n  includes: [\n    state_1, state_2, state_3, state_4\n  ]\n  type: page\n  page: ${me.index}\n  gestures:\n    pressed:\n      page: ${me.index}\n\nplay:\n  type: transport\n  transport: play\n  gestures:\n    pressed: SETPLAY\n</code></pre> <p><sup>see how</sup></p>"},{"location":"#reusable-definitions","title":"reusable definitions","text":"<p>Use templates instead of repeating definitions. Make a change in one place to see the differences across the whole control surface. <pre><code># control_templates.yaml\n\nmy_green_button:\n  color: green\n\nhold_warning:\n  gestures:\n    released_immediately:\n      msg: You must hold this control to trigger it!\n\n\n# named_controls.yaml\n\nscene_1:\n  template: [hold_warning, my_green_button]\n  #color: green\n  gestures:\n    pressed_delayed: SCENE 1\n    #released_immediately:\n      # msg: You must hold this control to trigger it!\n</code></pre></p> <p><sup>see how</sup></p>"},{"location":"#id-like-to-read-that-again","title":"I'd like to read that again!","text":""},{"location":"docs/","title":"zcx core documentation","text":"<p>Welcome to the documentation for zcx.</p> <p>If you're brand new to zcx, check out the getting started tutorial, or see frequently asked questions.</p> <p>Watch out</p> <p>zcx is in beta, and so are these docs. Information here may be incorrect or missing.</p> <p>If you think you've found an error in these docs or a problem with zcx, please report a bug. Alternatively, reach out on Discord.</p> <p>Offline copy</p> <p>You may download an offline copy of this documentation from GitHub. Scroll down to \"assets\" and download the zipped documentation, then unzip and open <code>index.html</code>.</p>"},{"location":"docs/#important-guides","title":"Important guides","text":"<ul> <li>zcx concepts</li> <li>control reference</li> <li>command reference</li> </ul>"},{"location":"docs/#navigating-this-site","title":"Navigating this site","text":""},{"location":"docs/#on-desktop","title":"On desktop","text":"<p>The navigation menu on the left lets you move between different sections of the manual. </p> <p>The table of contents on the right lets you quickly jump between headings on the current page.</p> <p>Both of these menus are \"scrollable\" if they are too tall to fit on screen.  If your browser window is narrow, one or both sidebars will disappear.  In this case you can use the  button in the top-left of this tab to navigate the site. You can also 'zoom out' your browser window to keep both menus open at smaller screen sizes.</p>"},{"location":"docs/#on-mobile","title":"On mobile","text":"<p>The  icon in the top-left of your screen brings up a sidebar menu which lets you navigate the manual.</p>"},{"location":"docs/#searching","title":"Searching","text":"<p>Use the  search bar at the top of this site to find your search term anywhere on this site.</p>"},{"location":"docs/#lightdark-theme","title":"Light/dark theme","text":"<p>Use the  button at the top of this site to switch the theme between light and dark.</p>"},{"location":"faq/","title":"frequently asked questions","text":""},{"location":"faq/#whats-all-this-then","title":"What's all this then?","text":"<p>Have a look at the about page, or check out the source on GitHub.</p>"},{"location":"faq/#what-do-i-need-to-use-zcx","title":"What do I need to use zcx?","text":"<ul> <li>Ableton Live 12.1 or above <sup>why?</sup></li> <li>ClyphX Pro 1.3.1 or above</li> <li>Supported hardware</li> <li>A heart full of dreams</li> </ul>"},{"location":"faq/#does-zcx-change-the-default-functionality-of-my-control-surface","title":"Does zcx change the default functionality of my control surface","text":"<p>For most zcx-enabled controllers, there are two modes: Live mode, which is the default control surface script, and user mode, designed for custom mapping, or scripts like zcx.</p> <p>zcx only works on the user mode of your controller. This means that the default functionality of your controller is unaffected. You may use the default script and zcx simultaneously on one controller, switching between modes with the controller's <code>User</code> button. Doing so requires two control surface slots; one for each script. If you don't want to use the default functionality, you can unassign the default script.</p>"},{"location":"faq/#do-i-need-to-be-a-coder-to-use-zcx","title":"Do I need to be a coder to use zcx?","text":"<p>No programming knowledge is necessary to configure zcx. zcx configurations do make extensive use of a format called yaml, but it's pretty easy to pick up.</p> <p>See also: reading zcx configurations.</p>"},{"location":"faq/#what-hardware-is-zcx-available-for","title":"What hardware is zcx available for?","text":"<p>See here.</p>"},{"location":"faq/#does-zcx-replace-clyphx-pro","title":"Does zcx replace ClyphX Pro?","text":"<p>Nope. zcx provides a way to interact with ClyphX Pro that greatly expands your possibilities for performing with hardware controllers.</p>"},{"location":"faq/#does-zcx-replace-x-controls-and-g-controls","title":"Does zcx replace X-controls and G-controls","text":"<p>That's up to you. zcx can be used to create a far more complex interface than is practical with native ClyphX Pro. However, that power comes with a learning curve. Only you can decide whether this tradeoff is worth it.</p> <p>Note: You can absolutely use X/G Controls alongside a zcx script. It is recommended that you use zcx for any matrix controllers, and native ClyphX Pro controls for non-matrix controllers.</p>"},{"location":"faq/#can-i-use-zcx-with-a-non-matrix-controller","title":"Can I use zcx with a non-matrix controller?","text":"<p>zcx is designed for matrix-equipped controllers. You could make a port for your hardware, and just not use the matrix features. That's up to you. Remember: each zcx script requires its own control surface slot.</p>"},{"location":"faq/#is-there-a-discord","title":"Is there a Discord?","text":"<p>But of course. </p>"},{"location":"faq/#how-can-i-contribute","title":"How can I contribute?","text":"<p>See <code>#contributing</code> in the Discord.</p>"},{"location":"faq/#what-does-zcx-stand-for","title":"What does 'zcx' stand for?","text":"<p>Zreally Cool Xthingo</p>"},{"location":"help/","title":"Help!","text":"<p>If you've been directed to this page, you've likely experienced a fatal error while loading a zcx script.</p> <p>This website has detailed instructions on configuring your zcx script. If you're new to zcx, have a read of the getting started tutorial.</p> <p>If you need more help, drop a question in the <code>#help</code> channel of the zcx Discord server.</p> <p>If you think you've found a bug, please raise an issue on GitHub.</p>"},{"location":"dev/build/","title":"Building zcx from source","text":"<p>If you would like to contribute to zcx-core, you will need to use the build script to consolidate all necessary files into a folder in your Live <code>Remote Scripts</code> directory.</p> <p>Warning</p> <p>This lesson is only intended for developers. To use zcx, see getting started.</p>"},{"location":"dev/build/#instructions","title":"Instructions","text":""},{"location":"dev/build/#clone-the-repo","title":"Clone the repo","text":"<p>Clone the repo from GitHub to a convenient location on your computer.</p>"},{"location":"dev/build/#install-vendored-dependencies","title":"Install vendored dependencies","text":"<p>zcx bundles several packages with each install. These dependencies must be installed in the folder <code>zcx-core/app/vendor</code>. A simple script is provided at <code>zcx-core/tools/install_vendored_dependencies.py</code> to install the packages (via pip) to the correct location.</p> <p>Warning</p> <p>These packages must be located in the <code>vendor/</code> directory.</p> <p>Note</p> <p>After installing, your IDE might warn you that required packages are missing. You can disregard this warning.</p>"},{"location":"dev/build/#install-watchdog","title":"Install watchdog","text":"<p>You will need to install watchdog in your Python environment to monitor the codebase for changes.</p>"},{"location":"dev/build/#run-the-script","title":"Run the script","text":"<p>From the project root, run:</p> <p><code>python tools/build.py &lt;hardware name&gt; &lt;destination folder name&gt;</code></p> <p>Where <code>&lt;hardware name&gt;</code> is the name of a folder in <code>zcx-core/hardware</code>, e.g. <code>push_1</code> and <code>&lt;desintation folder name&gt;</code> is a name of your choice, e.g. <code>my_zcx_script</code>. Omit <code>&lt;destination folder name&gt;</code> to use <code>zcx_&lt;hardware name&gt;</code>.</p> <p>You must manually create the destination folder.</p>"},{"location":"dev/build/#extra-arguments","title":"Extra arguments","text":""},{"location":"dev/build/#-custom-config","title":"--custom-config","text":"<p>Provide the path to a folder that will be copied into the destination instead of the <code>demo_config</code> folder.</p>"},{"location":"dev/build/#-blank-config","title":"--blank-config","text":"<p>Use the blank config folder instead of the <code>demo_config</code> folder.</p>"},{"location":"dev/build/#-user-library","title":"--user-library","text":"<p>By default, the script will determine the default path to your Live User Library depending on your operating system. If you use a non-default location for your User Library, you will need to provide the path as an argument.</p>"},{"location":"dev/build/#building-with-your-own-config","title":"Building with your own config","text":"<p>While working on zcx, you'll likely prefer to use your own config, rather than the demo config.</p> <p>One option is to use the --custom-config argument and pass the path to your own config.</p> <p>Another is to use symbolic links in the destination directory to other files or directories on your computer. The build script will ignore symbolic links in the destination directory.</p>"},{"location":"dev/contributing/","title":"Contributing to zcx","text":""},{"location":"dev/contributing/#get-started","title":"get started","text":"<p>Before getting started, you should join the Discord and ping <code>@odis</code>. This helps us to co-ordinate our efforts.</p>"},{"location":"dev/contributing/#help-needed","title":"help needed","text":""},{"location":"dev/contributing/#porting-zcx-to-more-controllers","title":"porting zcx to more controllers","text":"<p>By making a port, you can help bring zcx to more controllers (and more people). For the most part, this involves creating the yaml specification files for your hardware, and performing tests.</p> <p>See the porting guide for details.</p>"},{"location":"dev/contributing/#contributing-to-the-core","title":"contributing to the 'core'","text":"<p>This is the code that is common to all zcx installations, regardless of hardware. There are two ways to do this:</p>"},{"location":"dev/contributing/#fixing-issues","title":"fixing issues","text":"<p>Take a look at the issues page on GitHub to see current issues. You can filter by the label good first issue.</p> <p>And of course, if you've found a new issue, don't hesitate to report it.</p>"},{"location":"dev/contributing/#adding-features","title":"adding features","text":"<p>We are always happy to hear feature requests. Before starting work, we strongly recommend discussing it on Discord first.</p>"},{"location":"dev/dependencies/","title":"Dependencies","text":""},{"location":"dev/dependencies/#vendored-packages","title":"Vendored packages","text":"<p>These packages are bundled with each download of zcx. See here for installation instructions.</p>"},{"location":"dev/dependencies/#pyyaml","title":"PyYAML","text":"<p>Used wherever YAML files are interacted with.</p> <p>link</p>"},{"location":"dev/dependencies/#asteval","title":"asteval","text":"<p>Used to interpret user-provided Python expressions. <sup>see why</sup></p> <p>link</p>"},{"location":"dev/dependencies/#requests","title":"requests","text":"<p>Used only by the upgrade script for facilitating requests to GitHub.</p> <p>link</p>"},{"location":"dev/dependencies/#semver","title":"semver","text":"<p>Used only by the upgrade script for comparing Semantic Versioning precedence between versions.</p> <p>link</p>"},{"location":"dev/dependencies/#development-dependencies","title":"Development dependencies","text":"<p>You can install all development dependencies with <code>pip install -r requirements.txt</code> from the repo root.</p>"},{"location":"dev/dependencies/#watchdog","title":"Watchdog","text":"<p>Used by the build script to watch for code changes.</p> <p>link</p>"},{"location":"dev/dependencies/#documentation","title":"Documentation","text":"<p>This documentation is powered by mkdocs, the Material for MkDocs theme, and several plugins for mkdocs.</p> <p>You can install mkdocs and all required plugins with <code>pip install -r docs/requirements.txt</code>.</p>"},{"location":"dev/tests/","title":"Testing zcx","text":"<p>zcx's test system is built on Python's unittest framework.</p> <p>Test files are discovered and run by the TestRunner. Tests are run from within zcx, after zcx and the Live set have finished loading.</p>"},{"location":"dev/tests/#core-tests","title":"Core tests","text":"<p>These are tests for the code common to all zcx releases. They are only intended for use in development, and so are not actually included in any zcx download.</p> <p>To run the tests, build zcx from source using <code>__test</code> as the hardware name argument. Test results will output to the file <code>test_log.txt</code>, and optionally to log.txt.</p> <p>Test files are located in tests/. All test cases inherit from a base class, ZCXTestCase. The base test class includes some useful convenience methods, so read the source code to familiarise yourself with them. Of note is the attribute <code>zcx_api</code>, available on all test cases. This returns a ZcxApi object, making it easy to get reference to controls, encoders, groups, and matrix sections.</p>"},{"location":"dev/tests/#the-test-set","title":"The test set","text":"<p>Where possible, tests are written so that they don't depend on the state of any Live set. However, when testing some features this is not feasible.</p> <p>The repo includes zcx test set Project, a Live project directory with the file <code>zcx_test_set.als</code>. This set file provides a known state we can write tests against.</p> <p>You should expect the test set to require the most recent Live beta to open.</p>"},{"location":"dev/tests/#user-tests","title":"User tests","text":"<p>These are tests written by you, to validate your specific zcx configuration and/or set file.</p> <p>To add user tests, create the folder <code>user_tests/</code> inside your zcx folder. Create any test files you want in this folder, prefixed with <code>test_</code>, e.g. <code>test_bindings.py</code>.</p> <p>In each test, import and extend <code>ZCXTestCase</code>, which is added to the path automatically.</p> <pre><code>from zcx_test_case import ZCXTestCase\n</code></pre> <p>Follow the unittest docs for detailed instructions on the framework.</p>"},{"location":"lessons/blank-config/","title":"Starting from a blank config","text":"<p>Every download of zcx comes with a demo config, a sparse configuration designed to showcase zcx's features.</p> <p>You may prefer to start from an even more minimal configuration. This is made easier with the blank config included with every zcx download.</p>"},{"location":"lessons/blank-config/#locating-the-blank-config","title":"Locating the blank config","text":"<p>The blank config is located at:</p> <p><code>&lt;your zcx folder&gt;/hardware/blank_config/</code></p> <p>zcx releases prior to 0.7 do not contain the blank config. Consider upgrading.</p>"},{"location":"lessons/blank-config/#using-the-blank-config","title":"Using the blank config","text":""},{"location":"lessons/blank-config/#alongside-your-existing-config","title":"Alongside your existing config","text":"<p>See the lesson to learn how to use multiple configs in one zcx installation.</p>"},{"location":"lessons/blank-config/#replacing-your-existing-config","title":"Replacing your existing config","text":"<p>Simply delete the existing folder <code>&lt;your zcx folder&gt;/_config</code>, copy + paste the <code>blank_config</code> folder to the zcx folder, and rename it to <code>_config</code>.</p>"},{"location":"lessons/double_clicked/","title":"understanding the double_clicked gesture","text":"<p>The <code>double_clicked</code> gesture is cool, but it behaves somewhat peculiarly.</p>"},{"location":"lessons/double_clicked/#the-problem","title":"the problem","text":"<p>To perform a double tap, you perform the following actions in quick succession:</p> <ul> <li>press the control</li> <li>release the control</li> <li>press the control again</li> <li>release the control again (the double click)</li> </ul> <p>If we take this control definition:</p> <pre><code>my_control:\n  gestures:\n    pressed:\n      log: pressed\n    released:\n      log: released\n    double_clicked:\n      log: double_clicked\n</code></pre> <p>After a double tap, the log would read:</p> <pre><code>pressed\nreleased\npressed\nreleased\ndouble_clicked\n</code></pre> <p>This behaviour means the use case you imagined for the double tap might not be possible.</p>"},{"location":"lessons/double_clicked/#interesting-uses","title":"interesting uses","text":""},{"location":"lessons/double_clicked/#compatible-gestures","title":"compatible gestures","text":"<p><code>pressed_delayed</code> and <code>double_clicked</code> are mutually exclusive, so you can make use of either of them without triggering the other.</p> <pre><code>my_control:\n  gestures:\n    pressed_delayed: SETPLAY\n    double_clicked: SETSTOP\n</code></pre>"},{"location":"lessons/double_clicked/#compatible-actions","title":"compatible actions","text":"<p>With clever design, you can find a combination of actions that complement each other:</p> <pre><code>my_control:\n  gestures:\n    pressed: &gt;\n      \"my track\" / SEL\n    pressed_delayed: &gt;\n      \"my track\" / MUTE\n    double_clicked: &gt;\n      \"my track\" / PLAY\n</code></pre> <p>We can use a single press to select <code>my track</code>, and optionally execute one of two additional actions depending on the gesture. For our purposes, there is no harm in selecting <code>my track</code> once or twice before performing the alternative actions.</p>"},{"location":"lessons/keyboard/","title":"Keyboard view","text":"<p>zcx can be configured to show a rudimentary melodic keyboard, as found on controllers like the Ableton Push.</p>"},{"location":"lessons/keyboard/#limitations","title":"Limitations","text":"<ul> <li>Keyboard feedback is limited to the notes you are currently playing via the zcx script; you will not see feedback for notes from other sources, like a playing clip or MIDI input from other controllers or tracks.</li> <li>Keyboard feedback will not distinguish whether the played notes are being recorded, i.e., they will not be red.</li> <li>Currently, the keyboard view is not designed for Drum Rack instruments. Better support for Drum Racks is planned for a future release.</li> <li>Currently, the lowest note of the keyboard is always the tonic of the current scale. A future release will emulate the \"fixed\" layout seen on Push.</li> </ul>"},{"location":"lessons/keyboard/#configuration","title":"Configuration","text":"<p>The keyboard view is actually a specialized matrix section. To configure it, add a new section called <code>__keyboard</code> to your <code>matrix_sections.yaml</code>:</p> matrix_sections.yaml<pre><code>__keyboard:\n  row_start: 0\n  row_end: 7\n  col_start: 0\n  col_end: 7\n</code></pre> <p>There is no need to create the file <code>matrix_sections/__keyboard.yaml</code>.</p> <p>Once the section is created, add it to a page.</p>"},{"location":"lessons/keyboard/#midi-channel","title":"MIDI channel","text":"<p>Notes from the keyboard are sent on a dedicated MIDI channel. The default channel is 10, unless specified otherwise in the hardware reference for your controller.</p> <p>You may change this with the preferences.yaml option <code>playable_channel</code>.</p> <p>This preference is zero-indexed: the lowest channel is 0 and the highest 15.</p> <p>The chosen MIDI channel must be completely reserved for the keyboard: if your controller has one button that sends MIDI on channel 7, then channel 7 may not be used for the keyboard.</p>"},{"location":"lessons/keyboard/#custom-colors","title":"Custom colors","text":"<p>You may set custom colors via the matrix section definition:</p> matrix_sections.yaml<pre><code>__keyboard:\n  row_start: 0\n  row_end: 7\n  col_start: 0\n  col_end: 7\n  colors:\n    pressed: play_green\n    in_key: white\n    out_key: off\n    tonic: track\n</code></pre> <p><code>track</code> is a keyword referring to the color of the selected track.</p> <p>You may provide named colors or MIDI values, but not animated colors.</p>"},{"location":"lessons/keyboard/#initial-octave","title":"Initial octave","text":"matrix_sections.yaml<pre><code>__keyboard:\n  row_start: 0\n  row_end: 7\n  col_start: 0\n  col_end: 7\n  octave: 3\n</code></pre> <p>Set the initial octave of the keyboard. With the default of <code>3</code>, and in the key of C, the lowest pad will play note C-1 (MIDI note 36).</p>"},{"location":"lessons/keyboard/#melodic-settings","title":"Melodic settings","text":""},{"location":"lessons/keyboard/#scale","title":"Scale","text":"<p>The keyboard view follows Live's currently selected scale. You may set the scale with ClyphX Pro's SCL ROOT and SCL NAME actions.</p>"},{"location":"lessons/keyboard/#octave","title":"Octave","text":"<p>You may set this via the <code>keyboard</code> command:</p>"},{"location":"lessons/keyboard/#absolute","title":"Absolute","text":"<pre><code>gestures:\n  pressed:\n    keyboard:\n      octave: 5\n</code></pre> <p>Or via the zcx user action:</p> <pre><code>ZCX &lt;target script&gt; KB OCT 4\n</code></pre>"},{"location":"lessons/keyboard/#relative","title":"Relative","text":"<pre><code>gestures:\n  pressed:\n    keyboard:\n      octave:\n        up: 1\n  released:\n    keyboard:\n      octave:\n        down: 1\n</code></pre> <p>Or via the zcx user action:</p> <pre><code>ZCX &lt;target script&gt; KB OCT &lt;\nZCX &lt;target script&gt; KB OCT &gt;\nZCX &lt;target script&gt; KB OCT &gt;2\n</code></pre>"},{"location":"lessons/keyboard/#in-key-chromatic","title":"In-key / chromatic","text":"<p>You may set this via the <code>keyboard</code> command:</p> <pre><code>gestures:\n  pressed:\n    keyboard:\n      in_key: true\n</code></pre> <p>Valid options are <code>true</code>, <code>false</code>, or <code>toggle</code>.</p> <pre><code>ZCX &lt;target script&gt; KB INKEY\nZCX &lt;target script&gt; KB INKEY ON\nZCX &lt;target script&gt; KB INKEY OFF\n</code></pre>"},{"location":"lessons/keyboard/#full-velocity","title":"Full velocity","text":"<p>When enabled, all notes will be sent at velocity 127.</p> <p>You may set this via the <code>keyboard</code> command:</p> <pre><code>gestures:\n  pressed:\n    keyboard:\n      full_velo: true\n</code></pre> <p>Valid options are <code>true</code>, <code>false</code>, or <code>toggle</code>.</p> <p>Or via the zcx user action:</p> <pre><code>ZCX &lt;target script&gt; KB FULLVELO\nZCX &lt;target script&gt; KB FULLVELO ON\nZCX &lt;target script&gt; KB FULLVELO OFF\n</code></pre>"},{"location":"lessons/keyboard/#note-repeat","title":"Note repeat","text":"<p>You may set this via the <code>keyboard</code> command:</p> <pre><code>gestures:\n  pressed:\n    keyboard:\n      repeat_rate: off\n</code></pre> <p>Valid options are: <code>ON</code>, <code>OFF</code>, <code>1/4D</code>, <code>1/4</code>, <code>1/4T</code>, <code>1/8D</code>, <code>1/8</code>, <code>1/8T</code>, <code>1/16D</code>, <code>1/16</code>, <code>1/16T</code>, <code>1/32D</code>, <code>1/32</code>, <code>1/32T</code>, <code>1/64D</code>, <code>1/64</code>, <code>1/64T</code>.</p> <p><code>ON</code> will activate the last repeat rate set, or <code>1/4</code> if no rate previously set.</p> <p>Or via the zcx user action:</p> <pre><code>ZCX &lt;target script&gt; KB RPT\nZCX &lt;target script&gt; KB RPT ON\nZCX &lt;target script&gt; KB RPT OFF\nZCX &lt;target script&gt; KB RPT 1/16\n</code></pre>"},{"location":"lessons/keyboard/#keyboard-control-type","title":"keyboard control type","text":"<p>You may use the keyboard control to get feedback about the state of the keyboard.</p>"},{"location":"lessons/osc-output/","title":"OSC output from zcx","text":"<p>zcx will send Open Sound Control (OSC) messages on certain events. This may be useful for interfacing with other systems, such as TouchOSC.</p>"},{"location":"lessons/osc-output/#configuring-the-osc-server","title":"Configuring the OSC server","text":"<p>zcx uses the existing OSC server provided by ClyphX Pro. Thus, to configure the server, you must modify the ClyphX Pro configuration file <code>Preferences.txt</code>.</p> <p>Near the bottom of this file, under the label <code>OSC SETTINGS</code>, you should have a line like:</p> <p><code>INCOMING_OSC_PORT = 7005</code></p> <p>You must add two lines below this line:</p> Preferences.txt<pre><code>*** [OSC SETTINGS] ***\n\nINCOMING_OSC_PORT = 7005\nOUTGOING_OSC_PORT = 7000\nOSC_DEVICE_IP_ADDRESS = 127.0.0.1\n</code></pre> <p>Warning</p> <p>The above settings are an example only; they will need to be set according to your network and situation.</p>"},{"location":"lessons/osc-output/#osc-namespace","title":"OSC namespace","text":"<p>An OSC message sent from zcx will use an address like this:</p> <p><code>/zcx/zcx_push_1/enc/enc_1/value</code></p> <p>The first part, <code>zcx</code>, indicates that the message comes from a zcx script, which is useful when using an external tool to route messages.</p> <p>The second part, <code>zcx_push_1</code>, is the name of the particular zcx script sending the message. This is useful when using multiple zcx scripts simultaneously, as it allows you to route messages per-script.</p> <p>One such routing tool is OSCRouter from ETC Labs.</p>"},{"location":"lessons/osc-output/#configuring-what-information-is-sent","title":"Configuring what information is sent","text":"<p>By default, no OSC data is sent. You may enable the particular OSC output you want through the preferences.yaml option <code>osc_output</code>.</p> <p>Read on to see the appropriate values for <code>osc_output</code>.</p>"},{"location":"lessons/osc-output/#available-outputs","title":"Available outputs","text":""},{"location":"lessons/osc-output/#encoder-mappings","title":"Encoder mappings","text":"<p>For encoders, zcx will send the name of the mapped parameter, as well as the value as several datatypes.</p> preferences.yaml<pre><code>osc_output:\n  encoders:\n    name: true\n    value: true\n    int: true\n    float: true\n</code></pre>"},{"location":"lessons/osc-output/#name","title":"name","text":"<p>The name of the mapped parameter, as it appears in the Live UI:</p> <p>Address: <code>/zcx/&lt;script name&gt;/enc/&lt;encoder name&gt;/name</code></p> <p>Value: string</p>"},{"location":"lessons/osc-output/#value","title":"value","text":"<p>The value of the mapped parameter, as it appears in the Live UI:</p> <p>Address: <code>/zcx/&lt;script name&gt;/enc/&lt;encoder name&gt;/value</code></p> <p>Value: string</p>"},{"location":"lessons/osc-output/#int","title":"int","text":"<p>The value of the mapped parameter, as an integer between 0-127:</p> <p>Address: <code>/zcx/&lt;script name&gt;/enc/&lt;encoder name&gt;/int</code></p> <p>Value: int</p>"},{"location":"lessons/osc-output/#float","title":"float","text":"<p>The value of the mapped parameter, as a float between 0.0-1.0:</p> <p>Address: <code>/zcx/&lt;script name&gt;/enc/&lt;encoder name&gt;/float</code></p> <p>Value: float</p>"},{"location":"lessons/osc-output/#page-changes","title":"Page changes","text":"<p>zcx will send messages when the page is changed.</p> preferences.yaml<pre><code>osc_output:\n  page: true\n</code></pre>"},{"location":"lessons/osc-output/#page-number","title":"page number","text":"<p>Address: <code>/zcx/&lt;script name&gt;/page/number/&lt;current page number&gt;</code></p> <p>Value: int</p>"},{"location":"lessons/osc-output/#page-name","title":"page name","text":"<p>Address: <code>/zcx/&lt;script name&gt;/page/name/&lt;current page name&gt;</code></p> <p>Value: string</p>"},{"location":"lessons/osc-output/#session-ring","title":"session ring","text":"<p>zcx will send messages relating to the session ring.</p> preferences.yaml<pre><code>osc_output:\n  ring_tracks: true\n  ring_pos: true\n</code></pre>"},{"location":"lessons/osc-output/#ring-tracks","title":"ring tracks","text":"<p>When the ring moves horizontally, zcx will send one message for each column (track) of the ring:</p> <p>Address: <code>/zcx/&lt;script name&gt;/ring/track/&lt;index&gt;/&lt;track name&gt;</code></p> <p>Value: string</p>"},{"location":"lessons/osc-output/#ring-coordinates","title":"ring coordinates","text":"<p>When the ring moves, zcx will send the x (track) and y (scene) positions of the top-left corner of the ring:</p> <p>Address: <code>/zcx/&lt;script name&gt;/ring/pos_x/&lt;x position&gt;</code> and <code>/zcx/&lt;script name&gt;/ring/pos_y/&lt;y position&gt;</code></p> <p>Value: int</p>"},{"location":"lessons/overlays-layers/","title":"Layers and overlays","text":"<p>In the getting started tutorial you learned about modes and matrix pages. We can use both these concepts to have buttons on our MIDI controller perform different commands depending on the context.</p> <p>By using layers and overlays, we can create even more complex control surfaces.</p>"},{"location":"lessons/overlays-layers/#matrix-sections-and-layers","title":"Matrix sections and layers","text":"<p>You previously learned that two matrix sections that appear on the same page cannot share the same coordinates. By using layers, we can have two sections on the same page even if they conflict.</p> <p>Take this example: matrix_sections.yaml<pre><code>big_section:\n  row_start: 0\n  row_end: 7\n  col_start: 0\n  col_end: 7\n\nhalf_section:\n  row_start: 4\n  row_end: 7\n  col_start: 0\n  col_end: 7\n  layer: 1\n</code></pre></p> pages.yaml<pre><code>pages:\n  home_page:\n    - big_section\n    - half_section\n  alt_page:\n    - big_section\n</code></pre> <p><code>big_section</code> has reserved the full matrix, and <code>half_section</code> has reserved the bottom half of the matrix.</p> <p>In the definition for <code>half_section</code>, we have specified <code>layer: 1</code>. Since no <code>layer</code> was specified for <code>big_section</code>, it uses the default matrix layer: 0.</p> <p>Now when we enter <code>home_page</code>, we can see the top half of <code>big_section</code>, and below it <code>half_section</code>. When we enter <code>alt_page</code>, <code>half_section</code> is dismissed, and in its place is the bottom of <code>big_section</code>, which was previously obscured.</p> <p>So, a higher layer number means a higher priority. It is also valid to give matrix sections a negative layer index, i.e <code>layer: -1</code>.</p>"},{"location":"lessons/overlays-layers/#overlays","title":"Overlays","text":"<p>Overlays are like a combination of modes and pages. When an overlay is active, we can enable any number of matrix sections or alternate named control definitions.</p> <p>The pages system still functions as normal. However, when an overlay is active, we can override the usual sections that appear on that page with different ones.</p> <p>Overlays can also define new versions of your named controls, which isn't possible with the pages system.</p>"},{"location":"lessons/overlays-layers/#defining-overlays","title":"Defining overlays","text":"<p>First, we must edit <code>overlays.yaml</code>. You will find it in your config directory. If it is missing, create it.</p> zcx/_config/overlays.yaml<pre><code>overlays:\n  my_overlay: {}\n</code></pre> <p>If you are using a newer zcx demo config, there will be one or more overlays defined under the <code>overlays</code> key. Each entry in <code>overlays</code> is a dict. Above, we defined a new overlay called <code>my_overlay</code>, and gave it an empty definition (the <code>{}</code> means an empty dict/object).</p>"},{"location":"lessons/overlays-layers/#overlaying-named-controls","title":"Overlaying named controls","text":"<p>We must now create a new yaml file for our overlay. This file goes in the <code>overlays/</code> folder inside your config folder. Create the file <code>overlays/&lt;overlay name&gt;.yaml</code></p> zcx/_config/overlays/my_overlay.yaml<pre><code>my_button:\n  gestures:\n    pressed:\n      msg: This is the overlay button!\n</code></pre> <p>The overlay file works just like <code>named_controls.yaml</code>. We specify a button name, and provide a control definition.</p> <p>You may leave the overlay file blank if you only want to use the overlay to enable matrix sections.</p>"},{"location":"lessons/overlays-layers/#overlaying-matrix-sections","title":"Overlaying matrix sections","text":"<p>To associate a matrix section with this overlay, add the key <code>matrix sections</code> to the overlay definition:</p> zcx/_config/overlays.yaml<pre><code>overlays:\n  my_overlay:\n    matrix_sections:\n      - my_matrix_section\n      - my_other_matrix_section\n</code></pre> <p><code>matrix_sections</code> is just a list of matrix sections you have already defined in matrix_sections.yaml.</p>"},{"location":"lessons/overlays-layers/#enabling-overlays","title":"Enabling overlays","text":"<p>When zcx loads, all overlays are disabled. It's up to us to define a control that activates and deactivates the overlay:</p> named_controls.yaml<pre><code>my_button:\n  gestures:\n    pressed:\n      msg: This is the base button.\n\nscales:\n  gestures:\n    pressed:\n      overlay:\n        enable: my_overlay\n    released:\n      overlay:\n        disable: my_overlay\n</code></pre> <p>Now, while the button <code>scales</code> is held the overlay <code>my_overlay</code> is active. When <code>my_button</code> is pressed, it will show the message <code>This is the overlay button!</code> When we leave <code>my_overlay</code> and press <code>my_button</code> again it will show <code>This is the base button.</code></p> <p>Tip</p> <p>You can use a startup command to enable an overlay when zcx loads.</p> <p>Tip</p> <p>You can use an overlay control to get LED feedback about an overlay's status.</p>"},{"location":"lessons/overlays-layers/#conflicts-with-multiple-overlays","title":"Conflicts with multiple overlays","text":"<p>You can enable any number of overlays at the same time. However, if two overlays define the same control, which takes priority?</p>"},{"location":"lessons/overlays-layers/#named-controls","title":"Named controls","text":"<p>By default, when this conflict occurs zcx will resolve it like so:</p> <p>Of all the overlays that define the same control, one overlay will win arbitrarily. For the other overlays, the conflicting control will not be enabled. For all controls that don't conflict, the overlays will apply as normal.</p> <p>This behaviour is likely not what you want, so we can resolve it manually by specifying a layer for each overlay:</p> overlays.yaml<pre><code>overlays:\n  my_overlay:\n    layer: 1\n\n  other_overlay:\n    layer: 2\n</code></pre> <p>If <code>my_overlay</code> and <code>other_overlay</code> both define the same control, and they are both enabled, <code>other_overlay</code> will win as it has a higher layer number. So priority here work similarly to matrix layers, with a key difference:</p> <p>The default layer is 1, and an overlay's layer cannot be lower than 1. The default named controls definition (in <code>named_controls.yaml</code>) can be considered as layer 0.</p>"},{"location":"lessons/overlays-layers/#matrix-controls","title":"Matrix controls","text":"<p>Priority here works similarly to matrix layers, with some key differences:</p> <ul> <li>When two overlays try to enable a matrix section at the same coordinates, the section with the higher layer number wins.</li> <li>Matrix sections enabled by an overlay always have priority over any section enabled by a page, even if the overlaid section has a lower layer number than the page's section.</li> </ul>"},{"location":"lessons/overlays-layers/#disabling-controls-with-an-overlay","title":"Disabling controls with an overlay","text":"<p>When an overlay is enabled, you may wish to disable the existing functionality of some controls in <code>named_controls.yaml</code>. This can be done by providing a minimal definition in your overlay file:</p> overlays/my_overlay.yaml<pre><code>scene_1:\n  color: 0\n</code></pre> <p>When this overlay is enabled, <code>scene_1</code>s LED will turn off, and as no <code>gestures</code> key was provided, it will not respond to any gestures.</p>"},{"location":"lessons/overlays-layers/#automations","title":"Automations","text":""},{"location":"lessons/overlays-layers/#on_enter-on_leave","title":"on_enter, on_leave","text":"<p>You may define a command bundle that is executed when the overlay is enabled or disabled.</p> overlays.yaml<pre><code>overlays:\n  my_overlay:\n    on_enter:\n      cxp: METRO ON\n    on_leave:\n      cxp: METRO OFF\n</code></pre>"},{"location":"lessons/overlays-layers/#pages_in-pages_out","title":"pages_in, pages_out","text":"<p>You may define a list <code>pages_in</code>. This is a list of page names or page numbers (zero-indexed). When entering a page in this list, the overlay will automatically be enabled:</p> overlays.yaml<pre><code>overlays:\n  my_overlay:\n    pages_in:\n      - home_page\n      - my_cool_page\n</code></pre> <p>When <code>home_page</code> or <code>my_cool_page</code> is entered, <code>my_overlay</code> will be automatically enabled. With a <code>pages_in</code> key, by default, the overlay will be disabled if we enter a page that isn't listed here.</p> <p>We can override this behaviour with a <code>pages_out</code> key:</p> overlays.yaml<pre><code>overlays:\n  my_overlay:\n    pages_in:\n      - home_page\n      - my_cool_page\n    pages_out:\n      - my_cool_page\n      - alt_page\n</code></pre> <p><code>my_overlay</code> will now be enabled upon entering <code>home_page</code> or <code>my_cool_page</code>. It will be disabled when leaving the pages <code>my_cool_page</code> or <code>alt_page</code>, but not <code>home_page</code></p> <p>You may define a <code>pages_out</code> without <code>pages_in</code>.</p> <p>You may set either <code>pages_in</code> or <code>pages_out</code> to <code>true</code> to enable or disable the overlay whenever the page changes.</p>"},{"location":"lessons/overlays-layers/#pitfalls","title":"Pitfalls","text":""},{"location":"lessons/overlays-layers/#design","title":"Design","text":"<p>It is entirely possible to create an overlay that cannot be escaped like so:</p> named_controls.yaml<pre><code>my_control:\n  gestures:\n    pressed:\n      overlay:\n        enable: my_overlay\n    released:\n      overlay:\n        disable: my_overlay\n</code></pre> overlays/my_overlay.yaml<pre><code>my_control:\n  gestures: METRO ON\n</code></pre> <p>When <code>my_control</code> is pressed <code>my_overlay</code> will be enabled. But <code>my_overlay</code> overrides <code>my_control</code>. As we can never release the default <code>my_control</code>, we are now stuck in <code>my_overlay</code>.</p> <p>zcx will not check for any scenario like the above, so you will need to carefully plan your overlays.</p>"},{"location":"lessons/overlays-layers/#control-names","title":"Control names","text":"<p>When getting a control by name, i.e. from the zcx user action, you need to use a special name to get a control that is part of an overlay.</p> <p>This name is just the base control name suffixed with the overlay name. So with a button called <code>my_button</code> and an overlay called <code>my_overlay</code>, you would use the name <code>my_button_my_overlay</code>.</p> <p>You can also refer to a control by its alias, if you have defined one.</p>"},{"location":"lessons/overlays-layers/#group-names","title":"Group names","text":"<p>The names of control groups must be unique within <code>named_controls.yaml</code> and any overlay yaml files.</p>"},{"location":"lessons/porting/","title":"Porting zcx to new hardware","text":"<p>zcx has full support for a limited set of MIDI controllers. If your controller is not one of those supported, it is relatively easy to create a 'port' for your hardware</p> <p>Getting help</p> <p>If you get stuck, feel free to reach out on the Discord for help.</p> <p>Making your port available to others</p> <p>If you'd like to make your port available to all users of zcx, have a look at the contributing guide and reach out in the Discord before getting started.</p>"},{"location":"lessons/porting/#download-the-generic-build","title":"Download the generic build","text":"<p>Head over to the latest release and download the file <code>_zcx_generic.zip</code>. Follow the standard instructions for installation.</p>"},{"location":"lessons/porting/#optional-rename-the-folder","title":"Optional: rename the folder","text":"<p>The folder can be named whatever you like. This helps to stay organised.</p>"},{"location":"lessons/porting/#open-the-folder-in-your-code-editor","title":"Open the folder in your code editor","text":"<p>I.e. <code>_zcx_generic</code>, or whatever you've renamed it to. This allows you to see all the relevant files at once.</p> <p>If you don't have a code editor, Microsoft Visual Studio Code is a good option.</p>"},{"location":"lessons/porting/#edit-the-specification-files","title":"Edit the specification files","text":"<p>These are the files that tell zcx what MIDI messages to expect from your hardware, as well as what they should be named. We'll go through each file.</p>"},{"location":"lessons/porting/#specsyaml","title":"specs.yaml","text":"<p>Here we define settings that apply across the controller.</p>"},{"location":"lessons/porting/#global_midi_channel","title":"global_midi_channel","text":"<pre><code>global_midi_channel: 0\n</code></pre> <p>Most modern controllers send all messages on one channel: channel 1. In this file we use zero-indexed values, so the default of <code>0</code> should be fine.</p>"},{"location":"lessons/porting/#button_matrix","title":"button_matrix","text":"specs.yaml<pre><code>button_matrix:\n  msg_type: note\n  id_start: 0\n  id_end: 63\n#  raw_identifiers: [\n#    [ 81, 82, 83, 84, 85, 86, 87, 88 ],\n#    [ 71, 72, 73, 74, 75, 76, 77, 78 ],\n#    [ 61, 62, 63, 64, 65, 66, 67, 68 ],\n#    [ 51, 52, 53, 54, 55, 56, 57, 58 ],\n#    [ 41, 42, 43, 44, 45, 46, 47, 48 ],\n#    [ 31, 32, 33, 34, 35, 36, 37, 38 ],\n#    [ 21, 22, 23, 24, 25, 26, 27, 28 ],\n#    [ 11, 12, 13, 14, 15, 16, 17, 18 ]\n#  ]\n  feedback: rgb\n  momentary: true\n  width: 8\n  playable: true\n</code></pre> <p>Here we define the specs of the button matrix.</p>"},{"location":"lessons/porting/#msg_type","title":"msg_type","text":"<p>Either <code>note</code> or <code>cc</code>.</p>"},{"location":"lessons/porting/#matrix-ids","title":"matrix IDs","text":"<p>Here we define the note or CC numbers that the matrix sends. Most controllers have a contiguous matrix; if the matrix has 64 buttons, they are all in order with no gaps.  The Ableton Push works like this \u2014 it sends notes 36 through 99. In this case, we can set <code>id_start: 36</code> and <code>id_end: 99</code>.</p> <p>Other controllers, like the Launchpad, have 'gaps' in the matrix. In this case, comment out (or delete) <code>id_start</code> and <code>id_end</code>, and un-comment <code>raw_identifiers</code>. This is a list of lists, where each inner list item is the note or CC number sent for that pad.</p> <p>When looking at <code>raw_identifiers</code>, the layout you see is how the controller looks from the user's perspective: in this example the top-left pad sends ID 81, and the bottom-right pad sends ID 18.</p>"},{"location":"lessons/porting/#feedback","title":"feedback","text":"<p>Here we define what type of feedback the controller uses, either <code>rgb</code>, <code>biled</code>, or <code>basic</code> (on or off). Modern controllers will use <code>rgb</code> feedback.</p>"},{"location":"lessons/porting/#momentary","title":"momentary","text":"<p>Modern controllers will have momentary buttons, so we can leave this as <code>true</code>.</p>"},{"location":"lessons/porting/#width","title":"width","text":"<p>Here we define the number of vertical columns in the matrix.</p>"},{"location":"lessons/porting/#playable","title":"playable","text":"<p>Leave this as <code>true</code>.</p>"},{"location":"lessons/porting/#cc_buttons-note_buttons","title":"cc_buttons, note_buttons","text":"specs.yaml<pre><code>cc_buttons:\n#  channel: 0\n  momentary: true\n  feedback: rgb\n\nnote_buttons:\n#  channel: 0\n  momentary: true\n  feedback: rgb\n</code></pre> <p>These settings work the same way as in <code>specs.yaml</code>. Set the values that apply to the majority of the controller's buttons. We can override individual buttons later.</p>"},{"location":"lessons/porting/#encoders","title":"encoders","text":"specs.yaml<pre><code>encoders:\n  sensitivity: 1.0\n  mode: RELATIVE_SMOOTH_TWO_COMPLIMENT\n</code></pre> <p>Here we define settings for the controllers encoders (knobs and/or faders). If your controller has neither, you can leave this section.</p>"},{"location":"lessons/porting/#sensitivity","title":"sensitivity","text":"<p>Define the default sensitivity for all encoders. In most cases the default of <code>1.0</code> is fine. Later, we can override the sensitivity of individual encoders.</p>"},{"location":"lessons/porting/#mode","title":"mode","text":"<p>This defines the specific type of message your hardware sends. Again, we can override specific encoders later, so choose the mode applicable to most controls.</p> <p>The available options are:</p> <pre><code>ABSOLUTE\nABSOLUTE_14_BIT             \nRELATIVE_SIGNED_BIT                     \nRELATIVE_SIGNED_BIT2\nRELATIVE_BINARY_OFFSET\nRELATIVE_TWO_COMPLIMENT          \nRELATIVE_SMOOTH_SIGNED_BIT          \nRELATIVE_SMOOTH_SIGNED_BIT2      \nRELATIVE_SMOOTH_BINARY_OFFSET         \nRELATIVE_SMOOTH_TWO_COMPLIMENT    \n</code></pre> <p>Capital letters are mandatory.</p> <p>For faders or knobs with a fixed start and end, use <code>ABSOLUTE</code>.</p> <p>For 'endless' knobs, you will have to consult the technical specs of your controller, or simply try different modes and see which feels best. The default, <code>RELATIVE_SMOOTH_TWO_COMPLIMENT</code> is a safe choice.</p>"},{"location":"lessons/porting/#feedback_1","title":"feedback","text":"<p><code>true</code> or <code>false</code>, depending on whether the encoders display visual feedback.</p>"},{"location":"lessons/porting/#preferences","title":"preferences","text":"<p>Here we define preferences that are specific to this controller. Other preferences should be left to the user.</p> <p>In most cases, the only thing that should be added here is <code>session_ring</code>:</p> specs.yaml<pre><code>session_ring:\n  width: 8\n  height: 8\n</code></pre> <p>Assuming an 8x8 matrix.</p>"},{"location":"lessons/porting/#cc_buttonsyaml-note_buttonsyaml","title":"cc_buttons.yaml, note_buttons.yaml","text":"<p>Here we define the CC or note number for every button on the controller. Yes, it's quite tedious.</p> <p>As you probably guessed, buttons that send CC are defined in <code>cc_buttons.yaml</code>, and note buttons in <code>note_buttons.yaml</code>.</p> <p>If your controller uses only one type, e.g. CC messages, you may delete <code>note_buttons.yaml</code>, and vice versa.</p> <p>Let's take a look at <code>cc_buttons.yaml</code>:</p> cc_buttons.yaml<pre><code>cc_button_placeholder:\n  cc: 127\n</code></pre> <p>It's quite simple: each entry is the name of this control (<code>cc_button_placeholder</code>), and we must provide another key (<code>cc</code> or <code>note</code>) that matches what this control sends.</p> <p>If this control deviates from the other controls, we can specify this:</p> cc_buttons.yaml<pre><code>cc_button_placeholder:\n  cc: 127\n  channel: 9\n  feedback: rgb\n</code></pre>"},{"location":"lessons/porting/#giving-good-names-to-controls","title":"giving good names to controls","text":"<p>The user will refer to these names in their named_controls.yaml, so it's important that the names you choose are intuitive.</p> <p>Here are some pointers:</p>"},{"location":"lessons/porting/#use-snake_case","title":"use snake_case","text":"<p>Control names should always be in lowercase. Controls that need multiple words to describe them should use snake_case, i.e. words should be separated by an underscore. <code>My Cool Control</code> would be <code>my_cool_control</code>.</p>"},{"location":"lessons/porting/#use-the-official-control-names","title":"use the official control names","text":"<p>If the control has a label printed on it, use that name. For example, the Push has a button labelled <code>Fixed Length</code>, so we would use the name <code>fixed_length</code>.</p> <p>For unlabelled controls, you can usually find the official name in the manufacturer's documentation.</p>"},{"location":"lessons/porting/#unless-theres-a-good-reason-not-to","title":"unless there's a good reason not to","text":"<p>The Push has a column of buttons that are used to launch scenes in Session View. These buttons are also used to control note repeat functionality, and are labelled <code>1/32t</code>, <code>1/32</code>, <code>1/16t</code>, etc.</p> <p>This is confusing, so it's better to use names like <code>scene_1</code>, <code>scene_2</code>, and so on.</p>"},{"location":"lessons/porting/#encodersyaml","title":"encoders.yaml","text":"<p>Just like <code>note_buttons.yaml</code> and <code>cc_buttons.yaml</code>, we create an entry for each encoder.</p> <p>You may provide overrides for any of the global options defined earlier.</p> <p>If your controller does not feature encoders, you may delete this file.</p>"},{"location":"lessons/porting/#sysexpy","title":"sysex.py","text":"<p>This file is only relevant for controllers with distinct 'Live' and 'user modes'. If your controller does not, you can skip this.</p> <p>Let's look at the <code>sysex.py</code> file for Push 1:</p> sysex.py<pre><code>LIVE_MODE = (240, 71, 127, 21, 98, 0, 1, 0, 247)\nUSER_MODE = (240, 71, 127, 21, 98, 0, 1, 1, 247)\nON_DISCONNECT = LIVE_MODE\nINIT_DELAY = 2000\n</code></pre> <p><code>LIVE_MODE</code> is the MIDI sysex sent upon entering 'Live' mode. <code>USER_MODE</code> is the sysex for user mode.</p> <p>It's particularly important to set <code>USER_MODE</code>, as this way zcx is aware of the mode switch, and can refresh all LED feedback.</p> <p>To determine the appropriate messages, you can use a MIDI monitor app like Protokol, and see what messages are sent when entering and exiting user mode.</p> <p>Protokol should display a message like:</p> <p><code>ENDPOINT(Ableton Push User Port) TYPE(SYSTEMEXCLUSIVE) DATA(F0477F1562000100F7)</code></p> <p>The <code>DATA</code> portion is what we're after, though it's displayed here in hexadecimal, and we need it in decimal. Please ask for help in the Discord if you're having trouble here.</p>"},{"location":"lessons/porting/#colorspy","title":"colors.py","text":"<p>This file determines how your controller responds to named colors and animated colors.</p> <p>The file provided in the generic release comes from the Push 1 release. The Push 1, Launchpad series, and APC Mini mk2 use a similar color mapping \u2014 hopefully your controller does too.</p> <p>If it doesn't, you can always specify colors by MIDI value in your config. If you'd like to try creating a custom <code>colors.py</code>, that is beyond the scope of this lesson, but reach out in the Discord for guidance.</p>"},{"location":"lessons/porting/#problematic-animations","title":"problematic animations","text":"<p>If, after pressing a control, the RGB feedback seems to 'glitch out', one workaround is to set a global control template with the option <code>suppress_animations: true</code>.</p>"},{"location":"lessons/porting/#notes","title":"notes","text":"<ul> <li>Do not edit <code>zcx.yaml</code>. Specifically, <code>hardware</code> must be left as <code>generic</code>. Changing this means the upgrade script will overwrite the contents of your hardware folder, and you'll have to do all this again.</li> </ul>"},{"location":"lessons/porting/#the-fun-begins","title":"the fun begins","text":"<p>Now that your controller is configured, see getting started for details on creating your user configuration.</p>"},{"location":"lessons/python-context/","title":"understanding the zcx python evaluation context","text":"<p>Whenever expressions are evaluated, or the python command is used, zcx will evaluate the code in a limited Python context.</p>"},{"location":"lessons/python-context/#why","title":"why?","text":"<p>This restriction is in place to safeguard zcx users against bad actors, who might distribute 'helpful' zcx configuration files that actually contain malicious code. Using this attack vector, an attacker could cause a lot of damage, like wiping you entire filesystem, or reading your sensitive files.</p>"},{"location":"lessons/python-context/#the-solution","title":"the solution","text":"<p>All user-supplied Python expressions are interpreted with the asteval library. asteval interprets your expressions with a limited context, which basically means that the most dangerous Python features are not available in this context. In particular, importing of modules is not allowed, and access to \"private\" attributes is prevented.</p>"},{"location":"lessons/python-context/#additional-restrictions","title":"additional restrictions","text":"<ul> <li>by default, <code>asteval</code> allows access to Python's open() method in read-only mode. This has been disallowed in zcx.</li> </ul>"},{"location":"lessons/python-context/#additional-symbols","title":"additional symbols","text":"<p>Several additional symbols are made available in template strings.</p>"},{"location":"lessons/reloading-control-surfaces/","title":"seeing changes in your zcx config","text":"<p>Any changes made to your zcx configuration will not be effective until the control surface script is reloaded. There are two ways to reload zcx:</p>"},{"location":"lessons/reloading-control-surfaces/#hot-reload","title":"hot reload","text":"<p>With a \"hot reload\", your config is reloaded without reloading the zcx application code.</p> <p>A hot reload can be triggered via:</p> <ul> <li>The hot_reload command</li> <li>The zcx user action</li> </ul> <p>Each demo configuration has a pre-configured hot reload button combination.</p> <p>Note</p> <p>The hot reload feature is designed to speed up your workflow when creating your config. It should not be relied upon in a performance situation.</p>"},{"location":"lessons/reloading-control-surfaces/#unaffected-by-hot-reload","title":"unaffected by hot reload","text":"<p>The following config changes will require a full reload to take effect:</p> <ul> <li>Changes to the width and/or height of the session ring.</li> <li>Changes to files in the <code>hardware/</code> directory. This is only relevant if you've made your own port.</li> </ul>"},{"location":"lessons/reloading-control-surfaces/#full-reload","title":"full reload","text":"<p>With a full reload, all zcx code is restarted and then your config is loaded again. There are several ways to achieve this, listed here from most to least tedious.</p>"},{"location":"lessons/reloading-control-surfaces/#restart-ableton-live","title":"restart ableton live","text":"<p>Quit Ableton Live and re-open it, reloading all control surface scripts.</p>"},{"location":"lessons/reloading-control-surfaces/#reload-the-set","title":"reload the set","text":"<p>Save your set and re-open it. After saving, click \"Open Recent Set\" in the menu bar to easily reload the current set. This will reload all control surface scripts.</p>"},{"location":"lessons/reloading-control-surfaces/#manually-reload-zcx","title":"manually reload zcx","text":"<p>In Live's MIDI preferences, reassign the zcx slot to any other script, then select zcx again. This will reload only the chosen zcx script.</p>"},{"location":"lessons/reloading-control-surfaces/#reload-all-scripts-at-will","title":"reload all scripts at will","text":"<p>If you have the Ableton 12 Beta, you can enable a special <code>Tools</code> item in the menu bar.  In this menu is an option to <code>Reload MIDI Remote Scripts</code>, which has a hotkey assigned.  This will reload all scripts connected, including ClyphX Pro.</p> <p>Note: If you own a copy of Ableton 12, you are automatically eligible for the beta program.</p> <p>Here is a guide on getting the beta and enabling this menu.</p>"},{"location":"lessons/reporting-bugs/","title":"how to report a bug","text":"<p>If you've found a bug, or think you've found a bug, please don't hesitate to raise an issue.</p> <p>There are two good ways to do this:</p>"},{"location":"lessons/reporting-bugs/#create-an-issue-on-github","title":"create an issue on github","text":"<p>If you're comfortable with Github, head over to the zcx-core repo and create a new issue. We don't have any enforced format at the moment.</p>"},{"location":"lessons/reporting-bugs/#create-a-thread-on-discord","title":"create a thread on discord","text":"<p>Head over to the discord and create a new thread in <code>#bug-reports</code>.</p>"},{"location":"lessons/session-ring/","title":"Using the zcx session ring","text":"<p>Like other control surface scripts, zcx provides a 'session ring' \u2014 a colored box that can be moved around the session to target different tracks or scenes.</p> <p></p> <p>Session view</p> <p>This lesson deals only with the session ring itself. To configure the session view (as seen on Launchpad and similar), see the session view lesson.</p>"},{"location":"lessons/session-ring/#resizing-the-ring","title":"Resizing the ring","text":"<p>By default, the session ring will be configured to the same width and height as your controller's matrix. You may resize the session ring via preferences.yaml.</p>"},{"location":"lessons/session-ring/#disabling-the-ring","title":"Disabling the ring","text":"<p>You may disable the ring in preferences.yaml.</p>"},{"location":"lessons/session-ring/#moving-the-ring","title":"Moving the ring","text":"<p>A script's ring may be positioned with the ring command or the ClyphX Pro ring actions.</p> <p>zcx scripts are compatible with ClyphX Pro's script linking feature.</p>"},{"location":"lessons/session-ring/#clyphx-pro-control-surface-actions","title":"ClyphX Pro control surface actions","text":"<p>ClyphX Pro includes a variety of control surface actions, which can be used to interact with control surfaces. Many of these actions are compatible with zcx scripts.</p>"},{"location":"lessons/session-ring/#referencing-the-ring-from-template-strings","title":"Referencing the ring from template strings","text":"<p>You can use the built in <code>ring</code> variable within template expressions to perform actions on tracks or scenes at a certain position within the ring.</p> <p><code>ring</code> has two attributes: <code>tracks</code> and <code>scenes</code>. We can index into either and retrieve the name of the track at that position of the ring, or the zero-indexed scene number at that position of the ring.</p>"},{"location":"lessons/session-ring/#dynamic-scene-controls","title":"Dynamic scene controls","text":"<pre><code>__scene_controls:\n  includes: [\n    scene_1, scene_2, scene_3, scene_4, scene_5, scene_6, scene_7, scene_8\n  ]\n  gestures:\n    pressed: &gt;\n      SCENE ${ring.scenes[me.group_index] + 1}\n</code></pre> <p>Looking at the above screenshot, if <code>scene_1</code> was pressed the action list <code>SCENE 1</code> would be executed, launching scene one.</p> <p>If we move the ring down two scenes, pressing <code>scene_1</code> would trigger the action list <code>SCENE 3</code>. <code>scene_2</code> would do <code>SCENE 4</code>.</p>"},{"location":"lessons/session-ring/#dynamic-track-controls","title":"Dynamic track controls","text":"<pre><code>__state_controls:\n  includes: [\n    state_1, state_2, state_3, state_4, state_5, state_6, state_7, state_8\n  ]\n  gestures:\n    pressed: &gt;\n       \"${ring.tracks[me.group_index]}\" / MUTE\n</code></pre> <p>Looking at the above screenshot, if <code>state_1</code> was pressed, the action list <code>\"fx gtr 2\" / MUTE</code> would be executed.</p>"},{"location":"lessons/session-ring/#dynamic-encoder-mappings","title":"Dynamic encoder mappings","text":"<p>It is possible to map encoders to the parameter of a track at a certain position of the ring. See Encoder Reference for details.</p>"},{"location":"lessons/session-ring/#out-of-bounds-references","title":"Out of bounds references","text":"<p>It is often valid to refer to tracks or scenes outside of the session ring by using a negative index, or an index that is greater than or equal to the width and height of the ring. For example:</p> <ul> <li>Using <code>\"${ring.tracks[-1]}\" / MUTE</code> will mute the track one to the left of the left edge of the ring.</li> <li>Using <code>\"${ring.tracks[8]}\" / MUTE</code> on a 8-track ring will mute the track one to the right of the right edge of the ring.</li> <li>Using <code>\"SCENE ${ring.scenes[-8]}\"</code> while the top edge of the ring is at scene 9 will launch scene 1.</li> </ul>"},{"location":"lessons/session-view/","title":"Session view","text":"<p>zcx can be configured to show an interactive representation of Live's session view, as found on controllers like the Launchpad, Push, and APC.</p> <p>Session ring</p> <p>Session view shows clips within the session ring. See the session ring lesson to learn about configuring and controlling the session ring.</p>"},{"location":"lessons/session-view/#configuration","title":"Configuration","text":"<p>The zcx session view is actually a specialized matrix section. To configure it, add a new section called <code>__session_view</code> to your <code>matrix_sections.yaml</code>:</p> matrix_sections.yaml<pre><code>__session_view:\n  row_start: 0\n  row_end: 7\n  col_start: 0\n  col_end: 7\n</code></pre> <p>There is no need to create the file <code>matrix_sections/__session_view.yaml</code>.</p> <p>Once the section is created, add it to a page.</p> <p>Note</p> <p>The <code>__session_view</code> section's dimensions must be no greater than the height and width of your session ring. </p>"},{"location":"lessons/session-view/#commands","title":"Commands","text":"<p>The session view comes with some default functionality: pressing a pad will fire the corresponding clip slot. Pressing a pad with a <code>select</code> mode active will select the corresponding clip slot.</p> <p>This is achieved with ClyphX Pro action lists:</p> <pre><code>gestures:\n  pressed: &gt;\n    ${track_name}\" / SVIEW ${scene_number} PRESS\n  pressed__select: &gt;\n    \"${track_name}\" / SEL ${scene_number}\n</code></pre> <p>Template strings</p> <p>To understand this syntax, see the template reference</p>"},{"location":"lessons/session-view/#sview-action","title":"SVIEW action","text":"<p>By default, pressing a session view pad will fire the action <code>SVIEW</code>. For an un-armed track, pressing a pad will fire the associated clip slot.</p> <p>For an armed track, pressing a pad will fire the ClyphX Pro action RECFIX, starting a fixed-length recording in the clip.</p> <p><code>RECFIX</code> will use the ClyphX Pro variable called <code>%zcx_fixed_record%</code> as the record length. If you have not set this variable, it will default to <code>0</code>, starting a non-fixed-length recording.</p> <p>By setting this variable, like with the action list <code>%zcx_fixed_record% = 4</code>, you can set the length of the recording (in this case 4 bars). By setting the variable back to 0, you can disable fixed-length recording.</p> <p>The variable <code>%zcx_fixed_record%</code> is shared across all running zcx scripts.</p> <p>Warning</p> <p>Nothing happening when you press a session view control?</p> <p>The most likely reason is that you haven't installed the user action <code>ZcxSessionView.py</code> which is bundled with your zcx download. See here for installation instructions.</p>"},{"location":"lessons/session-view/#extending-defaults","title":"Extending defaults","text":"<p>We can extend the default functionality by adding a section template:</p> matrix_sections.yaml<pre><code>__session_view:\n  row_start: 0\n  row_end: 7\n  col_start: 0\n  col_end: 7\n  template:\n    gestures:\n      released_delayed: &gt;\n        \"{track_name}\" / STOPNQ\n</code></pre> <p>In addition to the two previous commands, releasing after a long press will immediately stop the playing clip.</p>"},{"location":"lessons/session-view/#special-properties","title":"Special properties","text":"<p>You can use several unique properties in session view commands:</p> <p><code>track_name</code></p> <p>The name of the track to which the control belongs. Good for use with track actions.</p> <p>Example: <pre><code>\"${track_name}\" / MUTE\n</code></pre></p> <p><code>scene_number</code></p> <p>The one-indexed scene number to which the control belongs.</p> <p>Example: <pre><code>\"${track_name}\" / PLAY ${scene_number}\n</code></pre></p> <p><code>clip_target</code></p> <p>A convenience property for use with clip actions.</p> <p>Example: <pre><code>${clip_target} DEL\n\n# evaluates to something like:\n\"my cool track\" / CLIP(6) DEL\n</code></pre></p> <p><code>user_clip_target</code></p> <p>As above, but for use with user clip actions, which require a special syntax.</p> <p>Example:</p> <pre><code>${user_clip_target} MY_USER_ACTION\n\n# evaluates to something like:\n\"my cool track\" / USER_CLIP(6) MY_USER_ACTION\n</code></pre>"},{"location":"lessons/session-view/#overwriting-defaults","title":"Overwriting defaults","text":"<p>In the section template, simply define new commands for the gesture <code>pressed</code> and/or <code>pressed__select</code>:</p> matrix_sections.yaml<pre><code>__session_view:\n  row_start: 0\n  row_end: 7\n  col_start: 0\n  col_end: 7\n  template:\n    gestures:\n      pressed: &gt;\n        ${clip_target} COLOR 1\n      pressed__select: &gt;\n        \"${track_target}\" / SOLO\n</code></pre>"},{"location":"lessons/session-view/#additional-options","title":"Additional options","text":""},{"location":"lessons/session-view/#clip_color_is_play_color","title":"clip_color_is_play_color","text":"matrix_sections.yaml<pre><code>__session_view:\n  row_start: 0\n  row_end: 7\n  col_start: 0\n  col_end: 7\n  clip_color_is_play_color: true\n</code></pre> <p>When <code>false</code>, a playing clip will pulse green. When <code>true</code>, a playing clip will pulse with the clip color from bright to dark. The <code>true</code> option does not look good on many controllers.</p>"},{"location":"lessons/touch-osc/","title":"Using TouchOSC as a zcx controller","text":"<p>TouchOSC from Hexler is a great app that lets you create a virtual MIDI controller which can be used on devices like tablets, phones, and touchscreen computers.</p> <p>It is possible to use a TouchOSC controller as the input to a zcx script. To do so, you will need to create a port, with specifications that match your TouchOSC layout.</p> <p>Note</p> <p>Instructions on creating a TouchOSC layout are outside the scope of this lesson. See the official documentation.</p>"},{"location":"lessons/touch-osc/#lives-control-surface-settings","title":"Live's control surface settings","text":"<p>Follow the official manual to establish a MIDI connection between Live and your TouchOSC device. Once set up, set <code>TouchOSC Bridge</code> as the input and output of your zcx script.</p>"},{"location":"lessons/touch-osc/#osc-output-from-zcx","title":"OSC output from zcx","text":"<p>zcx features OSC output. By following the TouchOSC manual, you can bring this information into TouchOSC.</p> <p>Note: OSC cannot be used as an input to zcx, only MIDI.</p>"},{"location":"lessons/touch-osc/#notes","title":"Notes","text":"<ul> <li>When using the TouchOSC Grid control to create a button matrix, you must set the <code>Start</code> property to <code>BOTTOM LEFT</code>.</li> <li>Feedback from zcx is designed to work with hardware controllers, and may produce unexpected results with TouchOSC. One workaround is to set a global control template with the option <code>suppress_animations: true</code>.</li> </ul>"},{"location":"lessons/troubleshooting/","title":"Troubleshooting","text":"<p>This lesson explains some common issues you may face with zcx, and steps you can take to troubleshoot.</p> <p>Reporting bugs</p> <p>If you think you've found a bug, see the lesson to learn how to report it.</p>"},{"location":"lessons/troubleshooting/#reading-logs","title":"Reading logs","text":"<p>zcx writes logs to two locations: log.txt, located in your zcx folder, and Live's own log file. The zcx log file only contains messages pertaining to that particular zcx script, while Live's log features messages from Live, ClyphX Pro, and any zcx scripts. The zcx log file is helpful if you have multiple zcx scripts and/or a busy Live log, though some serious errors that prevent zcx from loading will only be written to Live's log, so check there if in doubt.</p> <p>Live's log file can be found at:</p> <p>Windows: <code>\\Users\\[username]\\AppData\\Roaming\\Ableton\\Live x.x.x\\Preferences\\Log.txt</code> Mac: <code>/Users/[username]/Library/Preferences/Ableton/Live x.x.x/Log.txt</code></p> <p>You may configure the detail level of the log in preferences.yaml.</p>"},{"location":"lessons/troubleshooting/#common-issues","title":"Common issues","text":""},{"location":"lessons/troubleshooting/#zcx-doesnt-appear-in-lives-control-surface-list","title":"zcx doesn't appear in Live's control surface list","text":"<ul> <li>Double-check you have correctly followed the installation instructions.<ul> <li>This includes making sure the script's MIDI ports are properly assigned.</li> </ul> </li> <li>If you are installing zcx for the first time, make sure to quit and re-open Live.</li> <li>Check Live's Log.txt for errors relating to the script.</li> </ul>"},{"location":"lessons/troubleshooting/#live-shows-a-dialog-saying-zcx-failed-to-load","title":"Live shows a dialog saying zcx failed to load","text":"<ul> <li>Try to make sense of the error message.<ul> <li>In many cases, the error is due to a misconfiguration. Where possible, the error will tell you the name of the file that is causing the error, the particular section of the file, and, potentially, steps to fix it.</li> </ul> </li> <li>In many cases, the log will have more detailed information.</li> <li>If the error has appeared right after making a change to your configuration, double-check your changes against the documentation to make sure you have followed it correctly.</li> </ul>"},{"location":"lessons/troubleshooting/#my-configuration-isnt-working-how-i-expect-it-to","title":"My configuration isn't working how I expect it to","text":"<ul> <li>Double-check your configuration against the documentation to make sure you have followed it correctly.<ul> <li>If a particular control isn't working, check the control reference to make sure you are spelling things correctly and supplying valid values.</li> </ul> </li> </ul>"},{"location":"lessons/troubleshooting/#zcx-is-not-registering-input-andor-is-not-displaying-led-feedback","title":"zcx is not registering input and/or is not displaying LED feedback","text":"<ul> <li>If neither input nor output seems to work, check the log.</li> <li>Otherwise, ensure the script's MIDI ports are properly assigned.</li> </ul>"},{"location":"lessons/troubleshooting/#getting-help","title":"Getting help","text":"<p>Feel free to ask for help in the Discord by creating a new thread in <code>#help</code>.</p>"},{"location":"lessons/troubleshooting/#providing-information","title":"Providing information","text":"<p>You may be asked to provide either of the log files, and in some cases a complete copy of your zcx folder. Locate your zcx folder, right-click, and select \"Compress\" (macOS) or \"Compress to -&gt; ZIP File\" (Windows). You may then drag this .zip file into your Discord message.</p>"},{"location":"lessons/troubleshooting/#attaching-a-single-file","title":"Attaching a single file","text":"<p>Simply drag-and-drop the file into your Discord message.</p>"},{"location":"lessons/troubleshooting/#pasting-configuration-snippets-into-discord","title":"Pasting configuration snippets into Discord","text":"<p>If you simply paste yaml or ClyphX Pro code into Discord, it will not be properly formatted, and so will be very hard to read. You can help by ensuring any code you send is enclosed in a code block.</p>"},{"location":"lessons/troubleshooting/#privacy","title":"Privacy","text":"<p>When providing the log file, this will often contain the username of your computer account. When providing a copy of your installation and config, this necessarily contains your intellectual property. Keep in mind that the Discord server is essentially public.</p> <p>If any of these issues is a concern, feel free to ask for help via direct message instead.</p>"},{"location":"lessons/upgrade/","title":"upgrading your zcx installation","text":"<p>To get access to the latest features and bugfixes, you should keep your zcx installation(s) up to date. If you use multiple zcx installations (for different controllers), you need to upgrade each install separately.</p> <p>Danger</p> <p></p> <p>zcx is pre v1. This means it's very likely a new version will have breaking changes. 'Breaking changes' basically means that if you upgrade, your old config might rely on features that work differently now. You may even have to move, rename, or delete certain files to make your old config compatible.</p> <p>To see if you are affected by any breaking changes, read the releases page on GitHub.</p>"},{"location":"lessons/upgrade/#automatic-upgrade","title":"automatic upgrade","text":"<p>Starting from v0.5, you can use the Python script <code>upgrade.py</code> to get the latest release from GitHub.</p> <p>This script will:</p> <ul> <li>backup your existing installation to <code>Remote Scripts/__zcx_backups__</code></li> <li>Download the newest release</li> <li>Replace all application code with the newest version</li> <li>Restore your configuration files</li> <li>Install or upgrade the zcx user action.</li> </ul>"},{"location":"lessons/upgrade/#running-the-script","title":"running the script","text":"<p>To run the script, you will need to download and install Python. Once you've done that, open a terminal or PowerShell window and navigate to your zcx installation, and run the script.</p> <p>macOS <pre><code>cd \"~/Music/Ableton/User Library/Remote Scripts/&lt;your zcx folder&gt;\"\npython3 upgrade.py\n</code></pre></p> <p>Windows <pre><code>cd \"\\Users\\&lt;username&gt;\\Documents\\Ableton\\User Library\\Remote Scripts\\&lt;your zcx folder&gt;\"\npython upgrade.py\n</code></pre></p> <p>Note</p> <p>The paths above are the defaults. You will need to modify them if your User Library is in a different location.</p>"},{"location":"lessons/using-multiple-configs/","title":"Using multiple configurations","text":"<p>zcx allows you to have multiple configurations, and load a different one based on the name of your Live set (the name of your .als file).</p> <p>To create an alternative config folder, first create a new folder in the same location as your old folder. This new folder must be prefixed with <code>_config_</code>, with a name of your choice following, e.g. <code>_config_dj</code>, <code>_config_solo_set</code>, <code>_config_mixing</code>.</p> <p>Then, you will need to edit your preferences file, located in <code>&lt;your zcx folder&gt;/preferences/preferences.yaml</code>.</p> preferences.yaml<pre><code>configs:\n  - config: dj\n    pattern: dj_set\n\n  - config: solo_set\n    pattern: &gt;\n      [solo]\n\n  - config: mixing\n    pattern: MIX\n</code></pre> <p>The <code>config</code> field is the name of the config to load, while the <code>pattern</code> field is a regex pattern.</p> <p>Regular expressions don't need to be complex \u2014 the above patterns will match if they are found anywhere in the set name, i.e. a set called <code>my cool song [solo]</code> would load the <code>solo_set</code> config. <code>!!!MIX! sound of the summer</code> will load the <code>mixing</code> config, etc.</p> <p>If no pattern matches, the default config (<code>_config</code>) will be loaded.</p> <p>Note</p> <p>zcx only checks the set name when the control surface is reloaded.</p> <p>After renaming the set, you may load the new config by reloading zcx</p>"},{"location":"lessons/why-live-12/","title":"Why does zcx require Live 12.1?","text":"<p>zcx is written in the Python programming language. With newer versions of Python, developers have access to more features when writing code. </p> <p>The Python environment that zcx runs in is provided by Live. With Live 12.1 came an upgrade to Python 3.11.6. This newer version of Python includes several features that are very useful for zcx, and so early in development, a decision was made to target Live 12.1 as the minimum version compatible with zcx.</p>"},{"location":"lessons/zcx-user-action/","title":"Controlling zcx from ClyphX Pro","text":"<p>zcx ships with a suite of user actions for ClyphX Pro that allow you to control a zcx script from ClyphX. This means an individual script can be interacted with via any X-Trigger, such as an X-Clip, or an X-Control bound to another controller.</p>"},{"location":"lessons/zcx-user-action/#installing-the-user-action","title":"Installing the user action","text":"<p>Releases of zcx from v0.3.0 include a folder named <code>_user_actions</code>. Simply drag the contents of this folder (<code>Zcx.py</code>) into the ClyphX Pro user actions folder. The location of this folder is <code>.../Ableton/User Library/Remote Scripts/_user_actions</code>. If this folder doesn't exist, create it.</p>"},{"location":"lessons/zcx-user-action/#using-the-action","title":"Using the action","text":"<p>Usage of the zcx action is like so:</p> <p><code>ZCX &lt;target script&gt; &lt;command type&gt; &lt;command definition&gt;</code></p> <p>E.g.</p> <p><code>ZCX zcx_push_1 PAGE NEXT</code></p> <p><code>ZCX 2 MODE TGL SHIFT</code></p>"},{"location":"lessons/zcx-user-action/#targeting-a-script","title":"Targeting a script","text":"<p>The zcx action requires a specific script to be targeted. You may target by either script name or slot number.</p>"},{"location":"lessons/zcx-user-action/#by-name","title":"By name","text":"<p><code>ZCX zcx_push_1 PAGE NEXT</code></p> <p>This is the name of the folder containing the zcx script (similar to as seen in Live\u2019s preferences) with any leading underscores removed. E.g. a script in a folder called <code>_my_zcx_script</code> (shown as <code>my zcx script</code> in Live\u2019s prefs) is targeted like <code>ZCX my_zcx_script</code>. If you change the name of the script (by renaming its folder), you will need to update every ClyphX action list that uses the old name.</p>"},{"location":"lessons/zcx-user-action/#by-number","title":"By number","text":"<p><code>ZCX 2 MODE TGL SHIFT</code></p> <p>This is the number of the control surface script slot the zcx script resides in. If you move this script to another slot, you will need to update every ClyphX action list that uses the old name.</p>"},{"location":"lessons/zcx-user-action/#target-all-scripts","title":"Target all scripts","text":"<p><code>ZCX ALL REFRESH</code></p> <p>Apply the command to all zcx scripts.</p>"},{"location":"lessons/zcx-user-action/#available-commands","title":"Available commands","text":""},{"location":"lessons/zcx-user-action/#page","title":"PAGE","text":"<p>Activate a particular page by name or number.</p> <p><code>ZCX &lt;target script&gt; PAGE 0</code></p> <p><code>ZCX &lt;target script&gt; PAGE my_cool_page</code></p> <p>Or cycle through pages.</p> <p><code>ZCX &lt;target script&gt; PAGE NEXT</code></p> <p><code>ZCX &lt;target script&gt; PAGE PREV</code></p>"},{"location":"lessons/zcx-user-action/#mode","title":"MODE","text":"<p>Enable, disable, or toggle a zcx mode.</p> <p><code>ZCX &lt;target script&gt; MODE ON SHIFT</code></p> <p><code>ZCX &lt;target script&gt; MODE OFF SHIFT</code></p> <p><code>ZCX &lt;target script&gt; MODE TGL SHIFT</code></p>"},{"location":"lessons/zcx-user-action/#overlay","title":"OVERLAY","text":"<p>Enable, disable, or toggle an overlay.</p> <p><code>ZCX &lt;target script&gt; OVERLAY ON my_overlay</code></p> <p><code>ZCX &lt;target script&gt; OVERLAY OFF my_overlay</code></p> <p><code>ZCX &lt;target script&gt; OVERLAY TGL my_overlay</code></p>"},{"location":"lessons/zcx-user-action/#bind","title":"BIND","text":"<p>Manually re-bind a zcx encoder or param control to a new target. This works much the same as the ClyphX Pro BIND action.</p> <p>If binding an encoder, <code>control name</code> is the same one you'd use in encoders.yaml. If binding a named control, <code>control name</code> must be the name from named controls.yaml or the control's alias if one exists. If binding a matrix control, it must have an alias, which you will use for <code>control name</code>.</p> <p>For valid <code>mapping targets</code>, see Encoder Reference or Control Reference for param controls. The entire mapping target must be wrapped in double-quotes.</p> <p>Quotes within mapping targets</p> <p>A special syntax is required when using double-quotes within your mapping target, e.g. <code>\"my track\" / VOL</code>. You must replace all instances of the double-quote character (\") with a backtick (`).</p> <p>The mapping target <code>\"my track\" / DEV(\"my device\") P1</code> becomes <code>`my track` / DEV(`my device`) P1</code></p> <p>The backtick key is below the escape key.</p> <p>Warning</p> <p>This binding is temporary: if the control rebinds itself due to a mode change it will never rebind to a target set by this action. For a more permanent solution, see below.</p> <p><code>ZCX &lt;target script&gt; BIND &lt;control name&gt; \"&lt;mapping target&gt;\"</code></p> <p><code>ZCX zcx_push_1 BIND enc_3 \"SEL / PAN\"</code></p> <p><code>ZCX zcx_launchpad_x BIND enc_1 \"`my track` / DEV(`my device`) P1\"</code></p>"},{"location":"lessons/zcx-user-action/#bind_mode","title":"BIND_<code>mode</code>","text":"<p>Same as above, but overrides an existing mapping target permanently, and allows targeting certain modes.</p> <p><code>ZCX &lt;target script&gt; BIND_&lt;mode&gt; &lt;control name&gt; \"&lt;mapping target&gt;\"</code></p> <p><code>ZCX zcx_push_1 BIND_default my_button \"SEL / PAN\"</code></p> <p><code>ZCX zcx_launchpad_x BIND_shift__select enc_1 \"SEL / DEV(1) P1\"</code></p>"},{"location":"lessons/zcx-user-action/#kb","title":"KB","text":"<p>Control settings related to the keyboard view.</p>"},{"location":"lessons/zcx-user-action/#msg","title":"MSG","text":"<p>Only on Push 1</p> <p>Write a message to the controller's display. The message must be enclosed in double-quotes.</p> <p><code>ZCX &lt;target script&gt; MSG \"hello there\"</code></p>"},{"location":"lessons/zcx-user-action/#hw_mode","title":"HW_MODE","text":"<p>Set the controller to either 'Live' or zcx mode.</p> <p><code>ZCX &lt;target script&gt; HW_MODE live</code></p> <p><code>ZCX &lt;target script&gt; HW_MODE zcx</code></p>"},{"location":"lessons/zcx-user-action/#refresh","title":"REFRESH","text":"<p>Force a refresh of all controller feedback.</p> <p><code>ZCX &lt;target script&gt; REFRESH</code></p>"},{"location":"lessons/zcx-user-action/#color-commands","title":"Color commands","text":"<p>These commands allow you to set the color on an individual control by alias, as well as across an entire section or group of controls. Allowable color values are an int or a named color.</p>"},{"location":"lessons/zcx-user-action/#set_color","title":"set_color","text":"<p>Set the color of a named or aliased control.</p> <p><code>ZCX &lt;target script&gt; SET_COLOR my_control 124</code></p> <p><code>ZCX &lt;target script&gt; SET_COLOR record red</code></p>"},{"location":"lessons/zcx-user-action/#set_section_color","title":"set_section_color","text":"<p>Set the color of every control in a matrix section.</p> <p><code>ZCX &lt;target script&gt; SET_SECTION_COLOR actions_bottom_right cyan</code></p>"},{"location":"lessons/zcx-user-action/#set_group_color","title":"set_group_color","text":"<p>Set the color of every control in a group of controls.</p> <p><code>ZCX &lt;target script&gt; SET_GROUP_COLOR scene_buttons 127</code></p>"},{"location":"lessons/zcx-user-action/#hot_reload","title":"HOT_RELOAD","text":"<p>Perform a hot reload.</p> <p><code>ZCX &lt;target script&gt; HOT_RELOAD</code></p>"},{"location":"lessons/getting-started/","title":"getting started","text":"<p>Here's the stuff you should know before you get stuck in designing your zcx config:</p> <ol> <li> <p>installing zcx</p> <p>How to download, install, and enable zcx.</p> </li> <li> <p>reading zcx configurations</p> <p>This lesson will help you make sense of the syntax used in zcx. If you're already familiar with yaml, you can probably skip this.</p> </li> <li> <p>zcx concepts</p> <p>An introduction to the most important concepts and terminology used in zcx.</p> </li> <li> <p>demo config tour</p> <p>An introduction to the most important concepts and terminology used in zcx.</p> </li> <li> <p>editing a config</p> <p>Your first steps with configuring zcx.</p> </li> </ol> <p>Note</p> <p>If you're having trouble with any of this content, feel free to join the Discord to get help from a member of the community!</p>"},{"location":"lessons/getting-started/editing-a-config/","title":"editing a config","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque non semper ligula. Maecenas lobortis mi non eros elementum, non convallis justo rutrum. Proin imperdiet massa maximus, hendrerit turpis a, accumsan augue. Vivamus lacinia luctus felis, vel auctor lorem. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nam quis est ligula. Nunc vitae venenatis erat. Suspendisse congue ligula nisi, non lobortis elit venenatis sagittis. Etiam imperdiet ac metus a finibus. Suspendisse ex purus, ultrices sed ligula eu, sollicitudin varius purus. Proin sapien mi, vestibulum a accumsan sit amet, molestie nec sem. Ut eget efficitur lacus. Aenean ultrices, odio vel suscipit ullamcorper, tortor massa lobortis mi, ut pulvinar odio diam vitae magna.</p> <p>Tip</p> <p>Use the VS Code shortcut <code>Cmd/Ctrl + /</code> to quickly comment or un-comment the selected line of yaml. Use this shortcut with multiple lines highlighted to affect all of them at once.</p>"},{"location":"lessons/getting-started/editing-a-config/#ungrouping-controls","title":"ungrouping controls","text":"<p>The demo config will have several control group definitions:</p> named_controls.yaml<pre><code>__scene_controls:\n  includes:\n    [scene_1, scene_2, scene_3, scene_4]\n  color:\n    palette: coral\n  gestures:\n    pressed: &gt;\n      SCENE ${ring.scenes[me.Index]}\n    pressed__shift: &gt;\n      SCENE ${ring.scenes[me.Index + me.group_count]}\n    pressed__select: &gt;\n      SCENE SEL ${ring.scenes[me.Index]}\n    pressed__shift__select: &gt;\n      SCENE SEL ${ring.scenes[me.Index + me.group_count]}\n\n#scene_1:\n#  color: 127\n#  gestures:\n#    pressed: DUMMY\n\n#scene_2:\n#  color: 127\n#  gestures:\n#    pressed: DUMMY\n\n#scene_3:\n#  color: 127\n#  gestures:\n#    pressed: DUMMY\n\n#scene_4:\n#  color: 127\n#  gestures:\n#    pressed: DUMMY\n</code></pre> <p>The key <code>__scene_controls</code> is a group definition that includes <code>scene_1</code> through <code>scene_4</code>. To remove this group definition and define each control separately, first comment out (or delete) the group definition:</p> named_controls.yaml<pre><code>#__scene_controls:\n#  includes:\n#    [scene_1, scene_2, scene_3, scene_4]\n#  color:\n#    palette: coral\n#  gestures:\n#    pressed: &gt;\n#      SCENE ${ring.scenes[me.Index]}\n#    pressed__shift: &gt;\n#      SCENE ${ring.scenes[me.Index + me.group_count]}\n#    pressed__select: &gt;\n#      SCENE SEL ${ring.scenes[me.Index]}\n#    pressed__shift__select: &gt;\n#      SCENE SEL ${ring.scenes[me.Index + me.group_count]}\n</code></pre> <p>Under each group definition is a definition for each group member that has been commented out. Simply un-comment these definitions and start defining your controls.</p> named_controls.yaml<pre><code>scene_1:\n  color: 127\n  gestures:\n    pressed: DUMMY\n\nscene_2:\n  color: 127\n  gestures:\n    pressed: DUMMY\n\nscene_3:\n  color: 127\n  gestures:\n    pressed: DUMMY\n\nscene_4:\n  color: 127\n  gestures:\n    pressed: DUMMY\n</code></pre>"},{"location":"lessons/getting-started/editing-a-config/#defining-matrix-sections-and-pages","title":"defining matrix sections and pages","text":""},{"location":"lessons/getting-started/editing-a-config/#defining-the-sections","title":"defining the sections","text":"<p>Let's define a new matrix page with two sections. The first section will take up the top half of the matrix, and the second section the bottom half. This example assumes an 8x8 matrix.</p> matrix_sections.yaml<pre><code>#       0  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1\n#       1  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1\n#       2  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1\n#       3  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1\n#       4  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1\n#       5  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1\n#       6  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1\n#       7  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1\n#          0 1 2 3 4 5 6 7\n#\n\nblank_section:\n  row_start: 0\n  row_end: 7\n  col_start: 0\n  col_end: 7\n\n# ... more matrix sections\n</code></pre> <p>Looking at the graphic at the top of <code>matrix_sections.yaml</code>, we can see the top half starts spans from column 0 to 7, and from row 0 to 3. Let's make a new section called <code>example_top_half</code> with these boundaries.</p> matrix_sections.yaml<pre><code>example_top_half:\n  row_start: 0\n  row_end: 3\n  col_start: 0\n  col_end: 7\n\nblank_section:\n  row_start: 0\n  row_end: 7\n  col_start: 0\n  col_end: 7\n\n# ... more matrix sections\n</code></pre> <p>Now add <code>example_bottom_half</code>:</p> matrix_sections.yaml<pre><code>example_top_half:\n  row_start: 0\n  row_end: 3\n  col_start: 0\n  col_end: 7\n\nexample_bottom_half:\n  row_start: 4\n  row_end: 7\n  col_start: 0\n  col_end: 7\n</code></pre> <p>You will need to create the files <code>example_top_half.yaml</code> and <code>example_bottom_half.yaml</code> inside the <code>matrix_sections/</code> folder:</p> <pre><code>zcx/\n\u251c\u2500 _config/\n\u2502  \u251c\u2500 matrix_sections/\n\u2502  \u2502  \u251c\u2500 actions_top_left.yaml\n\u2502  \u2502  \u251c\u2500 actions_top_right.yaml\n\u2502  \u2502  \u251c\u2500 example_bottom_half.yaml\n\u2502  \u2502  \u251c\u2500 example_top_half.yaml\n\u2502  \u2502  \u251c\u2500 track_section.yaml\n\u2502  \u251c\u2500 matrix_sections.yaml/\n</code></pre> <p>As each section contains 32 controls, zcx will expect each section yaml file to be a list of 32 control definitions. Creating this list manually is quite tedious, so use the matrix skeleton generator to generate a skeleton 4 rows tall and 8 columns wide. After generating the config use the  in the output field to copy the yaml and paste it into your new yaml files.</p> matrix_sections/example_top_half.yaml<pre><code># !! row 1\n# col 1\n- \n  color: 95\n  type: standard\n  gestures:\n    released_immediately: DUMMY\n    pressed_delayed: DUMMY\n\n# col 2\n- \n  color: 51\n  type: standard\n  gestures:\n    released_immediately: DUMMY\n    pressed_delayed: DUMMY\n\n# col 3\n- \n  color: 71\n  type: standard\n  gestures:\n    released_immediately: DUMMY\n    pressed_delayed: DUMMY\n# and so on...\n</code></pre>"},{"location":"lessons/getting-started/editing-a-config/#placing-them-on-a-new-page","title":"placing them on a new page","text":"<p>We will place these new sections on a new page called <code>my_new_page</code>:</p> pages.yaml<pre><code>pages:\n  home_page:\n    - actions_left\n    - actions_right\n    - nav\n    - actions_small\n    - ring_tracks\n  session_view_page:\n    - select_control\n    - nav\n    - __session_view\n    - ring_tracks\n  blank_page:\n    - blank_section\n  my_new_page:\n    - example_top_half\n    - example_bottom half\n</code></pre> <p>In <code>pages.yaml</code>, add a new key to the object called <code>pages</code>. This key should be called <code>my_new_page</code>, and its value should be a list of each section that appears on this page.</p>"},{"location":"lessons/getting-started/editing-a-config/#adding-a-new-mode","title":"adding a new mode","text":""},{"location":"lessons/getting-started/editing-a-config/#defining-the-mode","title":"defining the mode","text":"<p>Adding a new mode is easy. First, add the name of your mode to the list in <code>modes.yaml</code>. We'll call this new mode <code>my_mode</code>.</p> modes.yaml<pre><code>- shift\n- select\n- my_mode\n</code></pre> <p>We probably want to assign a control to this mode so we can turn it on and off. In <code>named_controls.yaml</code>, create a new control definition. Each demo config will have at least a couple of commented out definitions, so we can use one of those:</p> named_controls.yaml<pre><code>#scales:\n#  gestures:\n#    pressed: DUMMY\n</code></pre> <p>Un-comment this definition. Change the <code>pressed</code> gesture so that it fires the <code>mode_on</code> command:</p> named_controls.yaml<pre><code>scales:\n  gestures:\n    pressed:\n      mode_on: my_mode\n</code></pre> <p>Now add a <code>released</code> gestures with the <code>mode_off</code> command:</p> named_controls.yaml<pre><code>scales:\n  gestures:\n    pressed:\n      mode_on: my_mode\n    released:\n      mode_off: my_mode\n</code></pre> <p>Now while the control <code>scales</code> is held, the mode <code>my_mode</code> is on.</p>"},{"location":"lessons/getting-started/editing-a-config/#defining-new-gestures","title":"defining new gestures","text":"<p>We now need to make a control respond to this gesture. Let's modify an existing control:</p> named_controls.yaml<pre><code>undo:\n  gestures:\n    pressed: UNDO\n    pressed__my_mode: REDO\n</code></pre> <p>Now when the control <code>undo</code> is pressed it will fire the action list <code>UNDO</code>, or <code>REDO</code> if <code>my_mode</code> is enabled.</p>"},{"location":"lessons/getting-started/installation/","title":"installing zcx","text":"<p>Installing zcx is super easy.</p>"},{"location":"lessons/getting-started/installation/#get-a-distribution","title":"get a distribution","text":"<p>A 'distribution' is what we call a finished release of a zcx script. It contains the 'core' of zcx, along with hardware-specific code that makes it work with your controller. </p> <p>Click here to see the latest release for all maintained hardware.</p> <p>Scroll to the bottom of that page and check the 'Assets' dropdown.</p>"},{"location":"lessons/getting-started/installation/#my-hardware-isnt-listed","title":"my hardware isn't listed","text":"<p>No problem. Have a look at the zcx-core discord server to see if there is a pre-release version available. There may be a distribution ready to go that just needs someone who actually owns the hardware to confirm it works. And if there isn't, feel free to put in a request for your hardware!</p> <p>Alternatively, it is relatively easy to create a 'port' of zcx for your controller. See the lesson for details.</p>"},{"location":"lessons/getting-started/installation/#install-the-script","title":"install the script","text":"<p>Each distribution comes as a .zip file. Unzip that file, and you'll see a folder with the same name. The directory structure looks like this:</p> <pre><code>_zcx_push_1.zip/\n\u251c\u2500 _zcx_push_1/\n\u2502  \u251c\u2500 _zcx_push_1/\n\u2502  \u2502  \u251c\u2500 _config/\n\u2502  \u2502  \u251c\u2500 __init__.py\n\u2502  \u2502  \u251c\u2500 some_python_file.py\n\u2502  \u2502  \u251c\u2500 etc...\n\u2502  \u251c\u2500 user_actions/\n</code></pre> <p>This highlighted folder is the 'root' folder of this zcx distro.  Simply drag this folder into your Live <code>Remote Scripts</code> directory.</p> <p>On macOS the default path is:</p> <p><code>'/Users/[username]/Music/Ableton/User Library/Remote Scripts'</code></p> <p>On Windows it's:</p> <p><code>\\Users\\[username]\\Documents\\Ableton\\User Library\\Remote Scripts</code></p> <p>You can rename the folder to whatever you like, and that's the name that shows up in Live's preferences. We include a leading underscore, because that should push it to the top of the control surface list. Feel free to remove it.</p>"},{"location":"lessons/getting-started/installation/#recommended-install-zcx-user-actions","title":"recommended: install zcx user actions","text":"<p>By installing the zcx user action, you can control zcx from ClyphX action lists. Drag the contents of the <code>user_actions</code> folder into your ClyphX Pro user actions folder, which should be in <code>User Library/Remote Scripts/_user_actions</code>.</p>"},{"location":"lessons/getting-started/installation/#activate-the-script","title":"activate the script","text":"<p>For our purposes, zcx functions like any other control surface script, so you should follow the Live manual's instructions for that.</p> <p>Note</p> <p>ClyphX Pro should always be in a higher slot than all zcx scripts. I reccomend installing ClyphX Pro in slot 1. It's ok if XT scripts (ClyphX Pro XTA-E) are below zcx scripts.</p> <p>When you assign the script to a slot in Live's preferences, the script automatically loads.</p> <p>You should set the MIDI in and out ports to the relevant hardware before assigning the script to a slot.</p> <p>For your controller's input, check the boxes <code>Track</code> and <code>Remote</code>, and for the output <code>Track</code>, <code>Sync</code> , and <code>Remote</code>.</p> <p>At this point, you may need to reload the script.</p>"},{"location":"lessons/getting-started/installation/#if-your-controller-has-a-distinct-user-mode","title":"if your controller has a distinct 'user mode'","text":"<p>Many controllers, such as the Push and Launchpad have a 'Live' mode and a 'user' mode. </p> <p>When setting up the Input and Output of the zcx script, you must use the 'user mode' port. For example, Push 1 has the MIDI inputs <code>Ableton Push (Live mode)</code> and <code>Ableton Push (User mode)</code> \u2014 use the latter. You are able to use the 'Live' and 'user' modes of your controller by switching between them with the dedicated hardware button, though the official control surface and the zcx script will each need their own control surface slot.</p> <p>For the Launchpad series, use the port <code>Launchpad X MIDI In</code> or similar, rather than the <code>DAW in</code> and <code>DAW out</code> ports.</p> <p>If you have officially supported hardware, zcx should automatically handle switching the controller's mode. If it doesn't, raise an issue.</p>"},{"location":"lessons/getting-started/installation/#explore","title":"explore!","text":"<p>Your zcx distribution comes with a carefully crafted demo config, put together by the maintainer for your hardware. It's designed to give a taste of zcx's capabilities out of the box, and be intuitive to edit. Once you're done with that, continue with this tutorial. :)</p>"},{"location":"lessons/getting-started/reading-zcx-configurations/","title":"reading zcx configurations","text":"<p>If you're coming from the X and G controls in ClyphX Pro, looking at the configuration files in your zcx folder may feel overwhelming. Don't stress \u2014 you don't need to have any sort of programming knowledge to get started with zcx! </p> <p>Having said that, zcx expects to receive its configuration files in a particular format, just as ClyphX does. It's important to understand this format, otherwise your zcx script may fail to load, or behave in undesirable ways.</p>"},{"location":"lessons/getting-started/reading-zcx-configurations/#x-controls-vs-zcontrols","title":"X-Controls vs ZControls","text":"<p>You'll already be familiar with X-Controls from ClyphX:</p> <pre><code>RECORD = CC, 1, 79, 5, 0, SRECFIX 8\n</code></pre> <p>ClyphX also has G-controls, which have more complex functionality, and need more detailed configuration:</p> <pre><code>RECORD = CC, 1, 79, 5, 0, FALSE\nRECORD PRESSED = SEL / ARM\nRECORD PRESSED_DELAYED = SRECFIX 8\n</code></pre> <p>To define this G-control in zcx, we'd write it like so:</p> <pre><code>record:\n  color: red\n  hold_color: off\n  repeat: false\n  gestures:\n    pressed: SEL / ARM\n    pressed_delayed: SRECFIX 8\n</code></pre> <p>At the same time, the above definition may look more complex, yet easier to read. Notice that your web browser is color coding certain words. This is because zcx makes heavy use of an existing format called YAML</p>"},{"location":"lessons/getting-started/reading-zcx-configurations/#yaml","title":"YAML","text":"<p>\"yam-il\"</p> <p>So what is yaml? Put simply, yaml is a format for organising data in a structured way, making it easy for humans to write, and easy for machines to understand. We'll explain the most important stuff you need to get started with zcx in a moment, but if you'd prefer to watch a video, this one does a great job of explaining the basics (watch until about 5:30).</p>"},{"location":"lessons/getting-started/reading-zcx-configurations/#keys-and-values","title":"keys and values","text":"<p><code>key: value</code></p> <p>Yaml works by associating keys with values. Take <code>color: green</code>. <code>color</code> is the key, and <code>green</code> is the value. We can imagine an X-Control in yaml like this:</p> <pre><code>control_name: record\nmessage_type: cc\nmidi_channel: 1\ncc_number: 79\non_color: 5\noff_color: 0\naction_list: SRECFIX 8\n</code></pre> <p>Instead of putting everything on one long line, separated by commas, we label the data with a key, and pair it with a value.</p> <p>When we have a collection of key-value pairs, we call it an object. You may also see it referred to as a dict, or dictionary. In this context, all these terms mean the same thing.</p>"},{"location":"lessons/getting-started/reading-zcx-configurations/#data-types","title":"data types","text":"<p>Yaml is capable of representing many different categories of data. With zcx, you'll only need a few:</p>"},{"location":"lessons/getting-started/reading-zcx-configurations/#numbers","title":"numbers","text":"<p><code>color: 127</code></p> <p>When you provide a number, it will usually be a whole number. In these docs you might see the term \"integer\" or \"int\" \u2014 this just means a whole number.</p> <p>Less commonly, you might provide decimal number values:</p> <p><code>midpoint: 55.3</code></p>"},{"location":"lessons/getting-started/reading-zcx-configurations/#strings","title":"strings","text":"<p><code>color: green</code></p> <p>The word \"string\" just means the data is some textual value.</p> <pre><code>my_control:\n  color: green\n  alias: my_cool_control\n  gestures:\n    pressed: METRO ON ; SEL / ARM ;\n</code></pre> <p>It might be a word, sentence, or a ClyphX Pro action list.</p>"},{"location":"lessons/getting-started/reading-zcx-configurations/#complex-strings","title":"complex strings","text":"<p>In many zcx configs, you will see a peculiar format:</p> <pre><code>pressed: &gt;\n  \"my cool track\" / SEL ; \"my cool track\" / ARM\n</code></pre> <p>This is still a string. When we have strings with special characters (like \"double-quotes\"), we need to format them differently or yaml will fail to process them. Here we have put a <code>&gt;</code> character after the key: <code>pressed: &gt;</code>, and put the value below, on its own line.</p> <p>You may also use this format:</p> <pre><code>pressed: '\"my cool track\" / SEL ; \"my cool track\" / ARM'\n</code></pre> <p>Here, we have wrapped the entire action list in 'single quotes', which achieves the same result.</p>"},{"location":"lessons/getting-started/reading-zcx-configurations/#booleans","title":"booleans","text":"<p><code>repeat: true</code></p> <p>Either <code>true</code> or <code>false</code>.</p>"},{"location":"lessons/getting-started/reading-zcx-configurations/#lists","title":"lists","text":"<p><code>includes: [scene_1, scene_2, scene_3, scene_4]</code></p> <p>A list of values.  Those values could be numbers, strings, objects, or even a mix of different data types.</p> <p>You may see lists formatted in a few different ways:</p> <p><pre><code>my_list: [scene_1, scene_2, scene_3, scene_4]\n</code></pre> <pre><code>my_list: [\n  scene_1, scene_2, scene_3, scene_4\n]\n</code></pre> <pre><code>my_list:\n  - scene_1\n  - scene_2\n  - scene_3\n  - scene_4\n</code></pre></p> <p>These three examples are functionally identical.</p>"},{"location":"lessons/getting-started/reading-zcx-configurations/#comments","title":"# comments","text":"<pre><code>octave_up:\n  # repeat: True\n  gestures:\n    pressed: METRO # I can write whatever I want here\n</code></pre> <p>When you see a  <code>#</code> on a line of yaml, anything to the right of that <code>#</code> will be totally ignored. If you put a <code>#</code> before the key, like with <code># repeat</code> above, this line essentially 'disappears' from your config when zcx loads it. So, not actually a data type, but important to know.</p>"},{"location":"lessons/getting-started/reading-zcx-configurations/#objects","title":"objects","text":"<p>We can also 'nest' yaml objects inside each other:</p> <pre><code>color:\n  pulse:\n    a: red\n    b: purple\n    speed: 1\n</code></pre> <p>You can identify a nested object by the indentation. Indentation means how much space there is on the left of the line.</p> <p>To demonstrate, here's the above object with <code>#</code>s where there should be spaces:</p> <pre><code>color:\n##pulse:\n####a: red\n####b: purple\n####speed: 1\n</code></pre> <p>In this example, the top-level object is <code>color</code>. <pre><code>color:\n  pulse:\n    a: red\n    b: purple\n    speed: 1\n</code></pre></p> <p><code>color</code> has one key-value pair, <code>pulse</code>. <pre><code>color:\n  pulse:\n    a: red\n    b: purple\n    speed: 1\n</code></pre></p> <p><code>pulse</code> is an object too, and it has three key-value pairs, <code>a: red</code>, <code>b: purple</code>, and <code>speed: 1</code>.</p> <pre><code>color:\n  pulse:\n    a: red\n    b: purple\n    speed: 1\n</code></pre>"},{"location":"lessons/getting-started/reading-zcx-configurations/#lists-of-objects","title":"lists of objects","text":"<p>You will often see lists of objects:</p> <pre><code>controls:\n  - color: red\n    repeat: true\n  - color: blue\n    repeat: false\n</code></pre> <p>This is a list of two objects. The first object has <code>color: red</code> and <code>repeat: true</code>. The second has <code>color: blue</code> and <code>repeat: false</code>.</p> <p>You may use different formatting to distinguish different items in the list:</p> <pre><code>controls:\n  - color: red\n    repeat: true\n\n  - color: blue\n    repeat: false\n</code></pre> <p>Or even:</p> <pre><code>controls:\n  -\n    color: red\n    repeat: true\n  -  \n    color: blue\n    repeat: false\n</code></pre>"},{"location":"lessons/getting-started/reading-zcx-configurations/#using-a-code-editor","title":"using a code editor","text":"<p>Yaml files are plain old text, which means you can read and edit them with any text editor, like Notepad or TextEdit.  However, it is highly recommended that you use a more sophisticated editor, such as Microsoft Visual Studio Code, which is free.  Using an editor like this will give you that groovy color coding you see above. The editor will also warn you when you make common yaml errors.</p>"},{"location":"lessons/getting-started/reading-zcx-configurations/#conclusion","title":"conclusion","text":"<p>Don't stress if this doesn't immediately 'click'.  Soon, you'll see a lot of examples of zcx definitions and configuration files, which will help to solidify these concepts!</p>"},{"location":"lessons/getting-started/zcx-concepts/","title":"zcx concepts","text":"<p>zcx uses a lot of jargon. Here is a quick guide to the most important concepts.</p>"},{"location":"lessons/getting-started/zcx-concepts/#zcontrols","title":"ZControls","text":"<p>Roughly equivalent to an X or G control from ClyphX Pro.  You define ZControls in your configuration files and when you press their associated button they trigger action lists or some other functionality.</p> <p>Terminology</p> <p>In this documentation, when we use the word \"button\" we are referring to the physical input on your MIDI controller. When we use the terms \"control\" or \"ZControl\", we are referring to the abstract concept. As one button is usually associated with several ZControls, this distinction will become important.</p>"},{"location":"lessons/getting-started/zcx-concepts/#control-definitions","title":"control definitions","text":"<pre><code>record:\n  color: red\n  gestures:\n    pressed: SRECFIX 8\n</code></pre> <p>A control definition is a yaml object provided by you that describes how a control should behave. Most control definitions will have the keys <code>color</code> and <code>gestures</code>.</p>"},{"location":"lessons/getting-started/zcx-concepts/#gestures","title":"gestures","text":"<p>Gestures are physical actions you can perform on a button, which will in turn trigger a command on a ZControl.  There are six gestures supported by zcx:</p> <ul> <li>pressed always fired immediately after a control is pressed</li> <li>pressed_delayed fires after the control is held for a short time</li> <li>released always fired immediately after a control is released</li> <li>released_delayed fired after a held control is released \u2014 will only fire after a <code>pressed_delayed</code> event</li> <li>released_immediately fired after a control that was not being held is released</li> <li>double_clicked fired after a control is pressed twice in quick succession</li> </ul>"},{"location":"lessons/getting-started/zcx-concepts/#commands","title":"commands","text":"<p>Commands fire in response to gestures, and are usually a ClyphX Pro action list:</p> <pre><code>gestures:\n  pressed: DEV(SEL) ON\n  released: DEV(SEL) OFF\n</code></pre> <p>Here, the gesture is the key, and the command is the value.</p>"},{"location":"lessons/getting-started/zcx-concepts/#modes","title":"modes","text":"<p>Any control can be assigned as a modifier or 'mode' control. A mode is just a keyword that can be on or off. You can configure your other controls to behave differently depending on whether the mode is active or not.</p> <pre><code>shift:\n  gestures:\n    pressed:\n      mode_on: shift\n    released:\n      mode_off: shift\n</code></pre> <p>Above we see a control called <code>shift</code>. It responds to the gestures <code>pressed</code> and <code>released</code>. These gestures fire the <code>mode_on</code> and <code>mode_off</code> commands respectively. The value for these commands is also <code>shift</code>.</p> <p>So, whenever the control <code>shift</code> is held down, the mode <code>shift</code> is on.</p> <pre><code>record:\n  gestures:\n    pressed: SRECFIX 8\n    pressed__shift: SRECFIX 16\n</code></pre> <p>This <code>record</code> control has the <code>pressed</code> and <code>pressed__shift</code> gesture. As you may have guessed, this control will fire the action list <code>SRECFIX 8</code> when pressed, unless the <code>shift</code> mode is active, in which case it does <code>SRECFIX 16</code>.</p> <p>You can even require multiple modes for particular functionality:</p> <pre><code>record:\n  gestures:\n    pressed__shift__select: SRECFIX 32\n</code></pre> <p>The names of these modes are completely arbitrary, but they must be defined in your <code>modes.yaml</code> file.</p> modes.yaml<pre><code>- shift\n- select\n- drums\n</code></pre>"},{"location":"lessons/getting-started/zcx-concepts/#named-controls-and-matrix-controls","title":"named controls and matrix controls","text":"<p>Although MIDI controllers come in all shapes and sizes, zcx is focused on controllers with a 'matrix' or grid of pads or buttons, such as the Ableton Push, Novation Launchpad, Akai APC, and  others like them.  Because of this, zcx makes a distinction between controls that form the matrix, and those that don't.</p>"},{"location":"lessons/getting-started/zcx-concepts/#named-controls","title":"named controls","text":"<p>These controls exist outside of the matrix.  They can be given a simple name, and we can refer to them by that name throughout our configuration.  Often, the control's name will be printed on the control.</p> <pre><code>record:\n  color: red\n  gestures:\n    pressed: SRECFIX 8\n</code></pre> <p>All named controls are defined in one place, <code>named_controls.yaml</code>:</p> <pre><code>zcx/\n\u251c\u2500 _config/\n\u2502  \u251c\u2500 named_controls.yaml\n</code></pre> <p>Note</p> <p>The names used in <code>named_controls.yaml</code> and <code>encoders.yaml</code> have already been mapped to MIDI messages sent by your hardware.</p> <p>To check the names of each control, see the Hardware Reference</p>"},{"location":"lessons/getting-started/zcx-concepts/#matrix-controls","title":"matrix controls","text":"<p>And obviously, these controls exist within the matrix.  In our configuration we don't define them by name or coordinate, but by position within their containing <code>section</code>.</p>"},{"location":"lessons/getting-started/zcx-concepts/#matrix-sections","title":"matrix sections","text":"<p>A matrix section is a logical segment of the matrix, defined by row and column.  These sections you define can be any size.</p> matrix_sections.yaml<pre><code>#       0  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1  \n#       1  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1  \n#       2  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1  \n#       3  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1  \n#       4  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1  \n#       5  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1  \n#       6  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1  \n#       7  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1  \n#          0 1 2 3 4 5 6 7  \n#\n\nactions_top_left:   #   0 1 2 3\n  col_start: 0      # 0 \u25a1 \u25a1 \u25a1 \u25a1\n  col_end: 3        # 1 \u25a1 \u25a1 \u25a1 \u25a1\n  row_start: 0      # 2 \u25a1 \u25a1 \u25a1 \u25a1\n  row_end: 3        # 3 \u25a1 \u25a1 \u25a1 \u25a1\n\nactions_top_right:  \n  col_start: 4  \n  col_end: 7  \n  row_start: 0  \n  row_end: 3\n\ntrack_section:\n  col_start: 0\n  col_end: 7\n  row_start: 4\n  row_end: 7\n</code></pre> <p>The dimensions or bounds of the matrix are defined in <code>_config/matrix_sections.yaml</code>.  However, each section then needs its own config file in <code>_config/matrix_sections/&lt;section name&gt;.yaml</code>.</p> <p>So, looking at the above config, your config directory would have these files:</p> <pre><code>zcx/\n\u251c\u2500 _config/\n\u2502  \u251c\u2500 matrix_sections/\n\u2502  \u2502  \u251c\u2500 actions_top_left.yaml\n\u2502  \u2502  \u251c\u2500 actions_top_right.yaml\n\u2502  \u2502  \u251c\u2500 track_section.yaml\n\u2502  \u251c\u2500 matrix_sections.yaml/\n</code></pre> <p>And in each of those files you define a list, containing a definition for every pad that belongs to that section:</p> actions_top_left.yaml<pre><code># row 1\n# col 1\n- color: red\n  gestures:\n    pressed: METRO\n# col 2\n- color: blue\n  gestures:\n    pressed: SETPLAY\n...\n</code></pre> <p>Skeleton sections</p> <p>The demo config that comes with zcx features several mostly-empty sections that are great for getting started, as they have a minimal control definition with helpful comments denoting the row and column of each control.</p> <p>Later, you may want to use the generator to create your own skeletons of custom size.</p>"},{"location":"lessons/getting-started/zcx-concepts/#pages","title":"pages","text":"<p>So matrix controls are contained within matrix sections, but there's one more layer: sections are contained within pages:</p> pages.yaml<pre><code>pages:\n  main_page:\n    - actions_top_left\n    - actions_top_right\n    - actions_bottom_double\n  alt_page:\n    - actions_top_left\n    - actions_bottom_right\n    - actions_bottom_left\n    - actions_top_right\n  ring_page:\n    - ring_control\n  blank_page:\n    - blank_section\n</code></pre> <p>The pages system means that you can change your matrix controls entirely depending on the context. By assigning controls to sections, and not directly to pages, we can have one section appear on multiple pages, or even on all of them, without defining the same control every time.</p> <p>Matrix sections are always bound to their defined coordinates, which means while they can appear on multiple pages, they'll always be in the same place.</p>"},{"location":"lessons/getting-started/zcx-concepts/#intersecting-sections","title":"intersecting sections","text":"<p>By default, we can't have two sections that intersect, i.e share one or more of the same coordinates.</p> <p>matrix_sections.yaml<pre><code>big_section:\n  col_start: 0\n  col_end: 7\n  row_start: 0\n  row_end: 7\n\ntiny_section:\n  col_start: 0\n  col_end: 7\n  row_start: 0\n  row_end: 0\n</code></pre> pages.yaml<pre><code>my_page:\n  - big_section\n  - tiny_section    # not gonna fit :(\n</code></pre></p> <p><code>big_section</code> and <code>tiny_row</code> are both reserving the first row of the matrix on the page <code>my_page</code>. In this situation, zcx will throw an error on startup.</p> <p>You can learn how to intentionally intersect sections in this lesson.</p>"},{"location":"lessons/getting-started/zcx-concepts/#overlays","title":"overlays","text":"<p>Only matrix controls are affected by page changes; named controls will behave the same way regardless of the current page. We can define multiple named controls associated with the same button by using an overlay.</p> <p>In the next lesson, you will learn about any overlays that come with the zcx demo config, or you can skip ahead to the overlay lesson.</p>"},{"location":"lessons/getting-started/zcx-concepts/#encoder-mappings","title":"encoder mappings","text":"<p>zcx allows you to dynamically map encoders (knobs, faders, etc.) to parameters in Live.  Targeting of parameters follows the same syntax as ClyphX Pro encoder bindings:</p> encoders.yaml<pre><code>tempo:\n  binding: SEL / VOL\n</code></pre> <p>Encoders are also mode-aware: <pre><code>tempo:\n  binding:\n    default: SEL / VOL\n    __shift: SEL / PAN\n</code></pre></p> <p>You can read more about encoder mappings in the Encoder Reference</p>"},{"location":"lessons/getting-started/zcx-concepts/#dynamic-controls","title":"dynamic controls","text":"<p>The most common type of control you'll use is the standard ZControl.  There are also special classes of control that offer extra functionality, usually in the LED feedback they provide.</p> <p>One class of control is the page control,  which is bound to a page you specify. It shows one color when its bound page is in view, and another when it isn't.  Another is the param control, which binds to almost any parameter in Live, indicating its status.</p> <p>See the Control Reference to learn more about the different control types.</p>"},{"location":"lessons/getting-started/zcx-concepts/#templating","title":"templating","text":"<p>zcx features a powerful templating system that allows you to configure multiple controls at a time. By using this system, you can make a change in one place and have it affect any number of controls, saving you time when creating and, later, updating your config.</p> <p>Here is an example of the templating system:</p> named_controls.yaml<pre><code>__scene_buttons:\n  includes: [scene_1, scene_2, scene_3, scene_4]\n  gestures:\n    pressed: SCENE ${me.Index}\n</code></pre> <p>This is a group definition. We have grouped the buttons <code>scene_1</code> through <code>scene_4</code> under the <code>includes</code> key to apply a common definition to them. There is one gesture defined, <code>pressed</code>, with the command (action list) <code>SCENE ${me.Index}</code>.</p> <p>The <code>${me.Index}</code> is new syntax called a template string. Behind the scenes, zcx will evaluate these strings so that the controls fire <code>SCENE 1</code> through <code>SCENE 4</code>.</p> <p>The benefits of this system become apparent when we want to extend the control:</p> named_controls.yaml<pre><code>__scene_buttons:\n  includes: [scene_1, scene_2, scene_3, scene_4]\n  gestures:\n    pressed: SCENE ${me.Index}\n    pressed__select: SCENE SEL ${me.Index}\n</code></pre> <p>With just one line of yaml we have extended the definition for all four controls in the group.</p>"},{"location":"lessons/getting-started/zcx-concepts/#going-further-with-templating","title":"going further with templating","text":"<p>The purpose of this section is to provide a brief overview of template strings. If you have explored the zcx demo config in your code editor, you would have seen many examples of them, so it's important to have some idea what you're looking at.</p> <p>After finishing this \"Getting Started\" tutorial, you might want to check out the Template Reference for a deeper understanding of the templating system.</p>"},{"location":"lessons/getting-started/demo-tour/","title":"Demo tour","text":"<p>Now that you're familiar with the most important zcx concepts, it's time to take a guided tour for the demo configuration for your hardware.</p> <p>Each demo config comes with some pages and several matrix sections. You will also find several examples of the templating system as well as some dynamic controls. </p> <p>Several of the matrix sections will be blank or mostly blank, and some named controls will be left undefined. The idea is to give you a starting point, so you can start assigning action lists to controls right away, without having to manually set up matrix sections and pages.</p> <p>Tip</p> <p>If you'd prefer to start with an even simpler config, check out the blank config that came with your download.</p>"},{"location":"lessons/getting-started/demo-tour/#choose-your-hardware","title":"Choose your hardware","text":"<p>If you are on desktop, select your hardware from the navigation on the left to begin the tour.</p> <p>If you are using a smaller screen, press the  icon in the top-left of the screen to expand this section and see the articles within.</p>"},{"location":"lessons/getting-started/demo-tour/launchpad-x-mini-mk3/","title":"Launchpad X / Launchpad mini mk3","text":""},{"location":"lessons/getting-started/demo-tour/launchpad-x-mini-mk3/#overview","title":"Overview","text":""},{"location":"lessons/getting-started/demo-tour/launchpad-x-mini-mk3/#modes","title":"Modes","text":"<p>This config comes with two modes (<code>shift</code> and <code>select</code>) pre-configured. <code>select</code> is mapped to the 7th scene launch button, and <code>shift</code> to the 8th.</p>"},{"location":"lessons/getting-started/demo-tour/launchpad-x-mini-mk3/#pages","title":"Pages","text":"<p>This config comes with three pages pre-configured. By looking at <code>pages.yaml</code>, we can see these pages are named <code>home_page</code>, <code>session_view_page</code>, and <code>blank_page</code>.</p> <p>The three buttons in the top-right are pre-mapped to these pages. On Launchpad mini these are the buttons labelled <code>Drums</code>, <code>Keys</code>, and <code>User</code>, while on Launchpad X it's <code>Note</code>, <code>Custom</code>, and <code>Capture MIDI</code>.</p>"},{"location":"lessons/getting-started/demo-tour/launchpad-x-mini-mk3/#named-controls","title":"Named controls","text":"<p>The four arrow buttons in the top-left control Live's session ring. By holding <code>shift</code> while pressing these buttons, we can move the ring one step at a time.</p> <p>The four top scene launch buttons will launch the four scenes highlighted by the session ring. By holding <code>shift</code>, we can launch four more scenes. By holding <code>select</code>, we can select scenes rather than launch them. By holding both, we can select the extra scenes.</p> <p>By holding the button labelled <code>Session</code>, we can enter the Launchpad's factory script (Live mode), provided that script is also selected as a control surface in Live's preferences.</p>"},{"location":"lessons/getting-started/demo-tour/launchpad-x-mini-mk3/#matrix-pages","title":"Matrix pages","text":""},{"location":"lessons/getting-started/demo-tour/launchpad-x-mini-mk3/#home_page","title":"home_page","text":""},{"location":"lessons/getting-started/demo-tour/launchpad-x-mini-mk3/#actions","title":"actions","text":"<p>Enter the first page by pressing <code>Drums</code> or <code>Note</code>. The top-left quadrant is the section <code>actions_left</code>. Opposite <code>actions_left</code> is <code>actions_right</code>. In the bottom-left corner we have <code>actions_small</code>.</p> <p>These three sections have been left mostly unconfigured.</p>"},{"location":"lessons/getting-started/demo-tour/launchpad-x-mini-mk3/#ring_tracks","title":"ring_tracks","text":"<p>The fifth row of pads is the matrix section <code>ring_tracks</code>. It's filled with ring_track controls that bind to the tracks highlighted by the session ring. By pressing each control, we can select its bound track. By holding the control, we can arm the track exclusively (un-arm all other tracks). By holding the control with <code>shift</code>, we can arm the track non-exclusively.</p>"},{"location":"lessons/getting-started/demo-tour/launchpad-x-mini-mk3/#nav","title":"nav","text":"<p>The bottom right corner has the section <code>nav</code>. The d-pad will move around the Live set. By holding <code>shift</code> while using the d-pad we can move the session ring.</p> <p>There are also four transport controls. The green and red are bound to the transport's play and session record, while the purple and blue are bound to the metronome and arrangement loop.</p>"},{"location":"lessons/getting-started/demo-tour/launchpad-x-mini-mk3/#session_view_page","title":"session_view_page","text":"<p>Enter the second page by pressing <code>Keys</code> or <code>Custom</code>.</p> <p>In the bottom right, we still have <code>nav</code>. This demonstrates how we can have sections appear on multiple pages.</p>"},{"location":"lessons/getting-started/demo-tour/launchpad-x-mini-mk3/#__session_view","title":"__session_view","text":"<p>The top half is occupied by zcx's session view. This works much the same as the Launchpad's native session view. Pressing a pad will launch the respective clip slot. Pressing a pad with <code>select</code> held will select the slot. See the session view lesson for more detail on configuring this section.</p>"},{"location":"lessons/getting-started/demo-tour/launchpad-x-mini-mk3/#select_control","title":"select_control","text":"<p>In the bottom-left is the section <code>select_control</code>. It's full of param controls that show dynamic feedback. In this case, every control is mapped to the currently selected track. The top row controls the track's mute, solo, arm, and input monitoring state.</p> <p>The second row is mapped to the first four devices on the selected track. If the track has less than four devices, you will see that one or more controls are off. Note that these controls are configured for top-level devices, i.e. not devices nested in racks. By pressing a control, we can select the corresponding device. By holding <code>shift</code>, these controls map to the bypass state of the devices.</p> <p>The third row is mapped to the first four parameters of the currently selected device. Pressing a control will toggle its parameter between its minimum and maximum. While <code>shift</code> is held, the next four parameters will be controlled.</p>"},{"location":"lessons/getting-started/demo-tour/launchpad-x-mini-mk3/#blank_page","title":"blank_page","text":"<p>This page contains one section \u2014 <code>blank_section</code> \u2014 an 8x8 unconfigured grid. It's a great place to start experimenting with zcx's capabilities.</p>"},{"location":"lessons/getting-started/demo-tour/push-1/","title":"Push 1","text":""},{"location":"lessons/getting-started/demo-tour/push-1/#overview","title":"Overview","text":""},{"location":"lessons/getting-started/demo-tour/push-1/#modes","title":"Modes","text":"<p>This config comes with six modes pre-configured. These modes are <code>shift</code>, <code>select</code>, <code>delete</code>, <code>track</code>, <code>device</code>, and <code>sends</code> They are all mapped to controls of the same name (<code>sends</code> is mapped to the control <code>pan_send</code>).</p> <p>Three of these modes, <code>track</code>, <code>device</code>, and <code>sends</code> are set up exclusively, so that enabling one will disable the other two. The <code>volume</code> control will disable all three on a press. A short press will enable the mode indefinitely, while a hold will enable the mode only until the control is released.</p> <p><code>shift</code> and <code>select</code> will only be active while they are held.</p>"},{"location":"lessons/getting-started/demo-tour/push-1/#pages","title":"Pages","text":"<p>This config comes with five pages pre-configured. By looking at <code>pages.yaml</code>, we can see these pages are named <code>home_page</code>, <code>alt_page</code>, <code>session_view_page</code>, <code>ring_devices_page</code>, and <code>blank_page</code>. Push's eight <code>state</code> buttons have been configured as a group. They are the five multicolor buttons below the display, and they will take you to a different page on a press.</p> <p>As three buttons are unassigned, if you add a new page it will automatically be assigned to one of the free buttons.</p>"},{"location":"lessons/getting-started/demo-tour/push-1/#named-controls","title":"Named controls","text":"<p>Push's eight <code>select</code> buttons have been configured as a group. They are param controls, bound to the selection state of the eight tracks in view of the session ring. Pressing one will select the relevant track, and the button will become brighter to indicate that. Holding one of these buttons will arm the track. Holding a button while holding <code>delete</code> will delete the track.</p> <p>Three transport controls are configured, for the controls <code>play</code>, <code>record</code>, and <code>metronome</code>. These controls will indicate the status of the relevant transport function. On a short press, <code>record</code> will fire the action list <code>SRECFIX</code>, starting Live's session record. On a long press, it will fire <code>SRECFIX 8</code>, starting session record for a fixed length of 8 bars.</p> <p>Push's eight <code>scene</code> buttons have been configured as a group. Pressing a scene button will launch the scene at that position of the session ring. Pushing a scene button while holding <code>shift</code> will launch scenes below the ring. Pushing a scene button while holding <code>select</code> will select the scene, but not launch it. Pushing a scene button with both <code>shift</code> and <code>select</code> will select scenes below the ring.</p> <p>The <code>undo</code> control trigger's Live's undo feature.</p> <p>The <code>duplicate</code> control duplicates the selected scene.</p> <p>The <code>new</code> control inserts a new scene.</p> <p><code>master</code> is another param control, bound to the selection status of the Main track. <code>stop</code>, also a param control, is bound to the target <code>SEL / STOP</code>, and will be brighter when the selected track is playing (and can thus be stopped).</p> <p>The controls <code>in</code> and <code>out</code> are found to the right of <code>master</code> and are marked with the \u21aa and \u21a9 symbols. Pressing these controls will move the session ring across by eight tracks. When the mode <code>device</code> is active, these controls will move left and right through the devices on the selected track. When <code>device</code> and <code>shift</code> are active, these controls select the leftmost or rightmost device.</p> <p><code>mute</code> and <code>solo</code> are both param controls, mapped to the functions you'd expect.</p> <p>The controls <code>note</code> and <code>session</code> will enable Live's clip view and device view respectively.</p> <p>The D-pad will move throughout the Live set. If <code>shift</code> is held, the D-pad will move the session ring one step at a time.</p>"},{"location":"lessons/getting-started/demo-tour/push-1/#matrix-pages","title":"Matrix pages","text":""},{"location":"lessons/getting-started/demo-tour/push-1/#home_page","title":"home_page","text":""},{"location":"lessons/getting-started/demo-tour/push-1/#actions","title":"actions","text":"<p>Enter the first page by pressing the first <code>state</code> button. The top-left quadrant is the section <code>actions_top_left</code>. Opposite <code>actions_top_left</code> is <code>actions_top_right</code>. Taking up the bottom half of the matrix is <code>actions_bottom_double</code>.</p> <p>These three sections have been left mostly unconfigured. <code>actions_bottom_double</code> uses a section template to apply the rainbow colors without defining a color for each pad.</p>"},{"location":"lessons/getting-started/demo-tour/push-1/#alt_page","title":"alt_page","text":"<p>The top half of the matrix still features <code>actions_top_left</code> and <code>actions_top_right</code>.  This demonstrates how we can have sections appear on multiple pages.</p>"},{"location":"lessons/getting-started/demo-tour/push-1/#select_control","title":"select_control","text":"<p>In the bottom-left is the section <code>select_control</code>. It's full of param controls that show dynamic feedback. In this case, every control is mapped to the currently selected track. The top row controls the track's mute, solo, arm, and input monitoring state.</p> <p>The second row is mapped to the first four devices on the selected track. If the track has less than four devices, you will see that one or more controls are off. Note that these controls are configured for top-level devices, i.e. not devices nested in racks. By pressing a control, we can select the corresponding device. By holding <code>shift</code>, these controls map to the bypass state of the devices.</p> <p>The third and fourth rows are mapped to the first eight parameters of the currently selected device. Pressing a control will toggle its parameter between its minimum and maximum. While <code>shift</code> is held, the next eight parameters will be controlled.</p>"},{"location":"lessons/getting-started/demo-tour/push-1/#track_control","title":"track_control","text":"<p>In the bottom-right is the section <code>track_control</code>. It features 16 ring_track controls that are bound to tracks rightward of the session ring. These dynamic controls give feedback about the playing, arm, and selection state of their bound track. A short press will select the track, and a long press will arm it. If your Live set has less than 24 tracks, one or more of these controls might appear off.</p>"},{"location":"lessons/getting-started/demo-tour/push-1/#session_view_page","title":"session_view_page","text":""},{"location":"lessons/getting-started/demo-tour/push-1/#__session_view","title":"__session_view","text":"<p>The top six rows are occupied by zcx's session view. This works much the same as the Push's native session view. Pressing a pad will launch the respective clip slot. Pressing a pad with <code>select</code> held will select the slot. Pressing a pad with <code>delete</code> held will delete the clip in that slot. See the session view lesson for more detail on configuring this section.</p>"},{"location":"lessons/getting-started/demo-tour/push-1/#session_controls","title":"session_controls","text":"<p>The bottom two rows feature the section <code>session_controls</code>. They are param controls bound to the eight tracks contained in the session ring. The top row is bound to those track's mute status, the bottom row to their solo status.</p>"},{"location":"lessons/getting-started/demo-tour/push-1/#ring_devices_page","title":"ring_devices_page","text":"<p>This page features only one section <code>ring_devices</code>, which fills the whole page. Again, this section deals with the eight ring tracks. Each column has eight param controls to affect the first eight parameters of the first device of the relevant track. Press a pad to toggle the parameter between its minimum and maximum. Release a pad after a hold to toggle the parameter again.</p>"},{"location":"lessons/getting-started/demo-tour/push-1/#blank_page","title":"blank_page","text":"<p>This page contains one section \u2014 <code>blank_section</code> \u2014 an 8x8 unconfigured grid. It's a great place to start experimenting with zcx's capabilities.</p>"},{"location":"lessons/getting-started/demo-tour/push-1/#encoders","title":"Encoders","text":"<p>Push's eight main encoders \u2014 the ones above the display \u2014 are configured as a group. By default, they control the volume of the eight ring tracks. With <code>shift</code> active, they control the pan of those tracks.</p> <p>With the mode <code>sends</code> active, they control the first eight sends of the selected track. With the mode <code>device</code> active, they control the first eight parameters of the selected device. With both <code>device</code> and <code>shift</code> active, they control the next eight parameters.</p> <p>The mode <code>track</code> offers a compromise between these modes. <code>enc_1</code> and <code>enc_2</code> control volume and pan of the selected track. <code>enc_3</code> and <code>enc_4</code> control the first two sends. <code>enc_5</code> through <code>enc_8</code> control the first four parameters of the selected device. By holding <code>shift</code> we can control the next two sends and the next four device parameters.</p> <p><code>enc_master</code> (to the right of <code>enc_8</code>) controls the Main track's volume. With <code>shift</code> held it controls the cue volume.</p> <p><code>enc_tempo</code>, the leftmost encoder, always controls the selected track's pan. <code>enc_swing</code>, to its right, controls the selected track's volume.</p>"},{"location":"lessons/getting-started/demo-tour/push-2/","title":"Push 2","text":""},{"location":"lessons/getting-started/demo-tour/push-2/#overview","title":"Overview","text":""},{"location":"lessons/getting-started/demo-tour/push-2/#modes","title":"Modes","text":"<p>This config comes with four modes pre-configured. These modes are <code>shift</code>, <code>select</code>, <code>device</code>, and <code>delete</code> They are all mapped to controls of the same name.</p>"},{"location":"lessons/getting-started/demo-tour/push-2/#pages","title":"Pages","text":"<p>This config comes with five pages pre-configured. By looking at <code>pages.yaml</code>, we can see these pages are named <code>home_page</code>, <code>alt_page</code>, <code>session_view_page</code>, <code>ring_devices_page</code>, and <code>blank_page</code>. Push's eight <code>state</code> buttons have been configured as a group. They are the multicolor buttons above the display, and they will take you to a different page on a press.</p> <p>As three buttons are unassigned, if you add a new page it will automatically be assigned to one of the free buttons.</p>"},{"location":"lessons/getting-started/demo-tour/push-2/#named-controls","title":"Named controls","text":"<p>Push's eight <code>select</code> buttons have been configured as a group. They are the buttons below the display. They are ring_track controls, bound to the eight tracks in view of the session ring. Pressing one will select the relevant track. Holding one of these buttons will arm the track. Double clicking a button will fire the next clip for that track. Holding a button while holding <code>delete</code> will delete the track.</p> <p>Three transport controls are configured, for the controls <code>play</code>, <code>record</code>, and <code>metronome</code>. These controls will indicate the status of the relevant transport function. On a short press, <code>record</code> will fire the action list <code>SRECFIX</code>, starting Live's session record. On a long press, it will fire <code>SRECFIX 8</code>, starting session record for a fixed length of 8 bars.</p> <p>Push's eight <code>scene</code> buttons have been configured as a group. Pressing a scene button will launch the scene at that position of the session ring. Pushing a scene button while holding <code>shift</code> will launch scenes below the ring. Pushing a scene button while holding <code>select</code> will select the scene, but not launch it. Pushing a scene button with both <code>shift</code> and <code>select</code> will select scenes below the ring.</p> <p>The <code>undo</code> control trigger's Live's undo feature.</p> <p><code>mute</code> and <code>solo</code> are param controls, mapped to the functions you'd expect. <code>stop_clip</code>, also a param control, is bound to the target <code>SEL / STOP</code>, and will be brighter when the selected track is playing (and can thus be stopped).</p> <p>The <code>duplicate</code> control duplicates the selected scene.</p> <p>The <code>new</code> control inserts a new scene.</p> <p><code>master</code> is another param control, bound to the selection status of the Main track.</p> <p>The controls <code>note</code> and <code>session</code> will enable Live's clip view and device view respectively.</p> <p>The upper D-pad will move throughout the Live set. If <code>shift</code> is held, the D-pad will move the session ring one step at a time.</p> <p>The lower D-pad, made up of <code>octave_up</code>, <code>octave_down</code>, <code>page_prev</code>, and <code>page_next</code> move the ring eight steps at a time. If <code>shift</code> is held, the ring will move one step at a time,</p>"},{"location":"lessons/getting-started/demo-tour/push-2/#matrix-pages","title":"Matrix pages","text":""},{"location":"lessons/getting-started/demo-tour/push-2/#home_page","title":"home_page","text":""},{"location":"lessons/getting-started/demo-tour/push-2/#actions","title":"actions","text":"<p>Enter the first page by pressing the first <code>state</code> button. The top-left quadrant is the section <code>actions_top_left</code>. Opposite <code>actions_top_left</code> is <code>actions_top_right</code>. Taking up the bottom half of the matrix is <code>actions_bottom_double</code>.</p> <p>These three sections have been left mostly unconfigured. <code>actions_bottom_double</code> uses a section template to apply the rainbow colors without defining a color for each pad.</p>"},{"location":"lessons/getting-started/demo-tour/push-2/#alt_page","title":"alt_page","text":"<p>The top half of the matrix still features <code>actions_top_left</code> and <code>actions_top_right</code>.  This demonstrates how we can have sections appear on multiple pages.</p>"},{"location":"lessons/getting-started/demo-tour/push-2/#select_control","title":"select_control","text":"<p>In the bottom-left is the section <code>select_control</code>. It's full of param controls that show dynamic feedback. In this case, every control is mapped to the currently selected track. The top row controls the track's mute, solo, arm, and input monitoring state.</p> <p>The second row is mapped to the first four devices on the selected track. If the track has less than four devices, you will see that one or more controls are off. Note that these controls are configured for top-level devices, i.e. not devices nested in racks. By pressing a control, we can select the corresponding device. By holding <code>shift</code>, these controls map to the bypass state of the devices.</p> <p>The third and fourth rows are mapped to the first eight parameters of the currently selected device. Pressing a control will toggle its parameter between its minimum and maximum. While <code>shift</code> is held, the next eight parameters will be controlled.</p>"},{"location":"lessons/getting-started/demo-tour/push-2/#track_control","title":"track_control","text":"<p>In the bottom-right is the section <code>track_control</code>. It features 16 ring_track controls that are bound to tracks rightward of the session ring. These dynamic controls give feedback about the playing, arm, and selection state of their bound track. A short press will select the track, and a long press will arm it. If your Live set has less than 24 tracks, one or more of these controls might appear off.</p>"},{"location":"lessons/getting-started/demo-tour/push-2/#session_view_page","title":"session_view_page","text":""},{"location":"lessons/getting-started/demo-tour/push-2/#__session_view","title":"__session_view","text":"<p>The top six rows are occupied by zcx's session view. This works much the same as the Push's native session view. Pressing a pad will launch the respective clip slot. Pressing a pad with <code>select</code> held will select the slot. Pressing a pad with <code>delete</code> held will delete the clip in that slot. See the session view lesson for more detail on configuring this section.</p>"},{"location":"lessons/getting-started/demo-tour/push-2/#session_controls","title":"session_controls","text":"<p>The bottom two rows feature the section <code>session_controls</code>. They are param controls bound to the eight tracks contained in the session ring. The top row is bound to those track's mute status, the bottom row to their solo status.</p>"},{"location":"lessons/getting-started/demo-tour/push-2/#ring_devices_page","title":"ring_devices_page","text":"<p>This page features only one section <code>ring_devices</code>, which fills the whole page. Again, this section deals with the eight ring tracks. Each column has eight param controls to affect the first eight parameters of the first device of the relevant track. Press a pad to toggle the parameter between its minimum and maximum. Release a pad after a hold to toggle the parameter again.</p>"},{"location":"lessons/getting-started/demo-tour/push-2/#blank_page","title":"blank_page","text":"<p>This page contains one section \u2014 <code>blank_section</code> \u2014 an 8x8 unconfigured grid. It's a great place to start experimenting with zcx's capabilities.</p>"},{"location":"lessons/getting-started/demo-tour/push-2/#encoders","title":"Encoders","text":"<p>Push's eight main encoders \u2014 the ones above the display \u2014 are configured as a group. By default, they control the volume of the eight ring tracks. With <code>shift</code> active, they control the pan of those tracks.</p> <p>With the mode <code>device</code> active, they control the first eight parameters of the selected device. With both <code>device</code> and <code>shift</code> active, they control the next eight parameters.</p> <p><code>enc_master</code> (to the right of <code>enc_8</code>) controls the Main track's volume. With <code>shift</code> held it controls the cue volume.</p> <p><code>enc_tempo</code>, the leftmost encoder, always controls the selected track's pan. <code>enc_swing</code>, to its right, controls the selected track's volume.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/","title":"TouchOSC","text":"<p>This lesson assumes basic familiarity with TouchOSC, and that TouchOSC is installed with working MIDI and OSC connections between the computer running Live and the device running TouchOSC.</p> <p>Refer to the TouchOSC manual if needed.</p> <p>Note</p> <p>This tour is specifically for the pre-configured zcx release called <code>touch_osc</code> and its accompanying TouchOSC layout <code>zcx_touch_osc.tosc</code>. For details on creating a zcx configuration for your own TouchOSC layout, see the lesson.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#additional-setup","title":"Additional setup","text":"<p>\"TouchOSC host\" refers to the device which is running the TouchOSC app.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#install-the-tosc-file","title":"Install the .tosc file","text":"<p>You will find the file <code>zcx_touch_osc.tosc</code> within the installation folder inside the folder <code>extras/</code>. Move this file to an appropriate location on the TouchOSC host.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#configure-ableton-live","title":"Configure Ableton Live","text":"<p>If you haven't already, activate the zcx script. Use the TouchOSC ports as the zcx script MIDI in/out. This will usually be <code>TouchOSC Bridge</code>.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#configure-osc-settings-on-the-touchosc-host","title":"Configure OSC settings on the TouchOSC host","text":"<p>Refer to the TouchOSC manual.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#set-up-clyphx-pros-osc-output","title":"Set up ClyphX Pro's OSC output","text":"<p>Refer to this lesson. <code>OUTGOING_OSC_PORT</code> should be the port set up in the last step. <code>OSC_DEVICE_IP_ADDRESS</code> should be the IP address of the TouchOSC host, or <code>127.0.0.1</code> if using TouchOSC on the same computer that's running Live.</p> <p>Note: the demo config already has the appropriate <code>osc_output</code> values in <code>preferences.yaml</code>.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#overview","title":"Overview","text":""},{"location":"lessons/getting-started/demo-tour/touch-osc/#layout","title":"Layout","text":"<p>On the left side of the layout is a column of twelve buttons, from <code>dock_1</code> at the bottom to <code>dock_12</code> at the top. At the top right is a pager, with three pages.</p> <p>On the first page, you will find <code>track_fader</code> and <code>track_pan</code> 1 through 8. On the second is <code>enc_17</code> through <code>enc_32</code>. On the third is <code>enc_1</code> through <code>enc_16</code>.</p> <p>Below the pager is a row with <code>track_select_1</code> through <code>track_select_8</code>.</p> <p>The bottom half of the layout features the matrix.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#modes","title":"Modes","text":"<p>This config comes with two modes \u2014 <code>shift</code> and <code>select</code> \u2014 pre-configured. They are mapped to <code>dock_1</code> and <code>dock_2</code> at the bottom-left of the layout.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#pages","title":"Pages","text":"<p>This config comes with four pages pre-configured. By looking at <code>pages.yaml</code>, we can see these pages are named <code>home_page</code>, <code>alt_page</code>, <code>channel_strip_page</code>, and <code>blank_page</code>. The controls <code>dock_12</code> through <code>dock_7</code> have been configured as a group, and pressing one will take you to the relevant page.</p> <p>As two buttons are unassigned, if you add a new page it will automatically be assigned to one of the free buttons.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#named-controls","title":"Named controls","text":"<p><code>track_select_1</code> through <code>track_select_8</code> are param controls, bound to the selection state of the eight tracks in view of the session ring. Pressing one will select the relevant track, and the button will become brighter to indicate that. Holding one of these buttons will arm the track. With the mode <code>shift</code> active, the buttons will control the mute state of each track.</p> <p>The controls labelled \u21a4 and \u21a6 (<code>dock_5</code> and <code>dock_6</code>) will move the session ring left or right by eight positions.</p> <p>Two controls, <code>dock_3</code> and <code>dock_4</code> have been left unassigned.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#matrix-pages","title":"Matrix pages","text":""},{"location":"lessons/getting-started/demo-tour/touch-osc/#home_page","title":"home_page","text":""},{"location":"lessons/getting-started/demo-tour/touch-osc/#nav","title":"nav","text":"<p>The left side of <code>home_page</code> features the section <code>nav</code>. The top row of <code>nav</code> has four transport controls, bound to the functions <code>play</code>, <code>session_record</code>, <code>metronome</code>, and <code>loop</code>.</p> <p>The three bottom rows features a D-pad (\u2b06, \u2b05, \u2b95, \u2b07). Pressing the D-pad will move you around the Live set.</p> <p>In the center is a param control, mapped to the target <code>SEL / PLAY</code>. This button will fire the currently selected clip.</p> <p>In the corners of the D-pad are controls labelled \u21c8, \u21ca, \u21c7 and \u21c9 which will move the session ring by one position. With <code>shift</code> active, the ring will move by eight positions.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#actions","title":"actions","text":"<p>This section has been left unconfigured.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#alt_page","title":"alt_page","text":"<p>The top half of the matrix still features <code>nav</code>, demonstrating how we can have sections appear on multiple pages.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#select_control","title":"select_control","text":"<p>On the top row are four controls labelled \ud83d\udd07, \ud83d\udd0a, \ud83d\udc42, and \u25cf. They are param controls, mapped respectively to the selected track's mute, solo, input monitoring, and arm status.</p> <p>On the second row is another group of param controls, mapped to the selection status of the first four devices on the selected track.</p> <p>The bottom two rows have been left unconfigured.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#channel_strip_page","title":"channel_strip_page","text":"<p>This page features only one section, <code>channel_strip</code>. Each column of the matrix will control the mute, solo, input monitoring, and arm status of the relevant track in the session ring.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#blank_page","title":"blank_page","text":"<p>This page contains one section \u2014 <code>blank_section</code> \u2014 an 8x4 unconfigured grid. It's a great place to start experimenting with zcx's capabilities.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#encoders","title":"Encoders","text":"<p>The TouchOSC layout has three different pages of encoders, which can be swapped between with the buttons labelled <code>i</code>, <code>ii</code>, and <code>iii</code>.</p> <p>These pages are distinct from zcx pages.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#page-i","title":"page i","text":"<p>The faders (<code>track_fader_1</code> through <code>track_fader_8</code>) are configured as a group, and control the volume of the eight tracks in view of the session ring. The encoders (<code>track_pan_1</code> through <code>track_pan_8</code>) are also grouped, and control the pan of those same tracks.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#page-ii","title":"page ii","text":"<p>These encoders (<code>enc_17</code> through <code>enc_32</code>) control the first 16 parameters of the selected device.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#page-iii","title":"page iii","text":"<p>These encoders (<code>enc_1</code> through <code>enc_16</code>) have been left unmapped.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#troubleshooting","title":"Troubleshooting","text":"<p>If after following these steps you are unsuccessful, reach out on the Discord or report a bug.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#im-pressing-buttons-but-nothing-is-happening","title":"I'm pressing buttons but nothing is happening","text":"<p>There are several likely reasons:</p> <ul> <li>Live's control surface settings are misconfigured, see above.</li> <li>The connection between the computer running Live and the TouchOSC host is misconfigured. See the TouchOSC manual.</li> </ul>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#there-is-no-text-in-the-touchosc-layout","title":"There is no text in the TouchOSC layout","text":"<p>Most likely, the OSC connection between ClyphX Pro and TouchOSC is misconfigured, see above.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#other-issues","title":"Other issues","text":"<p>If you have edited the zcx config files, there is likely a problem with your configuration. See any errors that popup when loading the zcx script, and also any errors in the log file.</p> <p>For further help, reach out on the Discord.</p>"},{"location":"lessons/getting-started/demo-tour/touch-osc/#editing-the-touchosc-layout","title":"Editing the TouchOSC layout","text":"<p>If you would like to adapt the layout, this will require editing the files in <code>zcx_touch_osc/hardware</code>.</p> <p>Before doing this, you must edit the file <code>zcx_touch_osc/zcx.yaml</code>, and change the line <code>hardware: touch_osc</code> to <code>hardware: generic</code> (ignore the warning).</p> <p>If you fail to do this and later run the upgrade script, any edits to the files in <code>hardware/</code> will be overwritten.</p>"},{"location":"reference/color/","title":"Color reference","text":"<p>zcx allows you to define the color of a control in multiple formats.</p>"},{"location":"reference/color/#midi-value","title":"MIDI value","text":"<p>Pass a MIDI value in the range 0-127 to light the control with a color corresponding to that value.</p> <pre><code>my_control:\n  color: 42\n</code></pre>"},{"location":"reference/color/#name","title":"Name","text":"<p>There are several colors that you can reference by name:</p> <ul> <li>white</li> <li>grey</li> <li>dark_grey</li> <li>red</li> <li>orange</li> <li>yellow</li> <li>green</li> <li>play_green</li> <li>lime</li> <li>blue</li> <li>sky</li> <li>cyan</li> <li>purple</li> <li>magenta</li> <li>indigo</li> <li>pink</li> </ul> <pre><code>my_control:\n  color: purple\n</code></pre>"},{"location":"reference/color/#animated-colors","title":"Animated colors","text":"<p>If your hardware supports it, you may define one of two available animations for your control. To sync these animations with Live's tempo, you must enable <code>Sync</code> on the MIDI out port of your hardware in Live's MIDI preferences.</p> <p>The available animations are <code>pulse</code> and <code>blink</code>. <code>pulse</code> blends between the two colors, while <code>blink</code> quickly alternates between them.</p> <p>For each animation type, you must define an <code>a</code> and <code>b</code> color, and optionally a <code>speed</code> between 1-5 (slowest to fastest). You may omit the <code>speed</code> option to accept the default of 1.</p> <pre><code>my_control:\n  pulse:\n    a: 49\n    b: 5\n    speed: 3\n\nmy_other_control:\n  blink:\n    a: red\n    b: blue\n</code></pre>"},{"location":"reference/command/","title":"Command Reference","text":"<p>In zcx, a command is something that happens when a control is interacted with. Usually this means firing a ClyphX Pro action list.</p>"},{"location":"reference/command/#gestures","title":"gestures","text":"<p>Gestures are physical actions you can perform on a control to trigger a command. There are six gestures supported by zcx:</p> <ul> <li>pressed always fired immediately after a control is pressed</li> <li>pressed_delayed fires after the control is held for a short time</li> <li>released always fired immediately after a control is released</li> <li>released_delayed fired after a held control is released \u2014 will only fire after a <code>pressed_delayed</code> event</li> <li>released_immediately fired after a control that was not being held is released</li> <li>double_clicked fired after a control is pressed twice in quick succession</li> </ul> <p>Note</p> <p>The <code>double_clicked</code> gesture may be unituitive. See the lesson to undestand how it works.</p>"},{"location":"reference/command/#gesture-syntax","title":"gesture syntax","text":"<p>To define gestures on a control, add a <code>gestures</code> key, with key/value pairs of gesture/command.</p> <pre><code>my_control:\n  color: green\n  gestures:\n    pressed: SEL / PLAY\n    released: SEL / STOP\n</code></pre>"},{"location":"reference/command/#quotes-in-strings","title":"quotes in strings","text":"<p>Very often, ClyphX action lists include quotation marks, e.g. <code>\"my track\" / SEL</code>. This causes a small problem with yaml:</p> <pre><code>  gestures:\n    pressed: \"my track\" / SEL\n</code></pre> <p>Because of the quotes around <code>my track</code>, yaml interprets <code>my track</code> as the value for <code>pressed</code>, and then freaks out when it sees the rest of the action list (<code>/ SEL</code>). There are two ways to deal with this.</p>"},{"location":"reference/command/#block-scalar-syntax","title":"block scalar syntax","text":"<pre><code>gestures:\n  pressed: &gt;    # this `&gt;` character indicates a block scalar\n    \"my track\" / SEL\n</code></pre> <p>This is the recommended method. Yaml will interpret the whole line <code>\"my track\" / SEL</code> as the action list.</p> <p>This syntax also makes it easy to spread out long action lists over multiple lines for clarity:</p> <pre><code>pressed: &gt;\n  \"my track\" / ARM ON ;\n  \"my track\" / MON AUTO ;\n  \"my track\" / RECFIX 8\n</code></pre>"},{"location":"reference/command/#quotes-within-quotes","title":"quotes within quotes","text":"<p>By wrapping the entire action list in single quotes, we can freely use double quotes. This works, but is harder to read.</p> <pre><code>gestures:\n  pressed: '\"my track\" / SEL'\n</code></pre>"},{"location":"reference/command/#modes-syntax","title":"modes syntax","text":"<p>When using modes in zcx, the syntax is extended: <pre><code>gestures:\n  pressed: SREC FIX 4\n  pressed__shift: SREC FIX 8\n  pressed__shift__select: SREC FIX 16\n</code></pre></p> <p>Gesture definitions always start with one of the six supported gestures. Modes can be added by appending the name of each mode prefixed with a double underscore (<code>__</code>). </p>"},{"location":"reference/command/#multiple-matching-gestures","title":"multiple matching gestures","text":"<p>If you have a configuration like above, where there are multiple variations on the <code>pressed</code> gesture, only the most specific definition will be executed.</p> <p>E.g. if <code>shift</code> is active, the action list <code>SREC FIX 8</code> will fire but <code>SREC FIX 4</code> will not. If both <code>shift</code> and <code>select</code> are active, only <code>SREC FIX 16</code> will fire.</p>"},{"location":"reference/command/#cascading-gestures","title":"cascading gestures","text":"<p>You may configure a control to execute all matching command bundles in sequence.  This is done by setting the control's <code>cascade</code> option to <code>up</code> or <code>down</code>:</p> <pre><code>my_control:\n  cascade: down\n</code></pre> <p>This will execute command bundles in order of least-specific to most-specific, i.e <code>pressed</code>, <code>pressed__shift</code>, and <code>pressed__shift__select</code>.</p> <p>Setting <code>cascade: up</code> will reverse this order.</p>"},{"location":"reference/command/#command-syntax","title":"command syntax","text":"<p>The default command fires a ClyphX action list: <pre><code>my_control:\n  gestures:\n    pressed: SEL / MUTE\n</code></pre></p> <p>This is equivalent to: <pre><code>my_control:\n  gestures:\n    pressed: \n      cxp: SEL / MUTE\n</code></pre></p> <p>The <code>cxp</code> key is specifying the command type. Because <code>cxp</code> is the default command type, it's usually not necessary to specify it.</p>"},{"location":"reference/command/#command-bundles","title":"command bundles","text":"<p>You may 'bundle' a combination of command types and execute them sequentially when a gesture is performed:</p> <pre><code>my_control:\n  gestures:\n    pressed:\n      cxp: METRO\n      msg: activated the metronome\n      log: activated the metronome\n</code></pre>"},{"location":"reference/command/#command-types","title":"command types","text":""},{"location":"reference/command/#cxp","title":"cxp","text":"<p>Accepts an action list as a string and triggers it in ClyphX.</p> <pre><code>gestures:\n  pressed: \n    cxp: SETPLAY\n</code></pre> <pre><code>gestures:\n  pressed: &gt;\n    \"my track\" / SEL; \n    \"my track\" / ARM ON;\n    SREC 8\n</code></pre>"},{"location":"reference/command/#page","title":"page","text":"<p>Accepts a page name, page number, or keyword, and switches to that page:</p> <pre><code>gestures:\n  pressed:\n    page: 0\n  pressed__shift:\n    page: my_cool_page\n  pressed__select:\n    page: next\n</code></pre>"},{"location":"reference/command/#keywords","title":"keywords","text":"<p>next <pre><code>page: next\n</code></pre></p> <p>Goes to the next page.</p> <p>prev <pre><code>page: prev\n</code></pre></p> <p>Goes to the previous page.</p> <p>last <pre><code>page: last\n</code></pre></p> <p>Goes back to the page that was active before the current one.</p>"},{"location":"reference/command/#mode_on-mode_off-mode","title":"mode_on, mode_off, mode","text":"<p>Enables, disables, or toggles the given mode:</p> <pre><code>gestures:\n  pressed:\n    mode_on: shift\n  released:\n    mode_off: shift\n</code></pre>"},{"location":"reference/command/#overlay","title":"overlay","text":"<p>Enable, disable, or toggle the given overlay.</p> <pre><code>gestures:\n  pressed:\n    overlay:\n      enable: my_overlay\n  released:\n    overlay:\n      disable: my_overlay\n</code></pre> <pre><code>gestures:\n  pressed:\n    overlay:\n      toggle: my_overlay\n</code></pre>"},{"location":"reference/command/#msg","title":"msg","text":"<p>Shows a message briefly at the bottom of Live's UI: <pre><code>gestures:\n  pressed:\n    msg: Look at my super cool message!\n</code></pre></p> <p>This is, in most cases, functionally equivalent to doing: <pre><code>pressed: &gt;\n  MSG \"Look at my super cool message!\"\n</code></pre></p>"},{"location":"reference/command/#log","title":"log","text":"<p>Prints a message directly to Live's Log.txt:</p> <pre><code>pressed:\n  log: failed successfully\n</code></pre>"},{"location":"reference/command/#color","title":"color","text":"<p>Change the color of the activated control.</p> <pre><code>pressed:\n  color: green\nreleased:\n  color: initial\n</code></pre> <p>See also:</p> <ul> <li>Color reference</li> <li>Change color via user action</li> </ul>"},{"location":"reference/command/#ring","title":"ring","text":"<p>Move the session ring of the script.</p>"},{"location":"reference/command/#relative-moves","title":"relative moves","text":"<p>Move the ring along its x (track) or y (scene) axis.</p> <pre><code>up:\n  gestures:\n    pressed:\n      ring:\n        y: -1\n\nright:\n  gestures:\n    pressed:\n      ring:\n        x: 1\n\ndown:\n  gestures:\n    pressed:\n      ring:\n        y: 1\n\nleft:\n  gestures:\n    pressed:\n      ring:\n        x: -1\n</code></pre>"},{"location":"reference/command/#simplified-syntax","title":"simplified syntax","text":"<p>You can simply specify a direction rather than using x and y values.</p> <pre><code>left:\n  gestures:\n    pressed:\n      ring: left\n    pressed__shift:\n      ring: left 2\n</code></pre>"},{"location":"reference/command/#absolute-moves","title":"absolute moves","text":"<p>Directly position the left-most or top-most edge of the ring to a particular track or scene.</p>"},{"location":"reference/command/#by-track","title":"by track","text":"<p>Specify a track name (recommended) or number. When specifying a number, the number is zero-indexed.</p> <pre><code>my_button:\n  ring:\n    track: my cool track\n</code></pre> <pre><code>my_button:\n  ring:\n    track: 0\n</code></pre>"},{"location":"reference/command/#by-scene","title":"by scene","text":"<p>Specify a scene name (recommended) or number. When specifying a number, the number is zero-indexed.</p> <p>When targeting an X-Scene by name, you must use the X-Scene's identifier. E.g., with a scene name like <code>[my cool scene] ALL / MUTE; METRO ON</code>, you would use <code>my cool scene</code> as the scene name.</p> <pre><code>my_button:\n  ring:\n    scene: 7\n</code></pre> <pre><code>my_button:\n  ring:\n    scene: my cool scene\n</code></pre>"},{"location":"reference/command/#keyboard","title":"keyboard","text":"<p>Adjust the settings of the melodic keyboard view.</p>"},{"location":"reference/command/#pseq-rpseq","title":"pseq / rpseq","text":"<p>Emulates sequential action lists from ClyphX Pro.</p> <pre><code>my_control:\n  gestures:\n    pressed:\n      pseq:\n        - &gt;\n          \"my first track\" / SEL\n        - &gt;\n          \"my second track\" / SEL\n</code></pre> <p>The value of a <code>pseq</code> or <code>rpseq</code> key must be a list, with each list item being a command bundle (or action list). <code>pseq</code> will step through each command in order, while <code>rpseq</code> will trigger a random command (repeat commands are possible).</p>"},{"location":"reference/command/#python","title":"python","text":"<p>Execute Python code in a limited execution context.</p> <pre><code>my_control:\n  gestures:\n    pressed:\n      python: |\n        for i, track in enumerate(song.tracks):\n          if i != 0 and i % 15 == 0:\n            print(\"fizzbuzz\")\n          elif i != 0 and i % 5 == 0:\n            print(\"buzz\")\n          elif i != 0 and i % 3 == 0:\n            print(\"fizz\")\n          else:\n            print(track.name)\n</code></pre>"},{"location":"reference/command/#hardware_mode","title":"hardware_mode","text":"<p>For a multimode controller (e.g. Push), force the controller back into 'Live' mode.</p> <pre><code>my_control:\n  gestures:\n    pressed:\n      hardware_mode: live\n</code></pre>"},{"location":"reference/command/#refresh","title":"refresh","text":"<p>Force zcx to refresh all LED feedback.</p> <pre><code>my_control:\n  gestures:\n    pressed:\n      refresh: true\n</code></pre> <p>Note</p> <p>Generally, it should not be necessary to use this command. If you are using this command to work around an issue you're having, please consider reporting a bug.</p>"},{"location":"reference/command/#hot_reload","title":"hot_reload","text":"<p>Perform a hot reload.</p> <pre><code>my_control:\n  gestures:\n    pressed:\n      hot_reload: true\n</code></pre>"},{"location":"reference/command/#special-commands","title":"special commands","text":"<p>Some control types may feature unique command types. You can find information on these commands on each control's reference page.</p>"},{"location":"reference/encoder/","title":"Encoder Reference","text":"<p>Encoder mapping in zcx aims to emulate the Encoder Bindings feature from the ClyphX Pro Bindings optional accessory.</p>"},{"location":"reference/encoder/#configuration","title":"Configuration","text":"<p>Encoder mappings are configured in <code>encoders.yaml</code>, within your <code>_config</code> folder. An encoder config looks like this:</p> encoders.yaml<pre><code>enc_1:\n  binding: &gt;\n    SEL / VOL\n</code></pre> <p>Just like with buttons or pads, we can dynamically rebind parameters based on the active mode(s).</p> encoders.yaml<pre><code>enc_1:\n  binding:\n      default: &gt;\n        SEL / VOL\n      __shift: &gt;\n        SEL / PAN\n</code></pre> <p>When using this feature, the special key <code>default</code> applies when no other (more specific) binding is applicable.</p>"},{"location":"reference/encoder/#mapping-targets","title":"Mapping targets","text":"<p>Mapping targets are provided as a string in ClyphX Pro syntax.  Template strings may be used within these strings.</p> <p>With some exceptions, the available targets are the same as ClyphX Pro bindings. As such, nativeKONTROL's examples are reproduced below:</p>"},{"location":"reference/encoder/#vol","title":"VOL","text":"<p>Applies to: Any track's volume control.</p> <p>Example: <code>SEL/VOL</code></p>"},{"location":"reference/encoder/#pan","title":"PAN","text":"<p>Applies to: Any track's pan control.</p> <p>Example: <code>2/PAN</code></p>"},{"location":"reference/encoder/#send-z","title":"SEND <code>z</code>","text":"<p>Applies to: Any particular send on any track, where <code>z</code> is the send letter.</p> <p>Example: <code>SEL/SEND F</code></p>"},{"location":"reference/encoder/#panl-panr","title":"PANL / PANR","text":"<p>Applies to: Any track's left or right pan position when using split-stereo panning.</p> <p>Example: <code>\"my cool track\"/PANL</code></p>"},{"location":"reference/encoder/#selp","title":"SELP","text":"<p>Applies to: The last parameter in Live that was clicked on with your mouse.</p> <p>Example: <code>SELP</code></p>"},{"location":"reference/encoder/#devd-cs","title":"DEV(<code>d</code>) CS","text":"<p>Applies to: The Chain Selector of any Rack on any Track where <code>d</code> specifies the Device.</p> <p>Example: <code>1/DEV(SEL) CS</code></p>"},{"location":"reference/encoder/#devd-pp","title":"DEV(<code>d</code>) P<code>p</code>","text":"<p>Applies to: Device Best-of-Bank parameter of any Device on any Track where <code>d</code> specifies the Device and <code>p</code> specifies the number of the parameter or Macro in the case of Racks.</p> <p>Example: <code>1/DEV(SEL) P4</code></p>"},{"location":"reference/encoder/#devd-bb-pp","title":"DEV(<code>d</code>) B<code>b</code> P<code>p</code>","text":"<p>Applies to: Device Best-of-Bank parameter of any Device on any Track where <code>d</code> specifies the Device, <code>b</code> specifies the bank number, and <code>p</code> specifies the number of the parameter or Macro in the case of Racks.</p> <p>When targeting an unknown device, e.g. the selected device, this option may provide more logical mappings than the above option</p> <p>Example: <code>1/DEV(SEL) B1 P4</code></p>"},{"location":"reference/encoder/#devxy-pan","title":"DEV(<code>x</code>.<code>y</code>) PAN","text":"<p>Applies to: A particular chain's pan control, targeted with ClyphX Pro rack dot notation. </p> <p>Example: <code>1/DEV(2.3) PAN</code></p>"},{"location":"reference/encoder/#devxy-send-z","title":"DEV(<code>x</code>.<code>y</code>) SEND <code>z</code>","text":"<p>Applies to: A particular send letter <code>z</code> of a particular chain <code>y</code>, targeted with ClyphX Pro rack dot notation. </p> <p>Example: <code>1/DEV(1.4) SEND A</code></p>"},{"location":"reference/encoder/#devxy-vol","title":"DEV(<code>x</code>.<code>y</code>) VOL","text":"<p>Applies to: A particular chain's volume control, targeted with ClyphX Pro rack dot notation. </p> <p>Example: <code>1/DEV(1.1) VOL</code></p>"},{"location":"reference/encoder/#xfader","title":"XFADER","text":"<p>Applies to: Main (master) track's crossfader.</p> <p>Example: <code>XFADER</code></p>"},{"location":"reference/encoder/#targeting-the-session-ring","title":"Targeting the session ring","text":"<p>With a special syntax, we can dynamically target a track at a particular position of the session ring. We can use any valid track target with this syntax:</p> <pre><code>enc_1:\n  binding: &gt;\n    RING(0) / VOL\n  __shift: &gt;\n    RING(0) / PAN\n</code></pre> <p>Note: this syntax is zero-indexed, i.e. <code>RING(0)</code> means the first track of the session ring.</p>"},{"location":"reference/encoder/#encoder-groups","title":"Encoder groups","text":"<p>We can group encoders to apply common definitions to them. See Template Reference for details.</p>"},{"location":"reference/encoder/#additional-options","title":"Additional options","text":"<p>The following options may be configured on each encoder.</p>"},{"location":"reference/encoder/#unbind_on_fail","title":"unbind_on_fail","text":"<pre><code>enc_1:\n  binding: &gt;\n    SEL / VOL\n  unbind_on_fail: false\n</code></pre> <p>With the example binding <code>SEL / VOL</code>, <code>enc_1</code> will control the volume of the selected track. Let's say the selected track is an audio track, <code>guitar</code>. <code>enc_1</code> will, obviously, control the volume of <code>guitar</code>.</p> <p>If we navigate to a blank MIDI track (which does not have a volume parameter), by default zcx will unbind this encoder until we select another track with a volume parameter. By setting <code>unbind_on_fail: false</code> for this control, <code>enc_1</code> would remain bound to the last valid parameter, until a new target is valid, i.e, we select another audio or instrument track.</p>"},{"location":"reference/encoder/#manually-rebinding-encoders","title":"Manually rebinding encoders","text":"<p>You can use the zcx user action to manually rebind encoders.</p>"},{"location":"reference/encoder/#limitations","title":"Limitations","text":""},{"location":"reference/encoder/#first-last-and-sel-keyword","title":"FIRST, LAST, and SEL keyword","text":"<p>When using ClyphX Pro rack dot notation, the <code>FIRST</code>, <code>LAST</code>, and <code>SEL</code> keywords are not recognised. This may be added in a future release.</p>"},{"location":"reference/template/","title":"Template reference","text":"<p>zcx contains several features for applying a common definition across multiple controls, or for dynamically configuring a control based on factors such as its position in a group.</p>"},{"location":"reference/template/#template-strings","title":"template strings","text":"<p>In many parts of a control's config, you can use a special syntax to dynamically insert values into a string, such as an action list:</p> matrix_sections/very_small_section.yaml<pre><code>-\n  color: red\n  gestures:\n    pressed: PLAY ${me.Index}\n-\n  color: green\n  gestures:\n    pressed: PLAY ${me.Index}\n-\n  color: blue\n  gestures:\n    pressed: PLAY ${me.Index}\n</code></pre> <p>The key part is <code>${me.Index}</code>. In zcx, when you see part of a string enclosed with a leading <code>${</code> and a trailing <code>}</code>, you are looking at a template string. zcx will dynamically evaluate this string each time the control is pressed.</p> <p>The example above would evaluate to:</p> <pre><code>PLAY 1\nPLAY 2\nPLAY 3\n</code></pre> <p>Let's break down what's happening here.</p> <ul> <li><code>${</code> \u2014 indicates the start of an expression</li> <li><code>me</code> \u2014 is the individual control in which a template string appears</li> <li><code>Index</code> \u2014 this is a property that belongs to this control</li> <li><code>}</code> \u2014 indicates the end of an expression</li> </ul> <p>As you may notice, zcx template strings behave similarly to Variables in ClyphX Pro.</p>"},{"location":"reference/template/#what-is-a-property","title":"what is a property?","text":"<p>A property is some value that is associated with a particular control. You can see the properties associated with each control in the control reference.</p> <p>We can see from the control reference that <code>me.Index</code> refers to this control's position with its containing section.</p>"},{"location":"reference/template/#basic-expressions","title":"basic expressions","text":"<p>We can even execute simple Python expressions within the braces:</p> <pre><code>gestures:\n  presssed: PLAY ${me.Index + 8}  # PLAY 9\n</code></pre> <p>Note</p> <p>To read about how zcx handles user-supplied expressions safely, see this lesson.</p>"},{"location":"reference/template/#complex-expressions","title":"complex expressions","text":"<p>There may be times when then value you want to fill is impractical or impossible to write inside the braces. In this case you can use the <code>vars</code> option in your yaml config.</p> <p><code>vars</code> is a dict, where each key is the name of a variable, and each value is an expression.  The variable will be assigned to the result of that expression.  We can then reference that variable within a template string. For instance:</p> <pre><code>my_control:\n  vars:\n    foo: 1 + 1\n  gestures:\n    pressed:\n      msg: The value of foo is ${foo} # \"The value of foo is 2\"\n</code></pre> <p>In ClyphX terms, you can imagine the above as: </p> <p><code>%foo% = 1 + 1 ; msg \"The value of foo is %foo%\"</code></p> <p>Or in Python as:</p> <pre><code>def button_pressed():\n    foo = 1 + 1\n    print(f'The value of foo is {foo}')\n</code></pre> <p>That was a very basic example to illustrate the concept. This example better explains a use case:</p> control_templates.yaml<pre><code>drum_pad_section:\n  vars:\n    offset: 8\n    clips_per: 2\n    clip_1a: (me.index * clips_per) + 1 + offset\n    clip_1b: (clip_1a + clips_per) - 1\n  gestures:\n    released_immediately: &gt;\n      \"beats\" / PLAY RND${clip_1a}-${clip_1b}\n</code></pre> <p>This is a control template that, when applied to a matrix section, will produce the following output:</p> <pre><code>pad 1: \"beats\" / PLAY RND9-10\npad 2: \"beats\" / PLAY RND11-12\npad 3: \"beats\" / PLAY RND13-14\n...\n</code></pre> <p>And later, we can easily expand this config to add extra functionality:</p> <pre><code>drum_pad_section: \n  vars:\n    offset: 8\n    clips_per: 2\n    shift_offset: 32\n    clip_1a: (me.index * clips_per) + 1 + offset\n    clip_1b: (clip_1a + clips_per) - 1\n    clip_2a: clip_1a + shift_offset\n    clip_2b: clip_2b + shift_offset\n  gestures:\n    released_immediately: &gt;\n      \"beats\" / PLAY RND${clip_1a}-${clip_1b}\n    released_immediately__shift: &gt;\n      \"beats\" / PLAY RND${clip_2a}-${clip_2b}\n</code></pre> <pre><code>pad 1: \"beats\" / PLAY RND9-10\npad 1 (with shift): \"beats\" / PLAY RND41-42\npad 2: \"beats\" / PLAY RND11-12\npad 2 (with shift): \"beats\" / PLAY RND43-44\n</code></pre> <p>Notes</p> <ul> <li>Variables defined in <code>vars</code> are calculated anew every time they are required, i.e. they do not persist between presses of a control.</li> </ul>"},{"location":"reference/template/#template-locals","title":"template locals","text":"<p>The following variables and functions can be accessed within template strings.</p>"},{"location":"reference/template/#zcx","title":"<code>zcx</code>","text":"<p>Provides access to a <code>ZcxApi</code> object. See the source code for available properties and methods,</p>"},{"location":"reference/template/#song","title":"<code>song</code>","text":"<p>Provides access to the Live set's song object.</p>"},{"location":"reference/template/#ring","title":"<code>ring</code>","text":"<p>Allows references to the enclosed tracks and scenes of the zcx session ring.</p> <p>See the session ring lesson.</p>"},{"location":"reference/template/#printmessage-str","title":"<code>print(message: str)</code>","text":"<p>Allows you to write to the log. Mostly useful with Python commands.</p>"},{"location":"reference/template/#msgmessage-str","title":"<code>msg(message: str)</code>","text":"<p>Briefly displays a message in the Live UI, like with the msg command.</p>"},{"location":"reference/template/#cxp_varvariable_name-str","title":"<code>cxp_var(variable_name: str)</code>","text":"<p>Retrieves the current value of a ClyphX Pro variable if that variable is defined, or the Python <code>None</code> if it is not defined. <code>variable_name</code> is the name of the ClyphX variable without the enclosing <code>%</code>s.</p>"},{"location":"reference/template/#this_cs","title":"<code>this_cs</code>","text":"<p>Returns the name of this zcx script.</p>"},{"location":"reference/template/#sel_track","title":"<code>sel_track</code>","text":"<p>Returns the name of the selected track. Must be enclosed in double-quotes for use in a ClyphX Pro action list.</p>"},{"location":"reference/template/#group-templates","title":"group templates","text":"<p>zcx allows you to define any arbitrary selection of controls as a group of controls. By grouping controls, we can apply a common configuration across all of them.</p> <p>The syntax for defining a group is different for named controls and controls that are part of the matrix.</p>"},{"location":"reference/template/#named-controls","title":"named controls","text":"named_controls.yaml<pre><code>__scene_group:\n  includes: [scene_1, scene_2, scene_3, scene_4]\n  color: red\n  controls:\n    scene_2:\n      color: blue\n  gestures:\n    pressed: SCENE ${me.group_Index}\n</code></pre> <p>For named controls, we create a new entry that starts with a double underscore (<code>__</code>). What follows the <code>__</code> is the group name, in this case <code>scene_group</code>. This group name is up to you.</p> <p>The <code>includes</code> key is a list of controls that belong to this group. Each member of the group will inherit all options defined on the group. In this case each control in the group will launch a scene, relative to its position in that group.</p>"},{"location":"reference/template/#overwriting-options","title":"overwriting options","text":"<p>We can overwrite some or all of the group's options for each member. This is done via the <code>controls</code> key:</p> <pre><code>controls:\n  scene_2:\n    color: blue\n</code></pre> <p><code>controls</code> is a dict of control definitions. Each key of <code>controls</code> is the name of a control in this group. In this <code>scene_2</code> key we can overwrite part or all of the group definition. We can also add options that weren't defined on the group: <pre><code>controls:\n  scene_2:\n    color: blue\n    repeat: true\n</code></pre></p>"},{"location":"reference/template/#matrix-controls","title":"matrix controls","text":"<p>As matrix controls do not have names, the syntax used to group them is slightly different.</p> <p>Groups vs Sections</p> <p>Do not confuse matrix sections with groups.</p> <p>Every matrix control inherently belongs to a matrix section. Groups can be used within a section, or ignored entirely.</p> <p>Look at the config for hypothetical matrix section <code>actions_right.yaml</code>:</p> actions_right.yaml<pre><code>-\n  color: yellow\n  gestures:\n    pressed: SEL / MUTE\n-\n  color: blue\n  gestures:\n    pressed: SEL / SOLO\n-\n  pad_group: my_pad_group\n  color: purple\n  gestures:\n    pressed: ${me.group_Index} / SEL\n  controls:\n    -\n    -\n    -\n    -\n-   \n  color: pink\n  gestures:\n    pressed_delayed: METRO\n</code></pre> <p>Here we have defined the first two controls in this section individually.</p> <p>The third entry in the section has the key <code>pad_group</code>. This indicates that we're looking at the definition for a group named <code>my_pad_group</code> within this section</p> <p>Note</p> <p>It is not required that <code>pad_group</code> be the first key in a group definition, though it is recommended for clarity.</p> <p>You are not required to give a pad group a name. It can be left nameless like so: <pre><code>- \n  pad_group:\n  color: purple\n  ...\n</code></pre></p> <p>The <code>controls</code> key is required. This is a list, and every item in the list represents another member of the group: <pre><code>controls:\n  -\n  -\n  -\n  -\n</code></pre></p> <p>Each of these dashes is a blank or 'null' entry in this list. By looking at <code>controls</code>, we can see that four controls belong to this group. Like above, we are able to overwrite or extend individual group members:</p> <pre><code>controls:\n  -\n  -\n  - color: green\n  -\n</code></pre> <p>Now all controls in this group will take the group definition, except the third control, which will be purple.</p> <p>This is a representation of how zcx processes this section under the hood:</p> <pre><code>-\n  color: yellow\n  gestures:\n    pressed: SEL / MUTE\n-\n  color: blue\n  gestures:\n    pressed: SEL / SOLO\n# group definition is expanded\n-\n  color: purple\n  gestures:\n    pressed: 1 / SEL\n-\n  color: purple\n  gestures:\n    pressed: 2 / SEL\n-\n  color: green  # this option was overwritten\n  gestures:\n    pressed: 3 / SEL\n-\n  color: purple\n  gestures:\n    pressed: 4 / SEL\n# group definition ends\n-   \n  color: pink\n  gestures:\n    pressed_delayed: METRO\n</code></pre>"},{"location":"reference/template/#whole-section-groups","title":"whole-section groups","text":"<p>It is possible to define an entire matrix section with one group definition. To do this, the yaml file for the section should contain a single dict, instead of the usual list:</p> big_section.yaml<pre><code>pad_group:\ncolor: pink\ngestures:\n  pressed: CLIP PLAY ${me.Index}\n</code></pre> <p>This template will be applied for every control in the section. You can imagine the expanded output like this:</p> <pre><code>-\n  color: pink\n  gestures:\n    pressed: CLIP PLAY 1\n-\n  color: pink\n  gestures:\n    pressed: CLIP PLAY 2\n-\n  color: pink\n  gestures:\n    pressed: CLIP PLAY 3\n...\n</code></pre>"},{"location":"reference/template/#section-templates","title":"section templates","text":"<p>An alternative to the above method is to define a template inside matrix_sections.yaml. To do so, add a <code>template</code> key:</p> <pre><code>my_section:\n  col_start: 0\n  col_end: 7\n  row_start: 0\n  row_end: 7\n  template:\n    color: red\n</code></pre> <p>When supplying a section template, it is possible to omit the usual file <code>matrix_sections/&lt;section name&gt;.yaml</code>. You may still choose to supply both.</p>"},{"location":"reference/template/#encoder-groups","title":"encoder groups","text":"<p>Encoders can be grouped just like button controls. The main difference is that we use the key <code>encoders</code> for our overrides:</p> <pre><code>__enc_row:\n  includes: [enc_1, enc_2, enc_3, enc_4]\n  binding: &gt;\n    ring(${me.index}) / VOL\n  encoders:\n    enc_2:\n      binding:\n        __shift: &gt;\n          \"my cool track\" / PAN\n</code></pre>"},{"location":"reference/template/#control-templates","title":"control templates","text":"<p>In <code>control_templates.yaml</code>, you may create a control definition that is available for any control to inherit from. Any options defined on the template will be inherited on the child control. In the case of a conflict (the template and child define the same option), the child will overwrite the template.</p> <p>control_templates.yaml<pre><code>__global__:\n  color: 127\n\nhold_warning:\n  gestures:\n    released_immediately: &gt;\n      MSG \"You must hold this control to trigger it!\"\n</code></pre> <pre><code>play:\n  template: hold_warning\n  # color: 127    __global__ option, overwritten\n  color: green\n  gestures:\n    pressed_delayed: SETPLAY\n    released_immediately: &gt; # added from `hold_warning` template\n      MSG \"You must hold this control to trigger it!\"\n</code></pre></p> <p>There is also a special template called <code>__global__</code>. This definition will apply to every control in your zcx script. You can optionally prevent a control from inheriting from <code>__global__</code> like so:</p> <pre><code>my_control:\n  template: null\n</code></pre>"},{"location":"reference/template/#multiple-inheritance","title":"multiple inheritance","text":"<p>You can apply multiple templates sequentially to a control, like so:</p> <pre><code>my_control:\n  template: [foo, bar, baz]\n</code></pre> control_templates.yaml<pre><code>__global__:\n  color: 127\n\nfoo:\n  color: red\n  gestures:\n    pressed: msg \"I was pressed!\"\n\nbar:\n  color: blue\n  gestures:\n    released: msg \"I was released!\"\n\nbaz:\n  color: pink\n</code></pre> <p>This config will result in this control:</p> <pre><code>my_control:\n  color: pink\n  gestures:\n    pressed: msg \"I was pressed!\"\n    released: msg \"I was released!\"\n</code></pre> <p>Notice that all four templates defined a <code>color</code> option.</p> <p>When using multiple templates, zcx merges the template definitions from left to right, in the same order you define them in. When the same option is defined on multiple templates, and the difference is irreconcilable, the rightmost template wins. In this case, the control is <code>pink</code>.</p> <p><code>foo</code> and <code>bar</code> both have a <code>gestures</code> key, but the gestures defined within are compatible, and so <code>my_control</code> gets both the <code>pressed</code> and <code>released</code> gesture.</p>"},{"location":"reference/control/","title":"Control Reference","text":"<p>...</p>"},{"location":"reference/control/keyboard/","title":"Keyboard control","text":"<p>The keyboard control displays LED feedback concerning the state of the keyboard view, as well as Live's scale mode.</p> <p>Note</p> <p>Standard controls are already capable of interacting with the keyboard view, and the keyboard control still requires you to manually define any commands. The only purpose of this control is to enable LED feedback.</p> <p>See more.</p>"},{"location":"reference/control/keyboard/#yaml-schema","title":"yaml schema","text":"<p>Inherits from standard control.</p> <pre><code>function: string, dict\nactive_color: color definition\ninactive_color: color definition\n# color: not implemented\n</code></pre>"},{"location":"reference/control/keyboard/#function","title":"function","text":"<p><code>string, dict</code></p> <p>This is the condition that will determine if the control is active or inactive.</p>"},{"location":"reference/control/keyboard/#repeat_rate","title":"repeat_rate","text":"<p><pre><code>function:\n  repeat_rate: 1/4\n</code></pre> <pre><code>function:\n  repeat_rate: on\n</code></pre></p> <p>Reflect the keyboard's note repeat rate.</p>"},{"location":"reference/control/keyboard/#in_key","title":"in_key","text":"<pre><code>function: in_key\n</code></pre> <p>Reflect if they keyboard is using in key mode.</p>"},{"location":"reference/control/keyboard/#full_velo","title":"full_velo","text":"<pre><code>function: full_velo\n</code></pre> <p>Reflect if they keyboard is using full velocity mode.</p>"},{"location":"reference/control/keyboard/#octave_down-octave_up","title":"octave_down, octave_up","text":"<pre><code>function: octave_down\n</code></pre> <p>Reflect if the keyboard's octave is at its lowest or highest: if the octave is at its lowest, <code>function: octave_down</code> would be inactive.</p>"},{"location":"reference/control/keyboard/#scale","title":"scale","text":"<p>Reflects the root and/or scale name of Live's scale mode.</p> <p><pre><code>function:\n  scale:\n    root: F\n</code></pre> <pre><code>function:\n  scale:\n    name: lydian augmented\n</code></pre> <pre><code>function:\n  scale:\n    root: C\n    name: major\n</code></pre></p>"},{"location":"reference/control/keyboard/#color","title":"color","text":"<p><code>not implemented</code></p> <p>Use active color and inactive color.</p>"},{"location":"reference/control/keyboard/#active_color","title":"active_color","text":"<p><code>color definition</code></p> <p>Define a color that will display when this control's bound page is active.</p>"},{"location":"reference/control/keyboard/#inactive_color","title":"inactive_color","text":"<p><code>color definition</code></p> <p>Inverse of active color.</p>"},{"location":"reference/control/mode/","title":"mode control","text":"<p>The <code>mode</code> control binds to a particular mode in zcx and displays feedback indicating whether that mode is currently active</p> <p>Note</p> <p>Standard controls are already capable of changing modes, and mode controls still require you to manually define the mode change commands.  The only purpose of this control is to enable LED feedback.</p> <p>See command reference.</p>"},{"location":"reference/control/mode/#yaml-schema","title":"yaml schema","text":"<p>Inherits from standard control.</p> <pre><code>mode: string\n# color: ignored\nactive_color: color definition\ninactive_color: color definition\n</code></pre>"},{"location":"reference/control/mode/#mode","title":"mode","text":"<p><code>string</code></p> <p>The mode to bind to.</p>"},{"location":"reference/control/mode/#active_color-inactive_color","title":"active_color, inactive_color","text":"<p><code>color definition</code></p> <p>The color when the control's mode is active or inactive.</p>"},{"location":"reference/control/mode/#color","title":"color","text":"<p><code>ignored</code></p> <p>Feedback is based on whether the control's bound mode is active.</p>"},{"location":"reference/control/overlay/","title":"overlay control","text":"<p>The <code>overlay</code> control is identical to the <code>standard</code> control, except it has a required <code>overlay</code> option.  This control's LED feedback will reflect whether its bound overlay is currently active. As such, the <code>color</code> option is ignored in favor of active color and inactive color</p> <p>Note</p> <p>Standard controls are already capable of changing overlays, and overlay controls still require you to manually define the overlay change commands.  The only purpose of this control is to enable LED feedback.</p> <p>See command reference.</p>"},{"location":"reference/control/overlay/#yaml-schema","title":"yaml schema","text":"<p>Inherits from standard control.</p> <pre><code>overlay: string, int\nactive_color: color definition\ninactive_color: color definition\n# color: not implemented\n</code></pre>"},{"location":"reference/control/overlay/#overlay","title":"overlay","text":"<p><code>string</code></p> <p>The name of the overlay this control is bound to.</p> <p>See the overlays lesson.</p>"},{"location":"reference/control/overlay/#color","title":"color","text":"<p><code>not implemented</code></p> <p>Use active color and inactive color.</p>"},{"location":"reference/control/overlay/#active_color","title":"active_color","text":"<p><code>color definition</code></p> <p>Define a color that will display when this control's bound page is active.</p>"},{"location":"reference/control/overlay/#inactive_color","title":"inactive_color","text":"<p><code>color definition</code></p> <p>Inverse of active color.</p>"},{"location":"reference/control/overlay/#properties","title":"properties","text":"<p>These are values attached to controls that can be referenced from within template strings.</p>"},{"location":"reference/control/overlay/#page","title":"page","text":"<p>Returns the zero-indexed page number of this control's bound page.</p>"},{"location":"reference/control/overlay/#page_1","title":"Page","text":"<p>with a capital <code>P</code></p> <p>Returns <code>page</code> + 1.</p>"},{"location":"reference/control/overlay/#page_name","title":"page_name","text":"<p>Returns the name of the bound page.</p>"},{"location":"reference/control/overlay/#is_active","title":"is_active","text":"<p>Returns a boolean representing if the bound page is in view.</p>"},{"location":"reference/control/page/","title":"page control","text":"<p>The <code>page</code> control is identical to the <code>standard</code> control, except it has a required <code>page</code> option. This control's LED feedback will reflect whether its bound page is currently active. As such, the <code>color</code> option is ignored in favor of active color and inactive color</p> <p>Note</p> <p>Standard controls are already capable of changing pages, and page controls still require you to manually define the page change commands. The only purpose of this control is to enable control feedback.</p> <p>See command reference.</p>"},{"location":"reference/control/page/#yaml-schema","title":"yaml schema","text":"<p>Inherits from standard control.</p> <pre><code>page: string, int\nactive_color: color definition\ninactive_color: color definition\n# color: not implemented\n</code></pre>"},{"location":"reference/control/page/#page","title":"page","text":"<p><code>string | int</code></p> <p>The page name or number this control is bound to. Passing a string value means that the binding is resistant to page order changes, while passing an int may be suitable for a dedicated 'page row'.</p> <p>Note: page numbers are always zero-indexed.</p>"},{"location":"reference/control/page/#color","title":"color","text":"<p><code>not implemented</code></p> <p>Use active color and inactive color.</p>"},{"location":"reference/control/page/#active_color","title":"active_color","text":"<p><code>color definition</code></p> <p>Define a color that will display when this control's bound page is active.</p>"},{"location":"reference/control/page/#inactive_color","title":"inactive_color","text":"<p><code>color definition</code></p> <p>Inverse of active color.</p>"},{"location":"reference/control/page/#properties","title":"properties","text":"<p>These are values attached to controls that can be referenced from within template strings.</p>"},{"location":"reference/control/page/#page_1","title":"page","text":"<p>Returns the zero-indexed page number of this control's bound page.</p>"},{"location":"reference/control/page/#page_2","title":"Page","text":"<p>with a capital <code>P</code></p> <p>Returns <code>page</code> + 1.</p>"},{"location":"reference/control/page/#page_name","title":"page_name","text":"<p>Returns the name of the bound page.</p>"},{"location":"reference/control/page/#is_active","title":"is_active","text":"<p>Returns a boolean representing if the bound page is in view.</p>"},{"location":"reference/control/param/","title":"param control","text":"<p>The <code>param</code> control binds to a device parameter, mixer parameter, or other special function, and displays feedback about the state of its target. This feature aims to emulate the Button Bindings feature from the ClyphX Pro Bindings optional accessory.</p> <p>Param controls can be bound to all the targets that encoders can, as well as some others.</p>"},{"location":"reference/control/param/#behaviour","title":"behaviour","text":"<p>The param control displays different colors based on whether its target is considered \"on\" or \"off\". For binary targets like arm, this is straightforward. For adjustable properties, like a track's volume, the parameter is considered \"off\" if the parameter is at its minimum value, and \"on\" for any other value. You can tweak this behaviour by setting a midpoint.</p> <p>Without defining any gestures, the param control will toggle its mapped parameter from \"on\" to \"off\" on a press. Binary targets will have their status inverted. For adjustable properties, a parameter currently at its minimum value will be set to its maximum, and a parameter at any value above its minimum is set to its minimum.</p> <p>You can modify this behaviour via the toggle_param option. Any defined gestures will be executed as normal.</p>"},{"location":"reference/control/param/#yaml-schema","title":"yaml schema","text":"<p>Inherits from standard control.</p> <pre><code>binding: binding definition\non_color: color definition\noff_color: color definition\ndisabled_color: color definition\ntoggle_param: true | false | \"momentary\"\nmidpoint: number\n# color: not implemented\n</code></pre>"},{"location":"reference/control/param/#binding","title":"binding","text":"<p><code>binding definition</code></p> <p>Follows the same format as encoder mapping definitions. All encoder mapping targets are available to param controls, as well as the following additional options:</p>"},{"location":"reference/control/param/#additional-mapping-targets","title":"additional mapping targets","text":""},{"location":"reference/control/param/#dev","title":"DEV","text":"<p>Applies to: Any device's bypass state.</p> <p>Example: <code>\"my track\" / DEV(1)</code></p>"},{"location":"reference/control/param/#dev-sel","title":"DEV SEL","text":"<p>Applies to: The selection status of any device.</p> <p>Example: <code>\"my track\" / DEV(1) SEL</code></p>"},{"location":"reference/control/param/#track-sel","title":"<code>track</code> / SEL","text":"<p>Applies to: The selection status of any track.</p> <p>Example: <code>\"my track\" / SEL</code></p>"},{"location":"reference/control/param/#arm","title":"ARM","text":"<p>Applies to: Any track's arm state.</p> <p>Example: <code>SEL/ARM</code></p>"},{"location":"reference/control/param/#mon-x","title":"MON <code>x</code>","text":"<p>Applies to: Any track's input monitoring state, where <code>x</code> is <code>in</code>, <code>auto</code>, or <code>off</code>.</p> <p>Example: <code>SEL/MON IN</code></p>"},{"location":"reference/control/param/#mute","title":"MUTE","text":"<p>Applies to: Any track's mute state.</p> <p>Example: <code>SEL/MUTE</code></p>"},{"location":"reference/control/param/#solo","title":"SOLO","text":"<p>Applies to: Any track's solo state.</p> <p>Example: <code>SEL/SOLO</code></p>"},{"location":"reference/control/param/#xfade-x","title":"XFADE <code>x</code>","text":"<p>Applies to: Any track's crossfader assignment, where <code>x</code> is <code>a</code>, <code>b</code>, or <code>off</code>.</p> <p>Example: <code>SEL/XFADE A</code></p>"},{"location":"reference/control/param/#track-play","title":"<code>track</code> / PLAY","text":"<p>Applies to: The playing status of the selected clip slot on the targeted track.</p> <p>If a clip exists in the relevant clip slot, this control will be considered on if that clip is not playing. If the relevant clip is already playing, or if no clip exists, the control will be considered off.</p> <p>Example: <code>SEL/PLAY</code></p>"},{"location":"reference/control/param/#track-stop","title":"<code>track</code> / STOP","text":"<p>Applies to: The playing status the targeted track.</p> <p>This control will be considered on if the targeted track has a playing clip slot.</p> <p>Example: <code>SEL/STOP</code></p>"},{"location":"reference/control/param/#on_color-off_color","title":"on_color, off_color","text":"<p><code>color definition</code></p> <p>Color definitions based on the state of the mapped parameter.</p>"},{"location":"reference/control/param/#disabled_color","title":"disabled_color","text":"<p><code>color definition</code></p> <p>Color definition when the control is disabled, e.g. after failing to find its target.</p>"},{"location":"reference/control/param/#toggle_param","title":"toggle_param","text":"<p><code>true | false | \"momentary\"</code></p> <p>If set to <code>momentary</code>, the default behaviour will execute on both press and release.</p> <p>If set to <code>false</code>, the default behaviour will not execute unless invoked with the do_toggle command.</p>"},{"location":"reference/control/param/#midpoint","title":"midpoint","text":"<p><code>number</code></p> <p>A percentage between 0.0 and 100.0 to be used when determining state. A parameter above this value will be considered active. With <code>midpoint: 0.0</code> the control will behave as normal. With <code>midpoint: 100.0</code> the default behaviour will be inverted.</p>"},{"location":"reference/control/param/#properties","title":"properties","text":""},{"location":"reference/control/param/#next_pct-next_value","title":"next_pct, next_value","text":"<p>Returns the value that the parameter would be set to the next time it is toggled. <code>next_pct</code> returns that value as a number between <code>0.0</code> and <code>100.0</code>, which can be used in a ClyphX Pro action list to ramp the parameter. <code>next_value</code> returns a string value.</p> <p>Example usage: <pre><code>binding: &gt;\n  \"my cool track\" / VOL\npressed: &gt;\n  \"my cool track\" / VOL RAMP 10 ${me.next_pct}% \n</code></pre></p>"},{"location":"reference/control/param/#special-command-types","title":"special command types","text":""},{"location":"reference/control/param/#do_toggle","title":"do_toggle","text":"<p>Manually trigger the default toggle behaviour from within a command bundle.</p> <pre><code>my_control:\n  type: param\n  binding: SEL / DEV(1)\n  toggle_param: false\n  gestures:\n    pressed:\n      SEL / DEV(1) SEL\n    pressed__shift:\n      do_toggle: true\n</code></pre> <p>In this example, the control is bound to the bypass state of the first device on the selected track. Without holding <code>shift</code>, pressing the control selects the device. While holding <code>shift</code>, the device's bypass is toggled.</p> <p>Note: For this command to be useful, toggle_param must be set to <code>false</code>, otherwise every press will always toggle the parameter.</p>"},{"location":"reference/control/ring_track/","title":"ring_track control","text":"<p>A version of the track control that dynamically binds to the track at a particular index of the session ring. An RGB-enabled button will attempt to display animated feedback representing the track's state (playing, recording, etc.). </p> <p>Warning</p> <p>Currently, track controls only consider session view clips when determining playing status, not arrangement view clips.</p>"},{"location":"reference/control/ring_track/#yaml-schema","title":"yaml schema","text":"<p>Inherits from track control.</p> <pre><code>ring_index: int\n</code></pre>"},{"location":"reference/control/ring_track/#options","title":"options","text":""},{"location":"reference/control/ring_track/#ring_index","title":"ring_index","text":"<p><code>int</code></p> <p>The zero-indexed column number of the session ring track to bind to.</p>"},{"location":"reference/control/standard/","title":"standard control","text":"<p>The below options are avaliable on the base ZControl class which all other control types descend from. Unless otherwise specified, they behave the same way for all control types.</p>"},{"location":"reference/control/standard/#yaml-schema","title":"yaml schema","text":"<p>These are options you can set on each control via its yaml definition. Some options will not be available in every context.</p> <pre><code>type: string\nalias: string\ncolor: color definition\nhold_color: color definition\nincludes: list[string]\nbuttons: dict[ZControl]\ngestures: dict[dict]\npad_group: string\nvars: dict\nrepeat: boolean=false\ntemplate: string, list[string], null\nprops: dict[any]\nthreshold: int=30\ncascade: false | \"down\" | \"up\" = false\nrelease_on_ext: bool = true\n</code></pre>"},{"location":"reference/control/standard/#type","title":"type","text":"<p><code>string='standard'</code></p> <p>Changing this option from the default <code>standard</code> will create a specialised ZControl. Allowed value is the name of any installed control classes.</p>"},{"location":"reference/control/standard/#alias","title":"alias","text":"<p><code>string</code></p> <p>Allows you to provide a name for a matrix control, or an alternate name for a named control, which can later be used to target this control via the zcx API, e.g. the zcx user action.</p>"},{"location":"reference/control/standard/#color","title":"color","text":"<p><code>color definition</code> </p> <p>The base color of the control. See color reference.</p>"},{"location":"reference/control/standard/#hold_color","title":"hold_color","text":"<p><code>color definition</code></p> <p>By providing a <code>hold_color</code> option, the control will use this color while it is held, and return to its base color when released. This will override the default blinking animation on control presses.</p>"},{"location":"reference/control/standard/#includes","title":"includes","text":"<p><code>list[string]</code></p> <p>Only available on named control group definitions.</p> <p>See template reference.</p>"},{"location":"reference/control/standard/#pad_group","title":"pad_group","text":"<p><code>string | null</code></p> <p>Only available on matrix control group definitions.</p> <p>See template reference.</p>"},{"location":"reference/control/standard/#controls","title":"controls","text":"<p><code>list[ZControl] | dict[ZControl]</code></p> <p>Used in a group control definition to override properties on one or more ZControls in the group. Accepts a list for a group of matrix controls or a dict for a group of named controls.</p>"},{"location":"reference/control/standard/#gestures","title":"gestures","text":"<p><code>dict[dict[command]]</code></p> <p>See command reference.</p>"},{"location":"reference/control/standard/#vars","title":"vars","text":"<p><code>dict[dict[string]]</code></p> <p>See template reference.</p>"},{"location":"reference/control/standard/#repeat","title":"repeat","text":"<p><code>boolean=false</code></p> <p>Repeatedly trigger this control's <code>pressed</code> gesture (with modifiers) while it is held.</p>"},{"location":"reference/control/standard/#suppress_animations","title":"suppress_animations","text":"<p><code>boolean=false</code></p> <p>Prevent LED animations from firing on this control.</p>"},{"location":"reference/control/standard/#template","title":"template","text":"<p><code>string | list[string] | null</code></p> <p>The template(s) to apply to this control. See template reference.</p> <p><code>string</code> Apply a single template.</p> <p><code>list[string]</code> Apply each template consecutively. Options that conflict will be overwritten from left to right.</p> <p><code>null</code> Apply no template, including the <code>__global__</code> template.</p>"},{"location":"reference/control/standard/#props","title":"props","text":"<p><code>dict[string | int]</code></p> <p>Any arbitrary data. Can be referenced from within template strings.</p>"},{"location":"reference/control/standard/#threshold","title":"threshold","text":"<p><code>int=30</code></p> <p>Override the global velocity threshold, which by default is <code>30</code>. Triggers under this threshold will be ignored.</p>"},{"location":"reference/control/standard/#cascade","title":"cascade","text":"<p><code>false | \"down\" | \"up\" = false</code></p> <p>Configures the control's behaviour when multiple command bundles match the performed gesture. The default of <code>false</code> executes only one matching command bundle per gesture.</p>"},{"location":"reference/control/standard/#release_on_exit","title":"release_on_exit","text":"<p><code>bool = true</code></p> <p>Concerns the scenario where a control leaves view while being pressed, e.g. the page changed.</p> <p>With the default of <code>true</code>, the control will fire its <code>released</code> gesture. Additionally, it will fire its <code>released_delayed</code> gesture if the control had been held a short while, or the <code>released_immediately</code> gesture if it had not.</p> <p>If set to <code>false</code>, none of the above will happen.</p>"},{"location":"reference/control/standard/#properties","title":"properties","text":"<p>These are values attached to controls that can be referenced from within template strings.</p>"},{"location":"reference/control/standard/#obj","title":"obj","text":"<p>Returns a reference to the actual Python object for the control.</p>"},{"location":"reference/control/standard/#position-properties","title":"position properties","text":""},{"location":"reference/control/standard/#index","title":"index","text":"<p>Returns the zero-indexed position of a matrix control within its containing section. Returns 0 for non-matrix controls, or the control's group_index if it belongs to a group.</p>"},{"location":"reference/control/standard/#index_1","title":"Index","text":"<p>with a capital <code>I</code></p> <p>Returns index + 1.</p>"},{"location":"reference/control/standard/#group_index","title":"group_index","text":"<p>Returns the zero-indexed position of a control within its containing group.</p>"},{"location":"reference/control/standard/#group_index_1","title":"group_Index","text":"<p>with a capital <code>I</code></p> <p>Returns group_index + 1.</p>"},{"location":"reference/control/standard/#group_count","title":"group_count","text":"<p>Returns the number of controls in this group.</p>"},{"location":"reference/control/standard/#location-properties","title":"location properties","text":"<p>Only available on matrix controls.</p> <p>Use a capital <code>X</code> or <code>Y</code> to retrieve a one-indexed value.</p>"},{"location":"reference/control/standard/#x-x_flip","title":"x, x_flip","text":"<p>Returns the zero-indexed column of the control (x) or its mirrored position (x_flip), relative to its containing section.</p>"},{"location":"reference/control/standard/#y-y_flip","title":"y, y_flip","text":"<p>Returns the zero-indexed row of the control (y) or its mirrored position (y_flip), relative to its containing section.</p>"},{"location":"reference/control/standard/#global_x-global_x_flip","title":"global_x, global_x_flip","text":"<p>Returns the zero-indexed column of the control (global_x) or its mirrored position (global_x_flip), relative to the entire matrix.</p>"},{"location":"reference/control/standard/#global_y-global_y_flip","title":"global_y, global_y_flip","text":"<p>Returns the zero-indexed row of the control (global_y) or its mirrored position (global_y_flip), relative to the entire matrix.</p>"},{"location":"reference/control/standard/#velocity-properties","title":"velocity properties","text":"<p>The following properties are based on the last velocity at which a control was struck. This value will not reset to 0 when the control is released.</p>"},{"location":"reference/control/standard/#vel","title":"vel","text":"<p>Returns the last velocity as an integer (between 0-127).</p>"},{"location":"reference/control/standard/#velp","title":"velp","text":"<p>Returns the last velocity as a percentage (float).</p> <p>To use this percentage in a ClyphX action list, you will need to manually add the % sign, e.g:</p> <p><code>SEL / VOL ${me.velp}%</code></p>"},{"location":"reference/control/standard/#velps","title":"velps","text":"<p>Returns the last velocity as a percentage, but scaled according to the control's threshold.</p> <p>E.g., if a control has a threshold of <code>30</code>, a press with a velocity of <code>30</code> will return <code>0.0</code>.</p>"},{"location":"reference/control/track/","title":"track control","text":"<p>The <code>track</code> control binds to a particular track in the Live set. An RGB-enabled button will attempt to display animated feedback representing the track's state (playing, recording, etc.). </p> <p>When the <code>track</code> option is configured, zcx will bind to the specified track on set load. The control's bound track can later be reassigned via the API, and the <code>track</code> option may be omitted to create an unbound control on set load.</p> <p>Warning</p> <p>Currently, track controls only consider session view clips when determining playing status, not arrangement view clips.</p>"},{"location":"reference/control/track/#yaml-schema","title":"yaml schema","text":"<p>Inherits from standard control.</p> <pre><code>track: string, int\ncolor: color definition\nanimate_while_stopped: boolean=false\n</code></pre>"},{"location":"reference/control/track/#options","title":"options","text":""},{"location":"reference/control/track/#track","title":"track","text":"<p><code>string | int</code></p> <p>The track name or number to bind to. Binding by number is generally only recommended for testing purposes.</p>"},{"location":"reference/control/track/#color","title":"color","text":"<p><code>color definition</code></p> <p>By default, the track control will attempt to create a palette of colors based on the color of the bound track. You may optionally pass a color option, and that color will be used as a base instead. Note: if an animated color is specified, only the 'a' color of the animation will be considered. See color reference.</p>"},{"location":"reference/control/track/#animate_while_stopped","title":"animate_while_stopped","text":"<p><code>boolean=false</code></p> <p>When <code>true</code>, animations will stay active when the transport is stopped.</p>"},{"location":"reference/control/track/#properties","title":"properties","text":"<p>These are values attached to controls that can be referenced from within template strings.</p>"},{"location":"reference/control/track/#track_1","title":"track","text":"<p>Returns the name of the bound track.</p>"},{"location":"reference/control/transport/","title":"transport control","text":"<p>The <code>transport</code> control binds to a particular function of Live's transport, displaying feedback based on the state of the function.</p> <p>Note</p> <p>Standard controls are already capable of controlling the transport, and transport controls still require you to manually define the action lists to fire. The only purpose of this control is to enable control feedback.</p> <p>See command reference.</p>"},{"location":"reference/control/transport/#yaml-schema","title":"yaml schema","text":"<p>Inherits from standard control.</p> <pre><code>transport: string\n# color: ignored\nactive_color: color definition\ninactive_color: color definition\nplaying_active_color: color definition\nplaying_inactive_color: color definition\n</code></pre>"},{"location":"reference/control/transport/#transport","title":"transport","text":"<p><code>string</code></p> <p>The name of the transport function to bind to. These functions are currently supported:</p> <ul> <li><code>play</code></li> <li><code>session_record</code></li> <li><code>arrangement_record</code></li> <li><code>record</code> \u2014 a combination of the two above options</li> <li><code>metronome</code></li> <li><code>loop</code></li> <li><code>punch_in</code></li> <li><code>punch_out</code></li> <li><code>automation</code> \u2014 the state of Live's Automation Arm</li> <li><code>overdub</code> \u2014 the state of Live's MIDI Arrangement Overdub button</li> </ul>"},{"location":"reference/control/transport/#color","title":"color","text":"<p><code>ignored</code></p> <p>Feedback is based on whether the control's bound transport function is active.</p>"},{"location":"reference/control/transport/#active_color-inactive_color","title":"active_color, inactive_color","text":"<p>Provide a color definition that will be used when the bound transport function is active or inactive. If either of these options are undefined, a default will be used.</p>"},{"location":"reference/control/transport/#playing_active_color-playing_inactive_color","title":"playing_active_color, playing_inactive_color","text":"<p>Similar to above, but this color will be used when the song is playing.</p> <p>Notes: - This is applicable to all transport functions, not just <code>play</code> - If no <code>active_color</code> or <code>inactive_color</code> is defined, this option will be ignored.</p>"},{"location":"reference/file/","title":"Configuration files","text":"<p>zcx is configured through a variety of yaml files.</p> <p>If this is your first time using zcx, make sure to read through the getting started tutorial, as the articles in this section will expand on the concepts explained in that tutorial.</p> <p>If you are using a smaller screen, press the  icon in the top-left of the screen to expand this section and see the articles within.</p>"},{"location":"reference/file/encoders/","title":"encoders.yaml","text":"<p><code>encoders.yaml</code> is where you define the mappings of any encoders (knobs, faders, etc) of your hardware. For more info, see the sub-section of zcx concepts, or the Encoder Reference.</p>"},{"location":"reference/file/matrix-sections/","title":"matrix_sections.yaml","text":"<p><code>matrix_sections.yaml</code> is where you define logical sections of the control matrix, which must themselves be assigned to a page in <code>pages.yaml</code> or an overlay in <code>overlays.yaml</code>. You may also define a section template here.</p> <p>For more info, see the sub-section of zcx concepts.</p>"},{"location":"reference/file/modes/","title":"modes.yaml","text":"<p>Simply a list of the names of the modes you would like to use in your config.</p> modes.yaml<pre><code>- shift\n- select\n- my_mode\n</code></pre> <p>For more info, see the sub-section of zcx concepts.</p>"},{"location":"reference/file/modes/#firing-command-bundles-on-mode-changes","title":"Firing command bundles on mode changes","text":"<p>You may fire a command bundle when a mode is enabled, disabled, or toggled. Instead of specifying just the mode name as a string, you should specify an object like so:</p> modes.yaml<pre><code>- shift\n- mode: select\n  on_enter: METRO ON\n  on_leave: METRO OFF\n  on_toggle:\n    msg: metro toggled\n- my_mode\n</code></pre>"},{"location":"reference/file/named_controls/","title":"named_controls.yaml","text":"<p><code>named_controls</code> is where you configure the controls that exist outside the matrix. For more info, see the sub-section of zcx concepts.</p>"},{"location":"reference/file/overlays/","title":"overlays.yaml","text":"<p><code>overlays.yaml</code> is where you define zcx overlays. See the overlays lesson for details.</p>"},{"location":"reference/file/pages/","title":"pages.yaml","text":"<p><code>pages.yaml</code> is where you configure the different pages of the control matrix. For a basic explanation of pages see the sub-section of zcx concepts.</p>"},{"location":"reference/file/pages/#advanced-settings","title":"advanced settings","text":""},{"location":"reference/file/pages/#order","title":"order","text":"<p>You may define an <code>order</code> key in <code>pages.yaml</code> to set the order of your pages, rather than moving the entries in the <code>pages</code> key.</p> <pre><code>pages:\n  page_one:\n    - big_section\n  page_two:\n    - big_section\n\norder:\n  - page_two\n  - page_one\n</code></pre>"},{"location":"reference/file/pages/#on_enter-on_leave","title":"on_enter, on_leave","text":"<p>You can configure a command bundle that is executed when the page is entered and/or when the page is left. Doing so requires a slight change to the normal pages syntax:</p> <pre><code>pages:\n  page_one:\n    sections:\n      - actions_left\n      - actions_right\n    on_enter: METRO\n    on_leave:\n      msg: &gt;\n        left page ${page_number} (${page_name})\n</code></pre>"},{"location":"reference/file/preferences/","title":"preferences.yaml","text":"<p><code>preferences.yaml</code> allows you to customise various settings of the zcx script. </p>"},{"location":"reference/file/preferences/#two-levels-of-preferences","title":"two levels of preferences","text":"<p>At the root of your zcx installation is a file <code>_global_preferences.yaml</code>. Inside your <code>_config</code> folder, you may create the file <code>preferences.yaml</code>.</p> <p>As zcx allows per-set configs, the purpose of having multiple files is to allow you to have certain preferences across all of your configs, and expand or modify those preferences per-config. If you only use one zcx config, you may choose to use either of these files.</p>"},{"location":"reference/file/preferences/#preference-reference","title":"preference reference","text":"<p>Each of these headings represents a top-level yaml entry.</p>"},{"location":"reference/file/preferences/#action_log","title":"action_log","text":"<pre><code>action_log: true\n</code></pre> <p>When set to <code>true</code>, all triggered ClyphX Pro action lists will be logged.</p>"},{"location":"reference/file/preferences/#configs","title":"configs","text":"<p>This setting must be set in <code>_global_preferences.yaml</code></p> <p>Allows you to configure per-set configs.</p> <pre><code>configs:\n  - config: dj\n    pattern: dj_set\n\n  - config: solo_set\n    pattern: &gt;\n      [solo]\n\n  - config: mixing\n    pattern: MIX\n</code></pre>"},{"location":"reference/file/preferences/#force_config","title":"force_config","text":"<p>This setting must be set in <code>_global_preferences.yaml</code></p> <p>Override pattern matching for per-set configs and explicitly load the specified config, or the default config.</p> <pre><code>force_config: dj\n</code></pre> <p>Load config from the folder <code>_config_dj/</code></p> <pre><code>force_config: null\n</code></pre> <p>Load the default config <code>_config/</code></p>"},{"location":"reference/file/preferences/#initial_hw_mode","title":"initial_hw_mode","text":"<pre><code>initial_hw_mode: zcx\n</code></pre> <p>Options:</p> <ul> <li><code>zcx</code> - When zcx loads, switch the device to user mode.</li> <li><code>live</code> - Do not attempt to take control of the hardware on set load.</li> </ul>"},{"location":"reference/file/preferences/#load_hardware_plugins","title":"load_hardware_plugins","text":"<pre><code>load_hardware_plugins: true\n</code></pre> <p>Determines whether any hardware-specific plugins (located in <code>zcx/hardware/plugins</code>) will be loaded.</p>"},{"location":"reference/file/preferences/#load_user_plugins","title":"load_user_plugins","text":"<pre><code>load_user_plugins: true\n</code></pre> <p>Determines whether any user plugins (located in <code>zcx/plugins</code>) will be loaded.</p>"},{"location":"reference/file/preferences/#log_failed_encoder_bindings","title":"log_failed_encoder_bindings","text":"<pre><code>log_failed_encoder_bindings: true\n</code></pre> <p>By default, when an encoder fails to bind to the specified target an error message is written to the log. In some cases, it may be expected that bindings fail, so you may set this option to <code>false</code>.</p>"},{"location":"reference/file/preferences/#log_file_max_size","title":"log_file_max_size","text":"<pre><code>log_file_max_size: 5\n</code></pre> <p>Max size of the log file in megabytes.</p>"},{"location":"reference/file/preferences/#log_file_backups","title":"log_file_backups","text":"<pre><code>log_file_backups: 2\n</code></pre> <p>Number of log file backups to keep.</p>"},{"location":"reference/file/preferences/#log_level","title":"log_level","text":"<pre><code>log_level: info\n</code></pre> <p>Configures how detailed the zcx logs are. From most to least detailed, the options are:</p> <ul> <li>debug</li> <li>info</li> <li>warning</li> <li>error</li> <li>critical</li> </ul>"},{"location":"reference/file/preferences/#osc_output","title":"osc_output","text":"<p>See the OSC lesson.</p>"},{"location":"reference/file/preferences/#playable_channel","title":"playable_channel","text":"<p>See the keyboard view lesson.</p>"},{"location":"reference/file/preferences/#plugins","title":"plugins","text":"<pre><code>plugins:\n  plugin_name:\n    plugin_option_1: true\n    plugin_option_2: false\n</code></pre> <p>Consult the documentation of your plugin to see the available options. If the plugin came with zcx you will find this information in the hardware reference for your controller.</p>"},{"location":"reference/file/preferences/#session_ring","title":"session_ring","text":"<pre><code>session_ring:\n  width: 8\n  height: 8\n</code></pre> <p>Sets the dimensions of the session ring. You may disable the ring by setting one or both of <code>width</code> and <code>height</code> to <code>0</code>.</p>"},{"location":"reference/file/preferences/#startup_command","title":"startup_command","text":"<pre><code>startup_command:\n  mode_on: shift\n  cxp: METRO\n</code></pre> <p>Fire a command bundle when the script is finished loading.</p>"},{"location":"reference/file/preferences/#startup_page","title":"startup_page","text":"<pre><code>startup_page: 2\n</code></pre> <pre><code>startup_page: home_page\n</code></pre> <pre><code>startup_page: ${2 if \"dj\" in song.name else 0}\n</code></pre> <p>Set the page that is active when the script loads.</p> <p>Alternatively:</p> <ul> <li>Use a startup_command</li> <li>Set a page order</li> </ul>"},{"location":"reference/file/preferences/#developer-preferences","title":"developer preferences","text":"<p>The following preferences are only useful when developing the 'core' of zcx.</p>"},{"location":"reference/file/preferences/#log_includes_tests","title":"log_includes_tests:","text":"<pre><code>log_includes_tests: false\n</code></pre> <p>When <code>true</code>, log.txt includes the output of any tests or user tests. Test output is written to <code>test_log.txt</code> in either case.</p>"},{"location":"reference/file/preferences/#refresh_on_all_sysex","title":"refresh_on_all_sysex","text":"<pre><code>refresh_on_all_sysex: false\n</code></pre> <p>When set to <code>true</code>, zcx will refresh all LED feedback upon receipt of any MIDI Sysex message. This may be useful if you are trying to test controller-specific code for a controller you don't have access to.</p>"},{"location":"reference/hardware/","title":"Hardware reference","text":"<p>zcx is available for a variety of MIDI controllers. Apart from using the correct name for named controls, the process of configuring zcx is basically identical, no matter which hardware you have.</p> <p>However, certain controllers may have special features, or even limitations when used with zcx. In such cases, you can refer to the page for your hardware. If you are using a smaller screen, press the  icon in the top-left of the screen to expand this section and see the articles within.</p>"},{"location":"reference/hardware/apc-mini-mk2/","title":"APC Mini mk2","text":""},{"location":"reference/hardware/apc-mini-mk2/#limitations","title":"Limitations","text":"<p>zcx should not be used alongside the factory control surface script. You should disable the factory control surface before attempting to use zcx.</p>"},{"location":"reference/hardware/apc-mini-mk2/#color-support","title":"Color support","text":"<p>Support for animated colors is limited with this hardware. When defining an animated color, only the <code>a</code> value is used.</p>"},{"location":"reference/hardware/apc-mini-mk2/#dim-leds","title":"Dim LEDs","text":"<p>For some reason, in the APC's default mode the LEDs are quite dim. If the default brightness is acceptable, then no action is required.</p> <p>There is a workaround, but it requires the use of external software such as Bome MIDI Translator, MidiPipe, MidiFire, or others.</p> <p>First, you will need to edit a hardware-specific file in your installation. The file is <code>_zcx_apc_mini_mk2/hardware/specs.yaml</code>.</p> <pre><code>hardware_name: Akai APC Mini mk2\n\nglobal_midi_channel: 0\n\nbutton_matrix:\n  msg_type: note\n  id_start: 0\n  id_end: 63\n  feedback: rgb\n  momentary: true\n  width: 8\n  playable: false\n  channel: 6\n</code></pre> <p>By adding <code>channel: 6</code> to <code>button_matrix</code>, zcx will send LED feedback on channel 7, which the APC displays at full brightness. Unfortunately, zcx will also listen for MIDI on channel 7, while your hardware will still send on channel 1. This means your matrix controls won't work.</p> <p>Warning</p> <p>When upgrading your zcx installation to a new version, your changes to any files in <code>hardware/</code> will be lost. You will have to edit this file with every upgrade.</p> <p>To work around this, using your aforementioned MIDI software, create a virtual port that takes input from your APC.  Then you will need to filter the matrix controls, and change their channel to 7 (or 6 if your software deals in zero-indexed MIDI channels).  The matrix controls are notes 0-63 (inclusive) on channel 1. You should then output this modified MIDI data on a virtual output port.</p> <p>You should consult the documentation of your chosen software for instructions on achieving the above.</p> <p>Once you have a virtual port, set this port as the Input of your script in Live's MIDI preferences. zcx should now function as normal.</p>"},{"location":"reference/hardware/apc-mini-mk2/#control-names","title":"control names","text":""},{"location":"reference/hardware/apc-mini-mk2/#buttons","title":"buttons","text":"<p>These are the names you must use in named_controls.yaml</p> <ul> <li><code>volume</code> - The button labelled <code>volume</code></li> <li><code>pan</code> -  The button labelled <code>pan</code></li> <li><code>send</code> - The button labelled <code>send</code></li> <li><code>device</code> - The button labelled <code>device</code></li> <li><code>up</code> - The button with the \ud83d\udd3c symbol</li> <li><code>down</code> - The button with the \ud83d\udd3d symbol</li> <li><code>left</code> - The button with the \u25c0\ufe0f symbol</li> <li><code>right</code> - The button with the \u25b6\ufe0f symbol</li> <li><code>shift</code> - The button labelled <code>shift</code></li> <li><code>scene_1</code> through <code>scene_8</code> - The scene launch buttons</li> </ul>"},{"location":"reference/hardware/apc-mini-mk2/#encoders","title":"encoders","text":"<p>These are the names you must use in encoders.yaml</p> <ul> <li><code>fader_1</code> through <code>fader_9</code> - The nine faders.</li> </ul>"},{"location":"reference/hardware/launchpad-pro-mk3/","title":"Launchpad Pro mk3","text":""},{"location":"reference/hardware/launchpad-pro-mk3/#color-support","title":"Color support","text":"<p>When defining pulse colors, only the <code>a</code> value is used.</p>"},{"location":"reference/hardware/launchpad-pro-mk3/#control-names","title":"control names","text":""},{"location":"reference/hardware/launchpad-pro-mk3/#buttons","title":"buttons","text":"<p>These are the names you must use in named_controls.yaml</p> <p>Top row</p> <ul> <li><code>shift</code> - the button labelled <code>shift</code></li> <li><code>nav_left</code> - the button with the \u25c0\ufe0f symbol</li> <li><code>nav_right</code> - the button with the \u25b6\ufe0f symbol</li> <li><code>scene_1</code> - through <code>scene_8</code> - the scene launch buttons</li> <li><code>session</code> - the button labelled <code>session</code></li> <li><code>note</code> - the button labelled <code>note</code></li> <li><code>chord</code> - the button labelled <code>chord</code></li> <li><code>custom</code> - the button labelled <code>custom</code></li> <li><code>sequencer</code> - the button labelled <code>sequencer</code></li> <li><code>novation</code> - the illuminated Novation logo in the top right corner. It's not actually a button, so won't respond to gestures, but apart from that it can be treated like any other control to display feedback.</li> </ul> <p>Left column</p> <ul> <li><code>nav_up</code> - the button with the \ud83d\udd3c symbol</li> <li><code>nav_down</code> - the button with the \ud83d\udd3d symbol</li> <li><code>clear</code> - the button labelled <code>clear</code></li> <li><code>duplicate</code> - the button labelled <code>duplicate</code></li> <li><code>quantize</code> - the button labelled <code>quantize</code></li> <li><code>fixed_length</code> - the button labelled <code>fixed_length</code></li> <li><code>play</code> - the button with the \u25b6\ufe0f symbol</li> <li><code>record</code> - the button labelled <code>capture MIDI</code> with the \u23fa\ufe0f symbol</li> </ul> <p>Bottom row</p> <ul> <li><code>track_1</code> through <code>track_8</code> - the upper row</li> <li><code>arm</code> - the button labelled <code>record arm</code></li> <li><code>mute</code> - the button labelled <code>mute</code></li> <li><code>solo</code> - the button labelled <code>solo</code></li> <li><code>volume</code> - the button labelled <code>volume</code></li> <li><code>pan</code> - the button labelled <code>pan</code></li> <li><code>sends</code> - the button labelled <code>sends</code></li> <li><code>device</code> - the button labelled <code>device</code></li> <li><code>stop</code> - the button labelled <code>stop clip</code></li> </ul> <p>Right column</p> <ul> <li><code>scene_1</code> through <code>scene_8</code> - the scene launch buttons</li> </ul>"},{"location":"reference/hardware/launchpad-x-mini-mk3/","title":"Launchpad mini mk3 / Launchpad X","text":""},{"location":"reference/hardware/launchpad-x-mini-mk3/#color-support","title":"Color support","text":"<p>When defining pulse colors, only the <code>a</code> value is used.</p>"},{"location":"reference/hardware/launchpad-x-mini-mk3/#control-names","title":"control names","text":""},{"location":"reference/hardware/launchpad-x-mini-mk3/#buttons","title":"buttons","text":"<p>These are the names you must use in named_controls.yaml</p> <ul> <li><code>nav_up</code> - the button with the \ud83d\udd3c symbol</li> <li><code>nav_down</code> - the button with the \ud83d\udd3d symbol</li> <li><code>nav_left</code> - the button with the \u25c0\ufe0f symbol</li> <li><code>nav_right</code> - the button with the \u25b6\ufe0f symbol</li> <li><code>scene_1</code> - through <code>scene_8</code> - the scene launch buttons</li> <li><code>novation</code> - the illuminated Novation logo in the top right corner. It's not actually a button, so won't respond to gestures, but apart from that it can be treated like any other control to display feedback.</li> <li><code>session</code> - the button labelled <code>session</code></li> </ul> <p>Launchpad mini mk3 only:</p> <ul> <li><code>drums</code> - the button labelled <code>drums</code></li> <li><code>keys</code> - the button labelled <code>keys</code></li> <li><code>user</code> - the button labelled <code>user</code></li> </ul> <p>Launchpad X only:</p> <ul> <li><code>note</code> - the button labelled <code>note</code></li> <li><code>custom</code> - the button labelled <code>custom</code></li> <li><code>capture</code> - the button labelled <code>capture MIDI</code></li> </ul>"},{"location":"reference/hardware/push-1/","title":"Push 1","text":""},{"location":"reference/hardware/push-1/#limitations","title":"Limitations","text":"<ul> <li>The touchstrip continuous input cannot be used by zcx, but will function as normal if <code>track</code> is enabled for this script in Live's MIDI preferences. The touchstrip sends an on/off message on press and release, which is available as a named control called <code>touchstrip</code>.</li> <li>The touchstrip cannot be toggled between pitchbend and modulation mode from within zcx. You must enter Live mode and press the touchstrip while holding <code>select</code>.</li> </ul>"},{"location":"reference/hardware/push-1/#display-plugin","title":"Display plugin","text":"<p>zcx for Push 1 ships with a plugin that enables display output. Each line of the display will be used for a specific purpose:</p> <p>Warning</p> <p>If you are not using the default Push script alongside zcx, you will need to set the option force to <code>true</code>.</p>"},{"location":"reference/hardware/push-1/#encoder-mappings","title":"encoder mappings","text":"<p>Displays the name of the parameter that the main encoder above it (<code>enc_1</code> - <code>enc_8</code>) is currently bound to.</p>"},{"location":"reference/hardware/push-1/#encoder-values","title":"encoder values","text":"<p>Displays the current value of the aforementioned parameter.</p>"},{"location":"reference/hardware/push-1/#message","title":"message","text":"<p>A reserved space, which can be written to from the zcx user action.</p>"},{"location":"reference/hardware/push-1/#ring_tracks","title":"ring_tracks","text":"<p>Displays the name of the first 8 tracks highlighted by the session ring</p>"},{"location":"reference/hardware/push-1/#selected","title":"selected","text":"<p>Displays the selected track, device, and scene. If the scene is named, the name will be shown. If the scene is an X-Scene, the scene name (action list) will not be shown, unless there is text within the identifier, e.g. an X-Scene with the name <code>[my cool scene] METRO</code> will display <code>my cool scene</code>.</p> <p>You can specify on which line each readout appears via preferences.yaml.</p> <pre><code>plugins:\n  push_1_display:\n    encoder_mappings: 1\n    encoder_values: 2\n    message: 3\n    ring_tracks: 4\n</code></pre>"},{"location":"reference/hardware/push-1/#additional-options","title":"additional options","text":""},{"location":"reference/hardware/push-1/#force","title":"force","text":"<pre><code>force: true\n</code></pre> <p>If the default Push script is not active alongside zcx, you will need to set <code>force: true</code> to make this plugin output to the display.</p>"},{"location":"reference/hardware/push-1/#prefer_track_name","title":"prefer_track_name","text":"<pre><code>prefer_track_name: true\n</code></pre> <p>With the default of <code>true</code>, when an encoder is mapped to a track's volume fader, the encoder mapping segment will display the track's name. With <code>false</code>, the parameter will be shown as <code>Volume</code></p>"},{"location":"reference/hardware/push-1/#use_graphics","title":"use_graphics","text":"<pre><code>use_graphics: true\n</code></pre> <p>With the default of <code>true</code>, certain mapped parameters will show a graphical representation of the parameter's value. With <code>false</code>, you will see the normal textual representation.</p>"},{"location":"reference/hardware/push-1/#control-names","title":"control names","text":""},{"location":"reference/hardware/push-1/#buttons","title":"buttons","text":"<p>These are the names you must use in named_controls.yaml</p> <p>Left side</p> <ul> <li><code>tap_tempo</code> - the button labelled <code>tap tempo</code></li> <li><code>metronome</code> - the button labelled <code>metronome</code></li> <li><code>undo</code> - the button labelled <code>undo</code></li> <li><code>delete</code> - the button labelled <code>delete</code></li> <li><code>double</code> - the button labelled <code>double</code></li> <li><code>quantize</code> - the button labelled <code>quantize</code></li> <li><code>fixed_length</code> - the button labelled <code>fixed length</code></li> <li><code>automation</code> - the button labelled <code>automation</code></li> <li><code>duplicate</code> - the button labelled <code>duplicate</code></li> <li><code>new</code> - the button labelled <code>new</code></li> <li><code>record</code> - the button with the red \u23fa\ufe0f symbol</li> <li><code>play</code> - the button with the green \u25b6\ufe0f symbol</li> <li><code>touchstrip</code> - the press/release status of the touchstrip</li> </ul> <p>Surrounding display</p> <ul> <li><code>enc_1_touch</code> through <code>enc_8_touch</code>, <code>enc_master_touch</code>, <code>enc_swing_touch</code>, <code>enc_tempo_touch</code> - the encoders are touch sensitive and work with zcx gestures</li> <li><code>select_1</code> through <code>select_8</code> - the top row of buttons below the display</li> <li><code>state_1</code> through <code>state_8</code> - the bottom row of buttons below the display</li> </ul> <p>Right side</p> <ul> <li><code>master</code> - the button labelled <code>master</code></li> <li><code>stop</code> - the button labelled <code>stop</code></li> <li><code>scene_1</code> through <code>scene_8</code> - the scene launch buttons</li> <li><code>volume</code> - the button labelled <code>volume</code></li> <li><code>track</code> - the button labelled <code>track</code></li> <li><code>device</code> - the button labelled <code>device</code></li> <li><code>pan_send</code> - the button labelled <code>pan &amp; send</code></li> <li><code>clip</code> - the button labelled <code>clip</code></li> <li><code>browse</code> - the button labelled <code>browse</code></li> <li><code>in</code> - the button with the \u27a1\ufe0f symbol</li> <li><code>out</code> - the button with the \u2b05\ufe0f symbol</li> <li><code>mute</code> - the button labelled <code>mute</code></li> <li><code>solo</code> - the button labelled <code>solo</code></li> <li><code>scales</code> - the button labelled <code>scales</code></li> <li><code>repeat</code> - the button labelled <code>repeat</code></li> <li><code>accent</code> - the button labelled <code>accent</code></li> <li><code>octave_up</code> - the button labelled <code>octave up</code></li> <li><code>octave_down</code> - the button labelled <code>octave down</code></li> <li><code>add_effect</code> - the button labelled <code>add effect</code></li> <li><code>add_track</code> - the button labelled <code>add track</code></li> <li><code>note</code> - the button labelled <code>note</code></li> <li><code>session</code> - the button labelled <code>session</code></li> <li><code>select</code> - the button labelled <code>select</code></li> <li><code>shift</code> - the button labelled <code>shift</code></li> <li><code>dpad_up</code>, <code>dpad_right</code>, <code>dpad_left</code> and <code>dpad_down</code> - the arrow buttons</li> </ul>"},{"location":"reference/hardware/push-1/#encoders","title":"encoders","text":"<p>These are the names you must use in encoders.yaml</p> <ul> <li><code>enc_1</code> through <code>enc_8</code> - the eight encoders above the display</li> <li><code>enc_master</code> - the encoder to the right of <code>enc_8</code></li> <li><code>tempo</code> - the encoder above the <code>undo</code> button</li> <li><code>swing</code> - the encoder above the touchstrip</li> </ul>"},{"location":"reference/hardware/push-2/","title":"Push 2","text":""},{"location":"reference/hardware/push-2/#limitations","title":"Limitations","text":""},{"location":"reference/hardware/push-2/#display","title":"Display","text":"<p>zcx will not make any use of Push 2's display. However, it is possible to keep the default display function active in zcx mode. If the preference initial_hw_mode is set to <code>zcx</code>, when zcx loads the screen will stay active. However, if you enter Live mode, and then use Push 2's <code>User</code> button to re-enter zcx mode, the display will be disabled. If instead, you re-enter zcx mode via the zcx user action, the screen will stay active.</p> <p>Because of this confusing behaviour, <code>initial_hw_mode</code> defaults to <code>live</code>.</p>"},{"location":"reference/hardware/push-2/#other","title":"Other","text":"<ul> <li>The touchstrip continuous input cannot be used by zcx, but will function as normal if <code>track</code> is enabled for this script in Live's MIDI preferences. The touchstrip sends an on/off message on press and release, which is available as a named control called <code>touchstrip</code>.</li> <li>The touchstrip cannot be toggled between pitchbend and modulation mode from within zcx. You must enter Live mode and press the touchstrip while holding <code>select</code>.</li> </ul>"},{"location":"reference/hardware/push-2/#control-names","title":"control names","text":""},{"location":"reference/hardware/push-2/#buttons","title":"buttons","text":"<p>These are the names you must use in named_controls.yaml</p> <p>Left side</p> <ul> <li><code>tap_tempo</code> - the button labelled <code>tap tempo</code></li> <li><code>metronome</code> - the button labelled <code>metronome</code></li> <li><code>delete</code> - the button labelled <code>delete</code></li> <li><code>undo</code> - the button labelled <code>undo</code></li> <li><code>double</code> - the button labelled <code>double</code></li> <li><code>mute</code> - the button labelled <code>mute</code></li> <li><code>solo</code> - the button labelled <code>solo</code></li> <li><code>stop_clip</code> - the button labelled <code>stop clip</code></li> <li><code>convert</code> - the button labelled <code>convert</code></li> <li><code>double_loop</code> - the button labelled <code>double loop</code></li> <li><code>quantize</code> - the button labelled <code>quantize</code></li> <li><code>duplicate</code> - the button labelled <code>duplicate</code></li> <li><code>new</code> - the button labelled <code>new</code></li> <li><code>fixed_length</code> - the button labelled <code>fixed length</code></li> <li><code>automate</code> - the button labelled <code>automate</code></li> <li><code>record</code> - the button with the  \u23fa\ufe0f symbol</li> <li><code>play</code> - the button with the  \u25b6\ufe0f symbol</li> <li><code>touchstrip</code> - the press/release status of the touchstrip</li> </ul> <p>Surrounding display</p> <ul> <li><code>enc_1_touch</code> through <code>enc_8_touch</code>, <code>enc_swing_touch</code>, <code>enc_tempo_touch</code>, <code>enc_master_touch</code> - the encoders at the top of Push 2 are touch sensitive and work with zcx gestures.</li> <li><code>state_1</code> through <code>state_8</code> - the row of buttons above the display</li> <li><code>select_1</code> through <code>select_8</code> - the row of buttons below the display</li> </ul> <p>Right side</p> <ul> <li><code>add_device</code> - the button labelled <code>add device</code></li> <li><code>add_track</code> - the button labelled <code>add track</code></li> <li><code>device</code> - the button labelled <code>device</code></li> <li><code>mix</code> - the button labelled <code>mix</code></li> <li><code>browse</code> - the button labelled <code>browse</code></li> <li><code>clip</code> - the button labelled <code>clip</code></li> <li><code>master</code> - the button labelled <code>master</code></li> <li><code>scene_1</code> through <code>scene_8</code> - the scene launch buttons</li> <li><code>dpad_up</code>, <code>dpad_right</code>, <code>dpad_left</code> and <code>dpad_down</code> - the unlabelled arrow buttons</li> <li><code>repeat</code> - the button labelled <code>repeat</code></li> <li><code>accent</code> - the button labelled <code>accent</code></li> <li><code>scales</code> - the button labelled <code>scale</code></li> <li><code>layout</code> - the button labelled <code>layout</code></li> <li><code>note</code> - the button labelled <code>note</code></li> <li><code>session</code> - the button labelled <code>session</code></li> <li><code>octave_up</code> - the button labelled <code>octave up \u2303</code></li> <li><code>octave_down</code> - the button labelled <code>octave \u2304</code></li> <li><code>page_prev</code> - the button labelled <code>page \u02c2</code></li> <li> <p><code>page_next</code> - the button labelled <code>page \u02c3</code></p> </li> <li> <p><code>shift</code> - the button labelled <code>shift</code></p> </li> <li><code>select</code> - the button labelled <code>select</code></li> </ul>"},{"location":"reference/hardware/push-2/#encoders","title":"encoders","text":"<p>These are the names you must use in encoders.yaml</p> <ul> <li><code>enc_1</code> through <code>enc_8</code> - the eight encoders above the display</li> <li><code>enc_master</code> - the encoder in the top right corner</li> <li><code>tempo</code> - the encoder above the <code>tap tempo</code> button</li> <li><code>swing</code> - the encoder above the <code>metronome</code> button</li> </ul>"},{"location":"reference/hardware/touch-osc/","title":"TouchOSC","text":""},{"location":"reference/hardware/touch-osc/#limitations","title":"Limitations","text":"<ul> <li>Due to limited color support, session view and the control types track and ring_track are not supported.</li> </ul>"},{"location":"reference/hardware/touch-osc/#color-support","title":"Color support","text":"<p>When using the demo layout, colors should be specified from 0 to 127, which will result in monochrome feedback from darkest to brightest. It may be possible to create a layout with better color support, but that is beyond the scope of these docs. Animated colors are not supported at all.</p>"},{"location":"resources/matrix-gen/","title":"Matrix section config generator","text":"<p>You can use this tool to generate a 'skeleton' config for a matrix section, with helpful comments denoting the row and column of each item.</p> <p>Enter your desired height and width for the section, and this tool will generate the appropriate yaml structure for these dimensions. Click the  button in the top-right corner of the output field to copy to your clipboard, and paste into your code editor.</p>"},{"location":"resources/matrix-gen/#output","title":"Output","text":"<pre><code>your yaml will appear here\n</code></pre>"}]}