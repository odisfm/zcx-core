{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"zcx-core","text":"<p>Extending ClyphX Pro from NativeKontrol, zcx turns the user mode of your matrix-equipped MIDI controller into a deeply customisable interface for Ableton Live. It offers an alternative configuration system that makes heavy use of yaml files and templating to allow rapid prototyping of new ideas. It aims to enable musicians to program more ambitious controller setups with less work than it took before.</p> <p>documentation </p> <p>download </p> <p>discord </p>"},{"location":"#hardware","title":"hardware","text":"<p>zcx is currently maintained for these devices, with more planned:</p> <ul> <li>Ableton Push 1</li> <li>Ableton Push 2</li> <li>Akai APC mini mk2</li> <li>Novation Launchpad X</li> <li>Novation Launchpad Pro mk3</li> <li>Novation Launchpad Mini mk3</li> <li>generic controllers</li> </ul> <p>If your device isn't here </p>"},{"location":"#features","title":"features","text":"<p>zcx scripts contain many features that are impractical or impossible to replicate natively in ClyphX Pro</p>"},{"location":"#built-for-modes","title":"built for modes","text":"<p>Easily define any control as a modifier for any other control.</p> <p><pre><code>record:\n  color: red\n  gestures:\n    pressed: SEL / ARM ON\n    pressed__shift: SEL / STOP\n    pressed_delayed: SREC  8\n    pressed_delayed__shift: SREC 16\n    pressed__shift__select: SETSTOP\n\nshift:\n  gestures:\n    pressed:\n      mode_on: shift\n    released:\n      mode_off: shift\n\nselect:\n  gestures:\n    pressed:\n      mode_on: select\n    released:\n      mode_off: select\n</code></pre> <sup>see how</sup></p>"},{"location":"#unlimited-pages","title":"unlimited pages","text":"<p>Turn an 8x8 matrix into an 8\u00d78\u00d7\u221e matrix.</p> <p><pre><code># matrix_sections.yaml\n\nhome_row:\n  col_start: 0\n  col_end: 7\n  row_start: 0\n  row_end: 1\n\n# pages.yaml\n\npages:\n  main:\n    - home_row\n    - main_left\n    - main_right\n  track_page:\n    - home_row\n    - track_control\n    - device_control\n  drums:\n    - home_row\n    - drums_section\n</code></pre> <sup>see how</sup></p>"},{"location":"#rapid-configuration","title":"rapid configuration","text":"<p>Configure dozens of buttons in seconds.</p> <pre><code># matrix_sections.yaml\n\nclip_section:\n  col_start: 0\n  col_end: 7\n  row_start: 0\n  row_end: 7\n\n# matrix_sections/clip_section.yaml\n\ncolor:\n  palette: nebula\ngestures:\n  pressed: SEL / PLAY ${me.Index}\n</code></pre> <pre><code>pad 1: SEL / PLAY 1\npad 2: SEL / PLAY 2\n..\npad 64: SEL / PLAY 64\n</code></pre> <p><sup>see how</sup></p>"},{"location":"#deeper-customisation","title":"deeper customisation","text":"<p>Unlock the full capabilities of your hardware.</p> <p><pre><code>play:\n  color:\n    pulse:\n      a: red\n      b: purple\n      speed: 1\n  gestures:\n    double_clicked: STOPALL NQ\n</code></pre> <sup>see how</sup></p>"},{"location":"#intelligent-controls","title":"intelligent controls","text":"<p>Specialised control types give smart LED feedback without you writing any code.</p> <pre><code>__state_row:\n  includes: [\n    state_1, state_2, state_3, state_4\n  ]\n  type: page\n  page: ${me.index}\n  gestures:\n    pressed:\n      page: ${me.index}\n\nplay:\n  type: transport\n  transport: play\n  gestures:\n    pressed: SETPLAY\n</code></pre> <p><sup>see how</sup></p>"},{"location":"#reusable-definitions","title":"reusable definitions","text":"<p>Use templates instead of repeating definitions. Make a change in one place to see the differences across the whole control surface. <pre><code># control_templates.yaml\n\nmy_green_button:\n  color: green\n\nhold_warning:\n  gestures:\n    released_immediately:\n      msg: You must hold this control to trigger it!\n\n\n# named_controls.yaml\n\nscene_1:\n  template: [hold_warning, my_green_button]\n  #color: green\n  gestures:\n    pressed_delayed: SCENE 1\n    #released_immediately:\n      # msg: You must hold this control to trigger it!\n</code></pre></p> <p><sup>see how</sup></p>"},{"location":"#id-like-to-read-that-again","title":"I'd like to read that again!","text":""},{"location":"docs/","title":"zcx core documentation","text":"<p>Welcome to the documentation for zcx.</p> <p>If you're brand new to zcx, check out the getting started tutorial, or see frequently asked questions.</p> <p>Watch out</p> <p>zcx is in beta, and so are these docs. Information here may be incorrect or missing.</p> <p>If you think you've found an error in these docs or a problem with zcx, please report a bug. Alternatively, reach out on Discord.</p>"},{"location":"docs/#important-guides","title":"Important guides","text":"<ul> <li>zcx concepts</li> <li>control reference</li> <li>command reference</li> </ul>"},{"location":"docs/#navigating-this-site","title":"Navigating this site","text":""},{"location":"docs/#on-desktop","title":"On desktop","text":"<p>The navigation menu on the left lets you move between different sections of the manual. </p> <p>The table of contents on the right lets you quickly jump between headings on the current page.</p> <p>Both of these menus are \"scrollable\" if they are too tall to fit on screen. If your browser window is narrow, one or both sidebars will disappear. In this case you can use the  button to navigate the site. You can also 'zoom out' your browser window to keep both menus open at smaller screen sizes.</p>"},{"location":"docs/#on-mobile","title":"On mobile","text":"<p>The  icon in the top-left of your screen brings up a sidebar menu which lets you navigate the manual.</p>"},{"location":"docs/#searching","title":"Searching","text":"<p>Use the  search bar at the top of this site to find your search term anywhere on this site.</p>"},{"location":"docs/#lightdark-theme","title":"Light/dark theme","text":"<p>Use the  button at the top of this site to switch the theme between light and dark.</p>"},{"location":"faq/","title":"frequently asked questions","text":""},{"location":"faq/#whats-all-this-then","title":"What's all this then?","text":"<p>Have a look at the about page, or check out the source on GitHub.</p>"},{"location":"faq/#what-do-i-need-to-use-zcx","title":"What do I need to use zcx?","text":"<ul> <li>Ableton Live 12.1 or above <sup>why?</sup></li> <li>ClyphX Pro</li> <li>Supported hardware</li> <li>A heart full of dreams</li> </ul>"},{"location":"faq/#does-zcx-change-the-default-functionality-of-my-control-surface","title":"Does zcx change the default functionality of my control surface","text":"<p>For most zcx-enabled controllers, there are two modes: Live mode, which is the default control surface script, and user mode, designed for custom mapping, or scripts like zcx.</p> <p>zcx only works on the user mode of your controller. This means that the default functionality of your controller is unaffected. You may use the default script and zcx simultaneously on one controller, switching between modes with the controller's <code>User</code> button. Doing so requires two control surface slots; one for each script. If you don't want to use the default functionality, you can unassign the default script.</p>"},{"location":"faq/#do-i-need-to-be-a-coder-to-use-zcx","title":"Do I need to be a coder to use zcx?","text":"<p>No programming knowledge is necessary to configure zcx. zcx configurations do make extensive use of a format called yaml, but it's pretty easy to pick up.</p> <p>See also: reading zcx configurations.</p>"},{"location":"faq/#what-hardware-is-zcx-available-for","title":"What hardware is zcx available for?","text":"<p>See here.</p>"},{"location":"faq/#does-zcx-replace-clyphx-pro","title":"Does zcx replace ClyphX Pro?","text":"<p>Nope. zcx provides a way to interact with ClyphX Pro that greatly expands your possibilities for performing with hardware controllers.</p>"},{"location":"faq/#does-zcx-replace-x-controls-and-g-controls","title":"Does zcx replace X-controls and G-controls","text":"<p>That's up to you. zcx can be used to create a far more complex interface than is practical with native ClyphX Pro. However, that power comes with a learning curve. Only you can decide whether this tradeoff is worth it.</p> <p>Note: You can absolutely use X/G Controls alongside a zcx script. It is recommended that you use zcx for any matrix controllers, and native ClyphX Pro controls for non-matrix controllers.</p>"},{"location":"faq/#can-i-use-zcx-with-a-non-matrix-controller","title":"Can I use zcx with a non-matrix controller?","text":"<p>zcx is designed for matrix-equipped controllers. You could make a port for your hardware, and just not use the matrix features. That's up to you. Remember: each zcx script requires its own control surface slot.</p>"},{"location":"faq/#is-there-a-discord","title":"Is there a Discord?","text":"<p>But of course. </p>"},{"location":"faq/#how-can-i-contribute","title":"How can I contribute?","text":"<p>See <code>#contributing</code> in the Discord.</p>"},{"location":"faq/#what-does-zcx-stand-for","title":"What does 'zcx' stand for?","text":"<p>Zreally Cool Xthingo</p>"},{"location":"help/","title":"Help!","text":"<p>If you've been directed to this page, you've likely experienced a fatal error while loading a zcx script.</p> <p>This website has detailed instructions on configuring your zcx script. If you're new to zcx, have a read of the getting started tutorial.</p> <p>If you need more help, drop a question in the <code>#help</code> channel of the zcx Discord server.</p> <p>If you think you've found a bug, please raise an issue on GitHub.</p>"},{"location":"dev/build/","title":"Building zcx from source","text":"<p>If you would like to contribute to zcx-core, you will need to use the build script to consolidate all necessary files into a folder in your Live <code>Remote Scripts</code> directory.</p> <p>Warning</p> <p>This lesson is only intended for developers. To use zcx, see getting started.</p>"},{"location":"dev/build/#instructions","title":"Instructions","text":""},{"location":"dev/build/#clone-the-repo","title":"Clone the repo","text":"<p>Clone the repo from GitHub to a convenient location on your computer.</p>"},{"location":"dev/build/#install-vendored-dependencies","title":"Install vendored dependencies","text":"<p>zcx bundles several packages with each install. These dependencies must be installed in the folder <code>zcx-core/app/vendor</code>. For Mac/Linux users, a simple script is provided at <code>zcx-core/tools/install_dependencies.sh</code> to install the packages (via pip) to the correct location.</p> <p>Note: these packages must be located in the <code>vendor/</code> directory.</p>"},{"location":"dev/build/#install-watchdog","title":"Install watchdog","text":"<p>You will need to install watchdog in your Python environment to monitor the codebase for changes.</p>"},{"location":"dev/build/#run-the-script","title":"Run the script","text":"<p>From the project root, run:</p> <p><code>python tools/build.py &lt;hardware name&gt; &lt;destination folder name&gt;</code></p> <p>Where <code>&lt;hardware name&gt;</code> is the name of a folder in <code>zcx-core/hardware</code>, e.g. <code>push_1</code> and <code>&lt;desintation folder name&gt;</code> is a name of your choice, e.g. <code>my_zcx_script</code>.</p>"},{"location":"dev/build/#extra-arguments","title":"Extra arguments","text":""},{"location":"dev/build/#-custom-config","title":"--custom-config","text":"<p>Provide the path to a folder that will be copied into the destination instead of the <code>demo_config</code> folder.</p>"},{"location":"dev/build/#-user-library","title":"--user-library","text":"<p>By default the script will determine the default path to your Live User Library depending on your operating system. If you use a non-default location for your User Library, you will need to provide the path as an argument.</p>"},{"location":"dev/contributing/","title":"Contributing to zcx","text":""},{"location":"dev/contributing/#get-started","title":"get started","text":"<p>Before getting started, you should join the Discord and ping <code>@odis</code>. This helps us to co-ordinate our efforts.</p>"},{"location":"dev/contributing/#help-needed","title":"help needed","text":""},{"location":"dev/contributing/#porting-zcx-to-more-controllers","title":"porting zcx to more controllers","text":"<p>By making a port, you can help bring zcx to more controllers (and more people). For the most part, this involves creating the yaml specification files for your hardware, and performing tests.</p> <p>See the porting guide for details.</p>"},{"location":"dev/contributing/#contributing-to-the-core","title":"contributing to the 'core'","text":"<p>This is the code that is common to all zcx installations, regardless of hardware. There are two ways to do this:</p>"},{"location":"dev/contributing/#fixing-issues","title":"fixing issues","text":"<p>Take a look at the issues page on GitHub to see current issues. You can filter by the label good first issue.</p> <p>And of course, if you've found a new issue, don't hesitate to report it.</p>"},{"location":"dev/contributing/#adding-features","title":"adding features","text":"<p>We are always happy to hear feature requests. Before starting work, we strongly recommend discussing it on Discord first.</p>"},{"location":"dev/dependencies/","title":"Dependencies","text":""},{"location":"dev/dependencies/#vendored-packages","title":"Vendored packages","text":"<p>These packages are bundled with each download of zcx. See here for installation instructions.</p>"},{"location":"dev/dependencies/#pyyaml","title":"PyYAML","text":"<p>Used wherever YAML files are interacted with.</p> <p>link</p>"},{"location":"dev/dependencies/#asteval","title":"asteval","text":"<p>Used to interpret user-provided Python expressions. <sup>see why</sup></p> <p>link</p>"},{"location":"dev/dependencies/#requests","title":"requests","text":"<p>Used only by the upgrade script for facilitating requests to GitHub.</p> <p>link</p>"},{"location":"dev/dependencies/#semver","title":"semver","text":"<p>Used only by the upgrade script for comparing Semantic Versioning precedence between versions.</p> <p>link</p>"},{"location":"dev/dependencies/#development-dependencies","title":"Development dependencies","text":""},{"location":"dev/dependencies/#watchdog","title":"Watchdog","text":"<p>Used by the build script to watch for code changes.</p> <p>link</p>"},{"location":"dev/dependencies/#documentation","title":"Documentation","text":"<p>The following packages are only necessary if you want to build the documentation locally.</p>"},{"location":"dev/dependencies/#mkdocs","title":"mkdocs","text":"<p>Static site generator powering this documentation.</p> <p>link</p>"},{"location":"dev/dependencies/#mkdocs-plugins","title":"mkdocs plugins","text":"<ul> <li>mkdocs-material</li> <li>mkdocs-awesome-nav</li> <li>mkdocs-nav-weight</li> <li>mkdocs-open-in-new-tab</li> </ul>"},{"location":"lessons/double_clicked/","title":"understanding the double_clicked gesture","text":"<p>The <code>double_clicked</code> gesture is cool, but it behaves somewhat peculiarly.</p>"},{"location":"lessons/double_clicked/#the-problem","title":"the problem","text":"<p>To perform a double tap, you perform the following actions in quick succession:</p> <ul> <li>press the control</li> <li>release the control</li> <li>press the control again</li> <li>release the control again (the double click)</li> </ul> <p>If we take this control definition:</p> <pre><code>my_control:\n  gestures:\n    pressed:\n      log: pressed\n    released:\n      log: released\n    double_clicked:\n      log: double_clicked\n</code></pre> <p>After a double tap, the log would read:</p> <pre><code>pressed\nreleased\npressed\nreleased\ndouble_clicked\n</code></pre> <p>This behaviour means the use case you imagined for the double tap might not be possible.</p>"},{"location":"lessons/double_clicked/#interesting-uses","title":"interesting uses","text":""},{"location":"lessons/double_clicked/#compatible-gestures","title":"compatible gestures","text":"<p><code>pressed_delayed</code> and <code>double_clicked</code> are mutually exclusive, so you can make use of either of them without triggering the other.</p> <pre><code>my_control:\n  gestures:\n    pressed_delayed: SETPLAY\n    double_clicked: SETSTOP\n</code></pre>"},{"location":"lessons/double_clicked/#compatible-actions","title":"compatible actions","text":"<p>With clever design, you can find a combination of actions that complement each other:</p> <pre><code>my_control:\n  gestures:\n    pressed: &gt;\n      \"my track\" / SEL\n    pressed_delayed: &gt;\n      \"my track\" / MUTE\n    double_clicked: &gt;\n      \"my track\" / PLAY\n</code></pre> <p>We can use a single press to select <code>my track</code>, and optionally execute one of two additional actions depending on the gesture. For our purposes, there is no harm in selecting <code>my track</code> once or twice before performing the alternative actions.</p>"},{"location":"lessons/osc-output/","title":"OSC output from zcx","text":"<p>zcx will send Open Sound Control (OSC) messages on certain events. This may be useful for interfacing with other systems, such as TouchOSC.</p>"},{"location":"lessons/osc-output/#configuring-the-osc-server","title":"Configuring the OSC server","text":"<p>zcx uses the existing OSC server provided by ClyphX Pro. Thus, to configure the server, you must modify the ClyphX Pro configuration file <code>Preferences.txt</code>.</p> <p>Near the bottom of this file, under the label <code>OSC SETTINGS</code>, you should have a line like:</p> <p><code>INCOMING_OSC_PORT = 7005</code></p> <p>You must add two lines below this line:</p> Preferences.txt<pre><code>*** [OSC SETTINGS] ***\n\nINCOMING_OSC_PORT = 7005\nOUTGOING_OSC_PORT = 7000\nOSC_DEVICE_IP_ADDRESS = 127.0.0.1\n</code></pre> <p>Warning</p> <p>The above settings are an example only; they will need to be set according to your network and situation.</p>"},{"location":"lessons/osc-output/#configuring-what-information-is-sent","title":"Configuring what information is sent","text":"<p>By default, all the data listed in available outputs is sent. You can disable some (or all) of these outputs via the zcx file preferences.yaml.</p>"},{"location":"lessons/osc-output/#osc-namespace","title":"OSC namespace","text":"<p>An OSC message sent from zcx will use an address like this:</p> <p><code>zcx/zcx_push_1/enc/enc_1/value</code></p> <p>The first part, <code>zcx</code>, indicates that the message comes from a zcx script, which is useful when using an external tool to route messages.</p> <p>The second part, <code>zcx_push_1</code>, is the name of the particular zcx script sending the message. This is useful when using multiple zcx scripts simultaneously, as it allows you to route messages per-script.</p> <p>One such routing tool is OSCRouter from ETC Labs.</p>"},{"location":"lessons/osc-output/#available-outputs","title":"Available outputs","text":""},{"location":"lessons/osc-output/#encoder-mappings","title":"Encoder mappings","text":"<p>For encoders, zcx will send the name of the mapped parameter, as well as the value as several datatypes. You may configure the datatypes sent in preferences.yaml.</p>"},{"location":"lessons/osc-output/#name","title":"name","text":"<p>The name of the mapped parameter, as it appears in the Live UI:</p> <p>Address: <code>zcx/&lt;script name&gt;/enc/&lt;encoder name&gt;/name</code></p> <p>Value: string</p>"},{"location":"lessons/osc-output/#value","title":"value","text":"<p>The value of the mapped parameter, as it appears in the Live UI:</p> <p>Address: <code>zcx/&lt;script name&gt;/enc/&lt;encoder name&gt;/value</code></p> <p>Value: string</p>"},{"location":"lessons/osc-output/#int","title":"int","text":"<p>The value of the mapped parameter, as an integer between 0-127:</p> <p>Address: <code>zcx/&lt;script name&gt;/enc/&lt;encoder name&gt;/int</code></p> <p>Value: int</p>"},{"location":"lessons/osc-output/#float","title":"float","text":"<p>The value of the mapped parameter, as a float between 0.0-1.0:</p> <p>Address: <code>zcx/&lt;script name&gt;/enc/&lt;encoder name&gt;/float</code></p> <p>Value: float</p>"},{"location":"lessons/osc-output/#page-changes","title":"Page changes","text":"<p>zcx will send messages when the page is changed.</p>"},{"location":"lessons/osc-output/#page-number","title":"page number","text":"<p>Address: <code>zcx/&lt;script name&gt;/page/number/&lt;current page number&gt;</code></p> <p>Value: int</p>"},{"location":"lessons/osc-output/#page-name","title":"page name","text":"<p>Address: <code>zcx/&lt;script name&gt;/page/name/&lt;current page name&gt;</code></p> <p>Value: string</p>"},{"location":"lessons/osc-output/#session-ring","title":"session ring","text":"<p>zcx will send messages relating to the session ring.</p>"},{"location":"lessons/osc-output/#ring-tracks","title":"ring tracks","text":"<p>When the ring moves horizontally, zcx will send one message for each column (track) of the ring:</p> <p>Address: <code>zcx/&lt;script name&gt;/ring/track/&lt;index&gt;/&lt;track name&gt;</code></p> <p>Value: string</p>"},{"location":"lessons/osc-output/#ring-coordinates","title":"ring coordinates","text":"<p>When the ring moves, zcx will send the x (track) and y (scene) positions of the top-left corner of the ring:</p> <p>Address: <code>zcx/&lt;script name&gt;/ring/pos_x/&lt;x position&gt;</code> and <code>zcx/&lt;script name&gt;/ring/pos_y/&lt;y position&gt;</code></p> <p>Value: int</p>"},{"location":"lessons/porting/","title":"Porting zcx to new hardware","text":"<p>zcx has full support for a limited set of MIDI controllers. If your controller is not one of those supported, it is relatively easy to create a 'port' for your hardware</p> <p>Getting help</p> <p>If you get stuck, feel free to reach out on the Discord for help.</p> <p>Making your port available to others</p> <p>If you'd like to make your port available to all users of zcx, have a look at the contributing guide and reach out in the Discord before getting started.</p>"},{"location":"lessons/porting/#download-the-generic-build","title":"Download the generic build","text":"<p>Head over to the latest release and download the file <code>_zcx_generic.zip</code>. Follow the standard instructions for installation.</p>"},{"location":"lessons/porting/#optional-rename-the-folder","title":"Optional: rename the folder","text":"<p>The folder can be named whatever you like. This helps to stay organised.</p>"},{"location":"lessons/porting/#open-the-folder-in-your-code-editor","title":"Open the folder in your code editor","text":"<p>I.e. <code>_zcx_generic</code>, or whatever you've renamed it to. This allows you to see all the relevant files at once.</p> <p>If you don't have a code editor, Microsoft Visual Studio Code is a good option.</p>"},{"location":"lessons/porting/#edit-the-specification-files","title":"Edit the specification files","text":"<p>These are the files that tell zcx what MIDI messages to expect from your hardware, as well as what they should be named. We'll go through each file.</p>"},{"location":"lessons/porting/#specsyaml","title":"specs.yaml","text":"<p>Here we define settings that apply across the controller.</p>"},{"location":"lessons/porting/#global_midi_channel","title":"global_midi_channel","text":"<pre><code>global_midi_channel: 0\n</code></pre> <p>Most modern controllers send all messages on one channel: channel 1. In this file we use zero-indexed values, so the default of <code>0</code> should be fine.</p>"},{"location":"lessons/porting/#button_matrix","title":"button_matrix","text":"specs.yaml<pre><code>button_matrix:\n  msg_type: note\n  id_start: 0\n  id_end: 63\n#  raw_identifiers: [\n#    [ 81, 82, 83, 84, 85, 86, 87, 88 ],\n#    [ 71, 72, 73, 74, 75, 76, 77, 78 ],\n#    [ 61, 62, 63, 64, 65, 66, 67, 68 ],\n#    [ 51, 52, 53, 54, 55, 56, 57, 58 ],\n#    [ 41, 42, 43, 44, 45, 46, 47, 48 ],\n#    [ 31, 32, 33, 34, 35, 36, 37, 38 ],\n#    [ 21, 22, 23, 24, 25, 26, 27, 28 ],\n#    [ 11, 12, 13, 14, 15, 16, 17, 18 ]\n#  ]\n  feedback: rgb\n  momentary: true\n  width: 8\n  playable: true\n</code></pre> <p>Here we define the specs of the button matrix.</p>"},{"location":"lessons/porting/#msg_type","title":"msg_type","text":"<p>Either <code>note</code> or <code>cc</code>.</p>"},{"location":"lessons/porting/#matrix-ids","title":"matrix IDs","text":"<p>Here we define the note or CC numbers that the matrix sends. Most controllers have a contiguous matrix; if the matrix has 64 buttons, they are all in order with no gaps.  The Ableton Push works like this \u2014 it sends notes 36 through 99. In this case, we can set <code>id_start: 36</code> and <code>id_end: 99</code>.</p> <p>Other controllers, like the Launchpad, have 'gaps' in the matrix. In this case, comment out (or delete) <code>id_start</code> and <code>id_end</code>, and un-comment <code>raw_identifiers</code>. This is a list of lists, where each inner list item is the note or CC number sent for that pad.</p> <p>When looking at <code>raw_identifiers</code>, the layout you see is how the controller looks from the user's perspective: in this example the top-left pad sends ID 81, and the bottom-right pad sends ID 18.</p>"},{"location":"lessons/porting/#feedback","title":"feedback","text":"<p>Here we define what type of feedback the controller uses, either <code>rgb</code>, <code>biled</code>, or <code>basic</code> (on or off). Modern controllers will use <code>rgb</code> feedback.</p>"},{"location":"lessons/porting/#momentary","title":"momentary","text":"<p>Modern controllers will have momentary buttons, so we can leave this as <code>true</code>.</p>"},{"location":"lessons/porting/#width","title":"width","text":"<p>Here we define the number of vertical columns in the matrix.</p>"},{"location":"lessons/porting/#playable","title":"playable","text":"<p>Leave this as <code>true</code>.</p>"},{"location":"lessons/porting/#cc_buttons-note_buttons","title":"cc_buttons, note_buttons","text":"specs.yaml<pre><code>cc_buttons:\n#  channel: 0\n  momentary: true\n  feedback: rgb\n\nnote_buttons:\n#  channel: 0\n  momentary: true\n  feedback: rgb\n</code></pre> <p>These settings work the same way as in <code>specs.yaml</code>. Set the values that apply to the majority of the controller's buttons. We can override individual buttons later.</p>"},{"location":"lessons/porting/#encoders","title":"encoders","text":"specs.yaml<pre><code>encoders:\n  sensitivity: 1.0\n  mode: RELATIVE_SMOOTH_TWO_COMPLIMENT\n</code></pre> <p>Here we define settings for the controllers encoders (knobs and/or faders). If your controller has neither, you can leave this section.</p>"},{"location":"lessons/porting/#sensitivity","title":"sensitivity","text":"<p>Define the default sensitivity for all encoders. In most cases the default of <code>1.0</code> is fine. Later, we can override the sensitivity of individual encoders.</p>"},{"location":"lessons/porting/#mode","title":"mode","text":"<p>This defines the specific type of message your hardware sends. Again, we can override specific encoders later, so choose the mode applicable to most controls.</p> <p>The available options are:</p> <pre><code>ABSOLUTE\nABSOLUTE_14_BIT             \nRELATIVE_SIGNED_BIT                     \nRELATIVE_SIGNED_BIT2\nRELATIVE_BINARY_OFFSET\nRELATIVE_TWO_COMPLIMENT          \nRELATIVE_SMOOTH_SIGNED_BIT          \nRELATIVE_SMOOTH_SIGNED_BIT2      \nRELATIVE_SMOOTH_BINARY_OFFSET         \nRELATIVE_SMOOTH_TWO_COMPLIMENT    \n</code></pre> <p>Capital letters are mandatory.</p> <p>For faders or knobs with a fixed start and end, use <code>ABSOLUTE</code>.</p> <p>For 'endless' knobs, you will have to consult the technical specs of your controller, or simply try different modes and see which feels best. The default, <code>RELATIVE_SMOOTH_TWO_COMPLIMENT</code> is a safe choice.</p>"},{"location":"lessons/porting/#feedback_1","title":"feedback","text":"<p><code>true</code> or <code>false</code>, depending on whether the encoders display visual feedback.</p>"},{"location":"lessons/porting/#preferences","title":"preferences","text":"<p>Here we define preferences that are specific to this controller. Other preferences should be left to the user.</p> <p>In most cases, the only thing that should be added here is <code>session_ring</code>:</p> specs.yaml<pre><code>session_ring:\n  width: 8\n  height: 8\n</code></pre> <p>Assuming an 8x8 matrix.</p>"},{"location":"lessons/porting/#cc_buttonsyaml-note_buttonsyaml","title":"cc_buttons.yaml, note_buttons.yaml","text":"<p>Here we define the CC or note number for every button on the controller. Yes, it's quite tedious.</p> <p>As you probably guessed, buttons that send CC are defined in <code>cc_buttons.yaml</code>, and note buttons in <code>note_buttons.yaml</code>.</p> <p>If your controller uses only one type, e.g. CC messages, you may delete <code>note_buttons.yaml</code>, and vice versa.</p> <p>Let's take a look at <code>cc_buttons.yaml</code>:</p> cc_buttons.yaml<pre><code>cc_button_placeholder:\n  cc: 127\n</code></pre> <p>It's quite simple: each entry is the name of this control (<code>cc_button_placeholder</code>), and we must provide another key (<code>cc</code> or <code>note</code>) that matches what this control sends.</p> <p>If this control deviates from the other controls, we can specify this:</p> cc_buttons.yaml<pre><code>cc_button_placeholder:\n  cc: 127\n  channel: 9\n  feedback: rgb\n</code></pre>"},{"location":"lessons/porting/#giving-good-names-to-controls","title":"giving good names to controls","text":"<p>The user will refer to these names in their named_controls.yaml, so it's important that the names you choose are intuitive.</p> <p>Here are some pointers:</p>"},{"location":"lessons/porting/#use-snake_case","title":"use snake_case","text":"<p>Control names should always be in lowercase. Controls that need multiple words to describe them should use snake_case, i.e. words should be separated by an underscore. <code>My Cool Control</code> would be <code>my_cool_control</code>.</p>"},{"location":"lessons/porting/#use-the-official-control-names","title":"use the official control names","text":"<p>If the control has a label printed on it, use that name. For example, the Push has a button labelled <code>Fixed Length</code>, so we would use the name <code>fixed_length</code>.</p> <p>For unlabelled controls, you can usually find the official name in the manufacturer's documentation.</p>"},{"location":"lessons/porting/#unless-theres-a-good-reason-not-to","title":"unless there's a good reason not to","text":"<p>The Push has a column of buttons that are used to launch scenes in Session View. These buttons are also used to control note repeat functionality, and are labelled <code>1/32t</code>, <code>1/32</code>, <code>1/16t</code>, etc.</p> <p>This is confusing, so it's better to use names like <code>scene_1</code>, <code>scene_2</code>, and so on.</p>"},{"location":"lessons/porting/#encodersyaml","title":"encoders.yaml","text":"<p>Just like <code>note_buttons.yaml</code> and <code>cc_buttons.yaml</code>, we create an entry for each encoder.</p> <p>You may provide overrides for any of the global options defined earlier.</p> <p>If your controller does not feature encoders, you may delete this file.</p>"},{"location":"lessons/porting/#sysexpy","title":"sysex.py","text":"<p>This file is only relevant for controllers with distinct 'Live' and 'user modes'. If your controller does not, you can skip this.</p> <p>Let's look at the <code>sysex.py</code> file for Push 1:</p> sysex.py<pre><code>LIVE_MODE = (240, 71, 127, 21, 98, 0, 1, 0, 247)\nUSER_MODE = (240, 71, 127, 21, 98, 0, 1, 1, 247)\nON_DISCONNECT = LIVE_MODE\nINIT_DELAY = 2000\n</code></pre> <p><code>LIVE_MODE</code> is the MIDI sysex sent upon entering 'Live' mode. <code>USER_MODE</code> is the sysex for user mode.</p> <p>It's particularly important to set <code>USER_MODE</code>, as this way zcx is aware of the mode switch, and can refresh all LED feedback.</p> <p>To determine the appropriate messages, you can use a MIDI monitor app like Protokol, and see what messages are sent when entering and exiting user mode.</p> <p>Protokol should display a message like:</p> <p><code>ENDPOINT(Ableton Push User Port) TYPE(SYSTEMEXCLUSIVE) DATA(F0477F1562000100F7)</code></p> <p>The <code>DATA</code> portion is what we're after, though it's displayed here in hexadecimal, and we need it in decimal. Please ask for help in the Discord if you're having trouble here.</p>"},{"location":"lessons/porting/#colorspy","title":"colors.py","text":"<p>This file determines how your controller responds to named colors and animated colors.</p> <p>The file provided in the generic release comes from the Push 1 release. The Push 1, Launchpad series, and APC Mini mk2 use a similar color mapping \u2014 hopefully your controller does too.</p> <p>If it doesn't, you can always specify colors by MIDI value in your config. If you'd like to try creating a custom <code>colors.py</code>, that is beyond the scope of this lesson, but reach out in the Discord for guidance.</p>"},{"location":"lessons/porting/#problematic-animations","title":"problematic animations","text":"<p>If, after pressing a control, the RGB feedback seems to 'glitch out', one workaround is to set a global control template with the option <code>suppress_animations: true</code>.</p>"},{"location":"lessons/porting/#notes","title":"notes","text":"<ul> <li>Do not edit <code>zcx.yaml</code>. Specifically, <code>hardware</code> must be left as <code>generic</code>. Changing this means the upgrade script will overwrite the contents of your hardware folder, and you'll have to do all this again.</li> </ul>"},{"location":"lessons/porting/#the-fun-begins","title":"the fun begins","text":"<p>Now that your controller is configured, see getting started for details on creating your user configuration.</p>"},{"location":"lessons/python-context/","title":"understanding the zcx python evaluation context","text":"<p>Whenever expressions are evaluated, or the python command is used, zcx will evaluate the code in a limited Python context.</p>"},{"location":"lessons/python-context/#why","title":"why?","text":"<p>This restriction is in place to safeguard zcx users against bad actors, who might distribute 'helpful' zcx configuration files that actually contain malicious code. Using this attack vector, an attacker could cause a lot of damage, like wiping you entire filesystem, or reading your sensitive files.</p>"},{"location":"lessons/python-context/#the-solution","title":"the solution","text":"<p>All user-supplied Python expressions are interpreted with the asteval library. asteval interprets your expressions with a limited context, which basically means that the most dangerous Python features are not available in this context. In particular, importing of modules is not allowed, and access to \"private\" attributes is prevented.</p>"},{"location":"lessons/python-context/#additional-restrictions","title":"additional restrictions","text":"<ul> <li>by default, <code>asteval</code> allows access to Python's open() method in read-only mode. This has been disallowed in zcx.</li> </ul>"},{"location":"lessons/python-context/#additional-symbols","title":"additional symbols","text":"<p>Several additional symbols are made available in template strings.</p>"},{"location":"lessons/reloading-control-surfaces/","title":"seeing changes in your zcx config","text":"<p>Any changes made to your zcx configuration will not be effective until the control surface script is reloaded. There are several ways to achieve this:</p>"},{"location":"lessons/reloading-control-surfaces/#reload-ableton-live","title":"reload ableton live \ud83d\ude21","text":"<p>Sucks to do, obviously. This should only be necessary if you are tinkering with the Python part of the script and screw things up (ask me how I know).</p>"},{"location":"lessons/reloading-control-surfaces/#reload-the-set","title":"reload the set \ud83d\ude12","text":"<p>cmd + S, then in the menu bar <code>File -&gt; Open Recent Set -&gt; &lt;my cool set&gt;.als</code>. Much better than reloading Live, but still sucks with heavier sets.</p>"},{"location":"lessons/reloading-control-surfaces/#manually-reload-zcx","title":"manually reload zcx \ud83d\ude0f","text":"<p>In Live's MIDI preferences, reassign the zcx slot to any other script, then select zcx again. Note: if a script throws too serious of an error, Live will not allow this script to be loaded until all control surface scripts are reloaded. The impacted zcx script will disappear from the dropdown. This probably won't happen, but since zcx is in beta it's not impossible.</p> <p>And if it does happen, it will require a full reload of Live, or...</p>"},{"location":"lessons/reloading-control-surfaces/#reload-all-scripts-at-will","title":"reload all scripts at will \ud83d\ude0e","text":"<p>If you have the Ableton 12 beta, you can enable a special <code>Tools</code> item in the menu bar. In this menu is an option to <code>Reload MIDI Remote Scripts</code>, which has a hotkey assigned. It's an awful hotkey, and you might want to reassign it with BetterTouchTool, AutoHotkey, etc. This will reload all scripts connected, including ClyphX Pro.</p> <p>Note: If you own a copy of Ableton 12, you are automatically eligible for the beta program.</p> <p>Here is a guide on getting the beta and enabling this menu.</p>"},{"location":"lessons/reporting-bugs/","title":"how to report a bug \ud83d\udc1e","text":"<p>If you've found a bug, or think you've found a bug, please don't hesitate to raise an issue.</p> <p>There are two good ways to do this:</p>"},{"location":"lessons/reporting-bugs/#create-an-issue-on-github","title":"create an issue on github","text":"<p>If you're comfortable with Github, head over to the zcx-core repo and create a new issue. We don't have any enforced format at the moment.</p>"},{"location":"lessons/reporting-bugs/#create-a-thread-on-discord","title":"create a thread on discord","text":"<p>Head over to the discord and create a new thread in <code>#bug-reports</code>.</p>"},{"location":"lessons/session-ring/","title":"Using the zcx session ring","text":"<p>Like other control surface scripts, zcx provides a 'session ring' \u2014 a colored box that can be moved around the session to target different tracks or scenes.</p> <p></p> <p>While zcx cannot display a representation of Live's session view (i.e., the session view on Push, Launchpad, and others), it is useful to be able to move the ring around the set, and use template strings to target tracks or refer to scenes enclosed within the ring.</p>"},{"location":"lessons/session-ring/#resizing-the-ring","title":"Resizing the ring","text":"<p>You may resize the session ring via preferences.yaml.</p>"},{"location":"lessons/session-ring/#disabling-the-ring","title":"Disabling the ring","text":"<p>You may disable the ring in preferences.yaml.</p>"},{"location":"lessons/session-ring/#moving-the-ring","title":"Moving the ring","text":"<p>A script's ring may be positioned with the ring command or the ClyphX Pro ring actions.</p>"},{"location":"lessons/session-ring/#clyphx-pro-control-surface-actions","title":"ClyphX Pro control surface actions","text":"<p>ClyphX Pro includes a variety of control surface actions, which can be used to interact with control surfaces. Many of these actions are compatible with zcx scripts.</p>"},{"location":"lessons/session-ring/#referencing-the-ring-from-template-strings","title":"Referencing the ring from template strings","text":"<p>You can use the built in <code>ring</code> variable within template expressions to perform actions on tracks or scenes at a certain position within the ring.</p> <p><code>ring</code> has two attributes: <code>tracks</code> and <code>scenes</code>. We can index into either and retrieve the name of the track at that position of the ring, or the zero-indexed scene number at that position of the ring.</p>"},{"location":"lessons/session-ring/#dynamic-scene-controls","title":"Dynamic scene controls","text":"<pre><code>__scene_controls:\n  includes: [\n    scene_1, scene_2, scene_3, scene_4, scene_5, scene_6, scene_7, scene_8\n  ]\n  gestures:\n    pressed: &gt;\n      SCENE ${ring.scenes[me.group_index] + 1}\n</code></pre> <p>Looking at the above screenshot, if <code>scene_1</code> was pressed the action list <code>SCENE 1</code> would be executed, launching scene one.</p> <p>If we move the ring down two scenes, pressing <code>scene_1</code> would trigger the action list <code>SCENE 3</code>. <code>scene_2</code> would do <code>SCENE 4</code>.</p>"},{"location":"lessons/session-ring/#dynamic-track-controls","title":"Dynamic track controls","text":"<pre><code>__state_controls:\n  includes: [\n    state_1, state_2, state_3, state_4, state_5, state_6, state_7, state_8\n  ]\n  gestures:\n    pressed: &gt;\n       \"${ring.tracks[me.group_index]}\" / MUTE\n</code></pre> <p>Looking at the above screenshot, if <code>state_1</code> was pressed, the action list <code>\"fx gtr 2\" / MUTE</code> would be executed.</p>"},{"location":"lessons/session-ring/#dynamic-encoder-mappings","title":"Dynamic encoder mappings","text":"<p>It is possible to map encoders to the parameter of a track at a certain position of the ring. See Encoder Reference for details.</p>"},{"location":"lessons/session-ring/#out-of-bounds-references","title":"Out of bounds references","text":"<p>It is often valid to refer to tracks or scenes outside of the session ring by using a negative index, or an index that is greater than or equal to the width and height of the ring. For example:</p> <ul> <li>Using <code>\"${ring.tracks[-1]}\" / MUTE</code> will mute the track one to the left of the left edge of the ring.</li> <li>Using <code>\"${ring.tracks[8]}\" / MUTE</code> on a 8-track ring will mute the track one to the right of the right edge of the ring.</li> <li>Using <code>\"SCENE ${ring.scenes[-8]}\"</code> while the top edge of the ring is at scene 9 will launch scene 1.</li> </ul>"},{"location":"lessons/touch-osc/","title":"Using TouchOSC as a zcx controller","text":"<p>TouchOSC from Hexler is a great app that lets you create a virtual MIDI controller which can be used on devices like tablets, phones, and touchscreen computers.</p> <p>It is possible to use a TouchOSC controller as the input to a zcx script. To do so, you will need to create a port, with specifications that match your TouchOSC layout.</p> <p>Note</p> <p>Instructions on creating a TouchOSC layout are outside the scope of this lesson. See the official documentation.</p>"},{"location":"lessons/touch-osc/#lives-control-surface-settings","title":"Live's control surface settings","text":"<p>Follow the official manual to establish a MIDI connection between Live and your TouchOSC device. Once set up, set <code>TouchOSC Bridge</code> as the input and output of your zcx script.</p>"},{"location":"lessons/touch-osc/#osc-output-from-zcx","title":"OSC output from zcx","text":"<p>zcx features OSC output. By following the TouchOSC manual, you can bring this information into TouchOSC.</p> <p>Note: OSC cannot be used as an input to zcx, only MIDI.</p>"},{"location":"lessons/touch-osc/#notes","title":"Notes","text":"<ul> <li>When using the TouchOSC Grid control to create a button matrix, you must set the <code>Start</code> property to <code>BOTTOM LEFT</code>.</li> <li>Feedback from zcx is designed to work with hardware controllers, and may produce unexpected results with TouchOSC. One workaround is to set a global control template with the option <code>suppress_animations: true</code>.</li> </ul>"},{"location":"lessons/upgrade/","title":"upgrading your zcx installation","text":"<p>To get access to the latest features and bugfixes, you should keep your zcx installation(s) up to date. If you use multiple zcx installations (for different controllers), you need to upgrade each install separately.</p> <p>Danger</p> <p></p> <p>zcx is pre v1. This means it's very likely a new version will have breaking changes. 'Breaking changes' basically means that if you upgrade, your old config might rely on features that work differently now. You may even have to move, rename, or delete certain files to make your old config compatible.</p> <p>To see if you are affected by any breaking changes, read the releases page on GitHub.</p>"},{"location":"lessons/upgrade/#automatic-upgrade","title":"automatic upgrade","text":"<p>Starting from v0.5, you can use the Python script <code>upgrade.py</code> to get the latest release from GitHub.</p> <p>This script will:</p> <ul> <li>backup your existing installation to <code>Remote Scripts/__zcx_backups__</code></li> <li>Download the newest release</li> <li>Replace all application code with the newest version</li> <li>Restore your configuration files</li> <li>Install or upgrade the zcx user action.</li> </ul>"},{"location":"lessons/upgrade/#running-the-script","title":"running the script","text":"<p>To run the script, you will need to download and install Python. Once you've done that, open a terminal or PowerShell window and navigate to your zcx installation, and run the script.</p> <p>macOS <pre><code>cd \"~/Music/Ableton/User Library/Remote Scripts/&lt;your zcx folder&gt;\"\npython3 upgrade.py\n</code></pre></p> <p>Windows <pre><code>cd \"\\Users\\&lt;username&gt;\\Documents\\Ableton\\User Library\\Remote Scripts\\&lt;your zcx folder&gt;\"\npython upgrade.py\n</code></pre></p> <p>Note</p> <p>The paths above are the defaults. You will need to modify them if your User Library is in a different location.</p>"},{"location":"lessons/using-multiple-configs/","title":"Using multiple configurations","text":"<p>zcx allows you to have multiple configurations, and load a different one based on the name of your Live set (the name of your .als file).</p> <p>To create an alternative config folder, first create a new folder in the same location as your old folder. This new folder must be prefixed with <code>_config_</code>, with a name of your choice following, e.g. <code>_config_dj</code>, <code>_config_solo_set</code>, <code>_config_mixing</code>.</p> <p>Then, you will need to edit your preferences file, located in <code>&lt;your zcx folder&gt;/preferences/preferences.yaml</code>.</p> preferences.yaml<pre><code>configs:\n  - config: dj\n    pattern: dj_set\n\n  - config: solo_set\n    pattern: &gt;\n      [solo]\n\n  - config: mixing\n    pattern: MIX\n</code></pre> <p>The <code>config</code> field is the name of the config to load, while the <code>pattern</code> field is a regex pattern.</p> <p>Regular expressions don't need to be complex \u2014 the above patterns will match if they are found anywhere in the set name, i.e. a set called <code>my cool song [solo]</code> would load the <code>solo_set</code> config. <code>!!!MIX! sound of the summer</code> will load the <code>mixing</code> config, etc.</p> <p>If no pattern matches, the default config (<code>_config</code>) will be loaded.</p> <p>Note</p> <p>zcx only checks the set name when the control surface is reloaded.</p> <p>After renaming the set, you may load the new config by reloading zcx</p>"},{"location":"lessons/why-live-12/","title":"Why does zcx require Live 12.1?","text":"<p>zcx is written in the Python programming language. With newer versions of Python, developers have access to more features when writing code. </p> <p>The Python environment that zcx runs in is provided by Live. With Live 12.1 came an upgrade to Python 3.11.6. This newer version of Python includes several features that are very useful for zcx, and so early in development, a decision was made to target Live 12.1 as the minimum version compatible with zcx.</p>"},{"location":"lessons/zcx-user-action/","title":"Controlling zcx from ClyphX Pro","text":"<p>zcx ships with a suite of user actions for ClyphX Pro that allow you to control a zcx script from ClyphX. This means an individual script can be interacted with via any X-Trigger, such as an X-Clip, or an X-Control bound to another controller.</p>"},{"location":"lessons/zcx-user-action/#installing-the-user-action","title":"Installing the user action","text":"<p>Releases of zcx from v0.3.0 include a folder named <code>_user_actions</code>. Simply drag the contents of this folder (<code>Zcx.py</code>) into the ClyphX Pro user actions folder. The location of this folder is <code>.../Ableton/User Library/Remote Scripts/_user_actions</code>. If this folder doesn't exist, create it.</p>"},{"location":"lessons/zcx-user-action/#using-the-action","title":"Using the action","text":"<p>Usage of the zcx action is like so:</p> <p><code>ZCX &lt;target script&gt; &lt;command type&gt; &lt;command definition&gt;</code></p> <p>E.g.</p> <p><code>ZCX zcx_push_1 PAGE NEXT</code></p> <p><code>ZCX 2 MODE TGL SHIFT</code></p>"},{"location":"lessons/zcx-user-action/#targeting-a-script","title":"Targeting a script","text":"<p>The zcx action requires a specific script to be targeted. You may target by either script name or slot number.</p>"},{"location":"lessons/zcx-user-action/#by-name","title":"By name","text":"<p><code>ZCX zcx_push_1 PAGE NEXT</code></p> <p>This is the name of the folder containing the zcx script (similar to as seen in Live\u2019s preferences) with any leading underscores removed. E.g. a script in a folder called <code>_my_zcx_script</code> (shown as <code>my zcx script</code> in Live\u2019s prefs) is targeted like <code>ZCX my_zcx_script</code>. If you change the name of the script (by renaming its folder), you will need to update every ClyphX action list that uses the old name.</p>"},{"location":"lessons/zcx-user-action/#by-number","title":"By number","text":"<p><code>ZCX 2 MODE TGL SHIFT</code></p> <p>This is the number of the control surface script slot the zcx script resides in. If you move this script to another slot, you will need to update every ClyphX action list that uses the old name.</p>"},{"location":"lessons/zcx-user-action/#available-commands","title":"Available commands","text":""},{"location":"lessons/zcx-user-action/#page","title":"PAGE","text":"<p>Activate a particular page by name or number.</p> <p><code>ZCX &lt;target script&gt; PAGE 0</code></p> <p><code>ZCX &lt;target script&gt; PAGE my_cool_page</code></p> <p>Or cycle through pages.</p> <p><code>ZCX &lt;target script&gt; PAGE NEXT</code></p> <p><code>ZCX &lt;target script&gt; PAGE PREV</code></p>"},{"location":"lessons/zcx-user-action/#mode","title":"MODE","text":"<p>Enable, disable, or toggle a zcx mode.</p> <p><code>ZCX &lt;target script&gt; MODE ON SHIFT</code></p> <p><code>ZCX &lt;target script&gt; MODE OFF SHIFT</code></p> <p><code>ZCX &lt;target script&gt; MODE TGL SHIFT</code></p>"},{"location":"lessons/zcx-user-action/#bind","title":"BIND","text":"<p>Manually re-bind a zcx encoder to a new target. This works much the same as the ClyphX Pro BIND action.</p> <p>The <code>encoder name</code> is the same one you'd use in encoders.yaml.</p> <p>The <code>mapping target</code> is any of the targets specified in the Encoder Reference. The entire mapping target must be wrapped in double-quotes.</p> <p>Quotes within mapping targets</p> <p>A special syntax is required when using double-quotes within your mapping target, e.g. <code>\"my track\" / VOL</code>. You must replace all instances of the double-quote character (\") with a backtick (`).</p> <p>The mapping target <code>\"my track\" / DEV(\"my device\") P1</code> becomes <code>`my track` / DEV(`my device`) P1</code></p> <p>The backtick key is below the escape key.</p> <p><code>ZCX &lt;target script&gt; BIND &lt;encoder name&gt; \"&lt;mapping target&gt;\"</code></p> <p><code>ZCX zcx_push_1 BIND enc_3 \"SEL / PAN\"</code></p> <p><code>ZCX zcx_launchpad_x BIND enc_1 \"`my track` / DEV(`my device`) P1\"</code></p>"},{"location":"lessons/zcx-user-action/#msg","title":"MSG","text":"<p>Only on Push 1</p> <p>Write a message to the controller's display. The message must be enclosed in double-quotes.</p> <p><code>ZCX &lt;target script&gt; MSG \"hello there\"</code></p>"},{"location":"lessons/zcx-user-action/#hw_mode","title":"HW_MODE","text":"<p>Set the controller to either 'Live' or zcx mode.</p> <p><code>ZCX &lt;target script&gt; HW_MODE live</code></p> <p><code>ZCX &lt;target script&gt; HW_MODE zcx</code></p>"},{"location":"lessons/zcx-user-action/#refresh","title":"REFRESH","text":"<p>Force a refresh of all controller feedback.</p> <p><code>ZCX &lt;target script&gt; REFRESH</code></p>"},{"location":"lessons/zcx-user-action/#color-commands","title":"Color commands","text":"<p>These commands allow you to set the color on an individual control by alias, as well as across an entire section or group of controls. Allowable color values are an int or a named color.</p>"},{"location":"lessons/zcx-user-action/#set_color","title":"set_color","text":"<p>Set the color of a named or aliased control.</p> <p><code>ZCX &lt;target script&gt; SET_COLOR my_control 124</code></p> <p><code>ZCX &lt;target script&gt; SET_COLOR record red</code></p>"},{"location":"lessons/zcx-user-action/#set_section_color","title":"set_section_color","text":"<p>Set the color of every control in a matrix section.</p> <p><code>ZCX &lt;target script&gt; SET_SECTION_COLOR actions_bottom_right cyan</code></p>"},{"location":"lessons/zcx-user-action/#set_group_color","title":"set_group_color","text":"<p>Set the color of every control in a group of controls.</p> <p><code>ZCX &lt;target script&gt; SET_GROUP_COLOR scene_buttons 127</code></p>"},{"location":"reference/color-reference/","title":"Color reference","text":"<p>zcx allows you to define the color of a control in multiple formats.</p>"},{"location":"reference/color-reference/#midi-value","title":"MIDI value","text":"<p>Pass a MIDI value in the range 0-127 to light the control with a color corresponding to that value.</p> <pre><code>my_control:\n  color: 42\n</code></pre>"},{"location":"reference/color-reference/#name","title":"Name","text":"<p>There are several colors that you can reference by name:</p> <ul> <li>white</li> <li>grey</li> <li>dark_grey</li> <li>red</li> <li>orange</li> <li>yellow</li> <li>green</li> <li>play_green</li> <li>lime</li> <li>blue</li> <li>sky</li> <li>cyan</li> <li>purple</li> <li>magenta</li> <li>indigo</li> <li>pink</li> </ul> <pre><code>my_control:\n  color: purple\n</code></pre>"},{"location":"reference/color-reference/#animated-colors","title":"Animated colors","text":"<p>If your hardware supports it, you may define one of two available animations for your control. To sync these animations with Live's tempo, you must enable <code>Sync</code> on the MIDI out port of your hardware in Live's MIDI preferences.</p> <p>The available animations are <code>pulse</code> and <code>blink</code>. <code>pulse</code> blends between the two colors, while <code>blink</code> quickly alternates between them.</p> <p>For each animation type, you must define an <code>a</code> and <code>b</code> color, and optionally a <code>speed</code> between 1-5 (slowest to fastest). You may omit the <code>speed</code> option to accept the default of 1.</p> <pre><code>my_control:\n  pulse:\n    a: 49\n    b: 5\n    speed: 3\n\nmy_other_control:\n  blink:\n    a: red\n    b: blue\n</code></pre>"},{"location":"reference/command-reference/","title":"Command Reference","text":"<p>In zcx, a command is something that happens when a control is interacted with. Usually this means firing a ClyphX Pro action list.</p>"},{"location":"reference/command-reference/#gestures","title":"gestures","text":"<p>Gestures are physical actions you can perform on a control to trigger a command. There are six gestures supported by zcx:</p> <ul> <li>pressed always fired immediately after a control is pressed</li> <li>pressed_delayed fires after the control is held for a short time</li> <li>released always fired immediately after a control is released</li> <li>released_delayed fired after a held control is released \u2014 will only fire after a <code>pressed_delayed</code> event</li> <li>released_immediately fired after a control that was not being held is released</li> <li>double_clicked fired after a control is pressed twice in quick succession</li> </ul> <p>Note</p> <p>The <code>double_clicked</code> gesture may be unituitive. See the lesson to undestand how it works.</p>"},{"location":"reference/command-reference/#gesture-syntax","title":"gesture syntax","text":"<p>To define gestures on a control, add a <code>gestures</code> key, with key/value pairs of gesture/command.</p> <pre><code>my_control:\n  color: green\n  gestures:\n    pressed: SEL / PLAY\n    released: SEL / STOP\n</code></pre>"},{"location":"reference/command-reference/#quotes-in-strings","title":"quotes in strings","text":"<p>Very often, ClyphX action lists include quotation marks, e.g. <code>\"my track\" / SEL</code>. This causes a small problem with yaml:</p> <pre><code>  gestures:\n    pressed: \"my track\" / SEL\n</code></pre> <p>Because of the quotes around <code>my track</code>, yaml interprets <code>my track</code> as the value for <code>pressed</code>, and then freaks out when it sees the rest of the action list (<code>/ SEL</code>). There are two ways to deal with this.</p>"},{"location":"reference/command-reference/#block-scalar-syntax","title":"block scalar syntax","text":"<pre><code>gestures:\n  pressed: &gt;    # this `&gt;` character indicates a block scalar\n    \"my track\" / SEL\n</code></pre> <p>This is the recommended method. Yaml will interpret the whole line <code>\"my track\" / SEL</code> as the action list.</p> <p>This syntax also makes it easy to spread out long action lists over multiple lines for clarity:</p> <pre><code>pressed: &gt;\n  \"my track\" / ARM ON ;\n  \"my track\" / MON AUTO ;\n  \"my track\" / RECFIX 8\n</code></pre>"},{"location":"reference/command-reference/#quotes-within-quotes","title":"quotes within quotes","text":"<p>By wrapping the entire action list in single quotes, we can freely use double quotes. This works, but is harder to read.</p> <pre><code>gestures:\n  pressed: '\"my track\" / SEL'\n</code></pre>"},{"location":"reference/command-reference/#modes-syntax","title":"modes syntax","text":"<p>When using modes in zcx, the syntax is extended: <pre><code>gestures:\n  pressed: SREC FIX 4\n  pressed__shift: SREC FIX 8\n  pressed__shift__select: SREC FIX 16\n</code></pre></p> <p>Gesture definitions always start with one of the six supported gestures. Modes can be added by appending the name of each mode prefixed with a double underscore (<code>__</code>). </p> <p>Note</p> <p>If you have a configuration like above, where there are multiple variations on the <code>pressed</code> gesture, only the most specific definition will be executed.</p> <p>E.g. if <code>shift</code> is active, the action list <code>SREC FIX 8</code> will fire but <code>SREC FIX 4</code> will not. If both <code>shift</code> and <code>select</code> are active, only <code>SREC FIX 16</code> will fire.</p>"},{"location":"reference/command-reference/#command-syntax","title":"command syntax","text":"<p>The default command fires a ClyphX action list: <pre><code>my_control:\n  gestures:\n    pressed: SEL / MUTE\n</code></pre></p> <p>This is equivalent to: <pre><code>my_control:\n  gestures:\n    pressed: \n      cxp: SEL / MUTE\n</code></pre></p> <p>The <code>cxp</code> key is specifying the command type. Because <code>cxp</code> is the default command type, it's usually not necessary to specify it.</p>"},{"location":"reference/command-reference/#command-bundles","title":"command bundles","text":"<p>You may 'bundle' a combination of command types and execute them sequentially when a gesture is performed:</p> <pre><code>my_control:\n  gestures:\n    pressed:\n      cxp: METRO\n      msg: activated the metronome\n      log: activated the metronome\n</code></pre>"},{"location":"reference/command-reference/#command-types","title":"command types","text":""},{"location":"reference/command-reference/#cxp","title":"cxp","text":"<p>Accepts an action list as a string and triggers it in ClyphX.</p> <pre><code>gestures:\n  pressed: \n    cxp: SETPLAY\n</code></pre> <pre><code>gestures:\n  pressed: &gt;\n    \"my track\" / SEL; \n    \"my track\" / ARM ON;\n    SREC 8\n</code></pre>"},{"location":"reference/command-reference/#page","title":"page","text":"<p>Accepts a page name, page number, or keyword, and switches to that page:</p> <pre><code>gestures:\n  pressed:\n    page: 0\n  pressed__shift:\n    page: my_cool_page\n  pressed__select:\n    page: next\n</code></pre>"},{"location":"reference/command-reference/#keywords","title":"keywords","text":"<p>next <pre><code>page: next\n</code></pre></p> <p>Goes to the next page.</p> <p>prev <pre><code>page: prev\n</code></pre></p> <p>Goes to the previous page.</p> <p>last <pre><code>page: last\n</code></pre></p> <p>Goes back to the page that was active before the current one.</p>"},{"location":"reference/command-reference/#mode_on-mode_off","title":"mode_on, mode_off","text":"<p>Enables or disables the given mode:</p> <pre><code>gestures:\n  pressed:\n    mode_on: shift\n  released:\n    mode_off: shift\n</code></pre>"},{"location":"reference/command-reference/#msg","title":"msg","text":"<p>Shows a message briefly at the bottom of Live's UI: <pre><code>gestures:\n  pressed:\n    msg: Look at my super cool message!\n</code></pre></p> <p>This is, in most cases, functionally equivalent to doing: <pre><code>pressed: &gt;\n  MSG \"Look at my super cool message!\"\n</code></pre></p>"},{"location":"reference/command-reference/#log","title":"log","text":"<p>Prints a message directly to Live's Log.txt:</p> <pre><code>pressed:\n  log: failed successfully\n</code></pre>"},{"location":"reference/command-reference/#color","title":"color","text":"<p>Change the color of the activated control.</p> <pre><code>pressed:\n  color: green\nreleased:\n  color: initial\n</code></pre> <p>See also:</p> <ul> <li>Color reference</li> <li>Change color via user action</li> </ul>"},{"location":"reference/command-reference/#ring","title":"ring","text":"<p>Move the session ring of the script.</p>"},{"location":"reference/command-reference/#relative-moves","title":"relative moves","text":"<p>Move the ring along its x (track) or y (scene) axis.</p> <pre><code>up:\n  gestures:\n    pressed:\n      ring:\n        y: -1\n\nright:\n  gestures:\n    pressed:\n      ring:\n        x: 1\n\ndown:\n  gestures:\n    pressed:\n      ring:\n        y: 1\n\nleft:\n  gestures:\n    pressed:\n      ring:\n        x: -1\n</code></pre>"},{"location":"reference/command-reference/#simplified-syntax","title":"simplified syntax","text":"<p>You can simply specify a direction rather than using x and y values.</p> <pre><code>left:\n  gestures:\n    pressed:\n      ring: left\n</code></pre>"},{"location":"reference/command-reference/#absolute-moves","title":"absolute moves","text":"<p>Directly position the left-most or top-most edge of the ring to a particular track or scene.</p>"},{"location":"reference/command-reference/#by-track","title":"by track","text":"<p>Specify a track name (recommended) or number. When specifying a number, the number is zero-indexed.</p> <pre><code>my_button:\n  ring:\n    track: my cool track\n</code></pre> <pre><code>my_button:\n  ring:\n    track: 0\n</code></pre>"},{"location":"reference/command-reference/#by-scene","title":"by scene","text":"<p>Specify a scene name (recommended) or number. When specifying a number, the number is zero-indexed.</p> <p>When targeting an X-Scene by name, you must use the X-Scene's identifier. E.g., with a scene name like <code>[my cool scene] ALL / MUTE; METRO ON</code>, you would use <code>my cool scene</code> as the scene name.</p> <pre><code>my_button:\n  ring:\n    scene: 7\n</code></pre> <pre><code>my_button:\n  ring:\n    scene: my cool scene\n</code></pre>"},{"location":"reference/command-reference/#pseq-rpseq","title":"pseq / rpseq","text":"<p>Emulates sequential action lists from ClyphX Pro.</p> <pre><code>my_control:\n  gestures:\n    pressed:\n      pseq:\n        - &gt;\n          \"my first track\" / SEL\n        - &gt;\n          \"my second track\" / SEL\n</code></pre> <p>The value of a <code>pseq</code> or <code>rpseq</code> key must be a list, with each list item being a command bundle (or action list). <code>pseq</code> will step through each command in order, while <code>rpseq</code> will trigger a random command (repeat commands are possible).</p>"},{"location":"reference/command-reference/#python","title":"python","text":"<p>Execute Python code in a limited execution context.</p> <pre><code>my_control:\n  gestures:\n    pressed:\n      python: |\n        for i, track in enumerate(song.tracks):\n          if i != 0 and i % 15 == 0:\n            print(\"fizzbuzz\")\n          elif i != 0 and i % 5 == 0:\n            print(\"buzz\")\n          elif i != 0 and i % 3 == 0:\n            print(\"fizz\")\n          else:\n            print(track.name)\n</code></pre>"},{"location":"reference/command-reference/#hardware_mode","title":"hardware_mode","text":"<p>For a multimode controller (e.g. Push), force the controller back into 'Live' mode.</p> <pre><code>my_control:\n  gestures:\n    pressed:\n      hardware_mode: live\n</code></pre>"},{"location":"reference/command-reference/#refresh","title":"refresh","text":"<p>Force zcx to refresh all LED feedback.</p> <pre><code>my_control:\n  gestures:\n    pressed:\n      refresh: true\n</code></pre> <p>Note</p> <p>Generally, it should not be necessary to use this command. If you are using this command to work around an issue you're having, please consider reporting a bug.</p>"},{"location":"reference/encoder-reference/","title":"Encoder Reference","text":"<p>Encoder mapping in zcx aims to emulate the Encoder Bindings feature from the ClyphX Pro Bindings optional accessory.</p>"},{"location":"reference/encoder-reference/#configuration","title":"Configuration","text":"<p>Encoder mappings are configured in <code>encoders.yaml</code>, within your <code>_config</code> folder. An encoder config looks like this:</p> encoders.yaml<pre><code>enc_1:\n  binding: &gt;\n    SEL / VOL\n</code></pre> <p>Just like with buttons or pads, we can dynamically rebind parameters based on the active mode(s).</p> encoders.yaml<pre><code>enc_1:\n  binding:\n      default: &gt;\n        SEL / VOL\n      __shift: &gt;\n        SEL / PAN\n</code></pre> <p>When using this feature, the special key <code>default</code> applies when no other (more specific) binding is applicable.</p>"},{"location":"reference/encoder-reference/#mapping-targets","title":"Mapping targets","text":"<p>Mapping targets are provided as a string in ClyphX Pro syntax.  Template strings may be used within these strings.</p> <p>With some exceptions, the available targets are the same as ClyphX Pro bindings. As such, nativeKONTROL's examples are reproduced below:</p>"},{"location":"reference/encoder-reference/#vol","title":"VOL","text":"<p>Applies to: Any track's volume control.</p> <p>Example: <code>SEL/VOL</code></p>"},{"location":"reference/encoder-reference/#pan","title":"PAN","text":"<p>Applies to: Any track's pan control.</p> <p>Example: <code>2/PAN</code></p>"},{"location":"reference/encoder-reference/#send-z","title":"SEND <code>z</code>","text":"<p>Applies to: Any particular send on any track, where <code>z</code> is the send letter.</p> <p>Example: <code>SEL/SEND F</code></p>"},{"location":"reference/encoder-reference/#panl-panr","title":"PANL / PANR","text":"<p>Applies to: Any track's left or right pan position when using split-stereo panning.</p> <p>Example: <code>\"my cool track\"/PANL</code></p>"},{"location":"reference/encoder-reference/#selp","title":"SELP","text":"<p>Applies to: The last parameter in Live that was clicked on with your mouse.</p> <p>Example: <code>SELP</code></p>"},{"location":"reference/encoder-reference/#devd-cs","title":"DEV(<code>d</code>) CS","text":"<p>Applies to: The Chain Selector of any Rack on any Track where <code>d</code> specifies the Device.</p> <p>Example: <code>1/DEV(SEL) CS</code></p>"},{"location":"reference/encoder-reference/#devd-pp","title":"DEV(<code>d</code>) P<code>p</code>","text":"<p>Applies to: Device Best-of-Bank parameter of any Device on any Track where <code>d</code> specifies the Device and <code>p</code> specifies the number of the parameter or Macro in the case of Racks.</p> <p>Example: <code>1/DEV(SEL) P4</code></p>"},{"location":"reference/encoder-reference/#devxy-pan","title":"DEV(<code>x</code>.<code>y</code>) PAN","text":"<p>Applies to: A particular chain's pan control, targeted with ClyphX Pro rack dot notation. </p> <p>Example: <code>1/DEV(2.3) PAN</code></p>"},{"location":"reference/encoder-reference/#devxy-send-z","title":"DEV(<code>x</code>.<code>y</code>) SEND <code>z</code>","text":"<p>Applies to: A particular send letter <code>z</code> of a particular chain <code>y</code>, targeted with ClyphX Pro rack dot notation. </p> <p>Example: <code>1/DEV(1.4) SEND A</code></p>"},{"location":"reference/encoder-reference/#devxy-vol","title":"DEV(<code>x</code>.<code>y</code>) VOL","text":"<p>Applies to: A particular chain's volume control, targeted with ClyphX Pro rack dot notation. </p> <p>Example: <code>1/DEV(1.1) VOL</code></p>"},{"location":"reference/encoder-reference/#xfader","title":"XFADER","text":"<p>Applies to: Main (master) track's crossfader.</p> <p>Example: <code>XFADER</code></p>"},{"location":"reference/encoder-reference/#targeting-the-session-ring","title":"Targeting the session ring","text":"<p>With a special syntax, we can dynamically target a track at a particular position of the session ring. We can use any valid track target with this syntax:</p> <pre><code>enc_1:\n  binding: &gt;\n    RING(0) / VOL\n  __shift: &gt;\n    RING(0) / PAN\n</code></pre> <p>Note: this syntax is zero-indexed, i.e. <code>RING(0)</code> means the first track of the session ring.</p>"},{"location":"reference/encoder-reference/#encoder-groups","title":"Encoder groups","text":"<p>We can group encoders to apply common definitions to them. See Template Reference for details.</p>"},{"location":"reference/encoder-reference/#additional-options","title":"Additional options","text":"<p>The following options may be configured on each encoder.</p>"},{"location":"reference/encoder-reference/#unbind_on_fail","title":"unbind_on_fail","text":"<pre><code>enc_1:\n  binding: &gt;\n    SEL / VOL\n  unbind_on_fail: false\n</code></pre> <p>With the example binding <code>SEL / VOL</code>, <code>enc_1</code> will control the volume of the selected track. Let's say the selected track is an audio track, <code>guitar</code>. <code>enc_1</code> will, obviously, control the volume of <code>guitar</code>.</p> <p>If we navigate to a blank MIDI track (which does not have a volume parameter), by default zcx will unbind this encoder until we select another track with a volume parameter. By setting <code>unbind_on_fail: false</code> for this control, <code>enc_1</code> would remain bound to the last valid parameter, until a new target is valid, i.e, we select another audio or instrument track.</p>"},{"location":"reference/encoder-reference/#manually-rebinding-encoders","title":"Manually rebinding encoders","text":"<p>You can use the zcx user action to manually rebind encoders.</p>"},{"location":"reference/encoder-reference/#limitations","title":"Limitations","text":""},{"location":"reference/encoder-reference/#first-last-and-sel-keyword","title":"FIRST, LAST, and SEL keyword","text":"<p>When using ClyphX Pro rack dot notation, the <code>FIRST</code>, <code>LAST</code>, and <code>SEL</code> keywords are not recognised. This may be added in a future release.</p>"},{"location":"reference/encoder-reference/#bank-syntax","title":"Bank syntax","text":"<p>ClyphX Pro allows targeting of parameters by bank, e.g <code>SEL / DEV(1) B2 P1</code> to target the first parameter of the second bank. This is not recognised in zcx. Instead, you would use the parameter number (or name) directly (<code>P9</code> for the above example).</p>"},{"location":"reference/template-reference/","title":"Template reference","text":"<p>zcx contains several features for applying a common definition across multiple controls, or for dynamically configuring a control based on factors such as its position in a group.</p>"},{"location":"reference/template-reference/#template-strings","title":"template strings","text":"<p>In many parts of a control's config, you can use a special syntax to dynamically insert values into a string, such as an action list:</p> matrix_sections/very_small_section.yaml<pre><code>-\n  color: red\n  gestures:\n    pressed: PLAY ${me.Index}\n-\n  color: green\n  gestures:\n    pressed: PLAY ${me.Index}\n-\n  color: blue\n  gestures:\n    pressed: PLAY ${me.Index}\n</code></pre> <p>The key part is <code>${me.Index}</code>. In zcx, when you see part of a string enclosed with a leading <code>${</code> and a trailing <code>}</code>, you are looking at a template string. zcx will dynamically evaluate this string each time the control is pressed.</p> <p>The example above would evaluate to:</p> <pre><code>PLAY 1\nPLAY 2\nPLAY 3\n</code></pre> <p>Let's break down what's happening here.</p> <ul> <li><code>${</code> \u2014 indicates the start of an expression</li> <li><code>me</code> \u2014 is the individual control in which a template string appears</li> <li><code>Index</code> \u2014 this is a property that belongs to this control</li> <li><code>}</code> \u2014 indicates the end of an expression</li> </ul> <p>As you may notice, zcx template strings behave similarly to Variables in ClyphX Pro.</p>"},{"location":"reference/template-reference/#what-is-a-property","title":"what is a property?","text":"<p>A property is some value that is associated with a particular control. You can see the properties associated with each control in the control reference.</p> <p>We can see from the control reference that <code>me.Index</code> refers to this control's position with its containing section.</p>"},{"location":"reference/template-reference/#basic-expressions","title":"basic expressions","text":"<p>We can even execute simple Python expressions within the braces:</p> <pre><code>gestures:\n  presssed: PLAY ${me.Index + 8}  # PLAY 9\n</code></pre> <p>Note</p> <p>To read about how zcx handles user-supplied expressions safely, see this lesson.</p>"},{"location":"reference/template-reference/#complex-expressions","title":"complex expressions","text":"<p>There may be times when then value you want to fill is impractical or impossible to write inside the braces. In this case you can use the <code>vars</code> option in your yaml config.</p> <p><code>vars</code> is a dict, where each key is a variable, and each value is an expression. The variable will be assigned to the result of that expression. We can then reference that variable within a template string. For instance:</p> <pre><code>my_control:\n  vars:\n    foo: 1 + 1\n  gestures:\n    pressed:\n      msg: The value of foo is ${foo} # \"The value of foo is 2\"\n</code></pre> <p>In ClyphX terms, you can imagine the above as: </p> <p><code>%foo% = 1 + 1 ; msg \"The value of foo is %foo%\"</code></p> <p>Or in Python as:</p> <pre><code>def button_pressed():\n    foo = 1 + 1\n    print(f'The value of foo is {foo}')\n</code></pre> <p>That was a very basic example to illustrate the concept. This example better explains a use case:</p> control_templates.yaml<pre><code>drum_pad_section:\n  vars:\n    offset: 8\n    clips_per: 2\n    clip_1a: (me.index * clips_per) + 1 + offset\n    clip_1b: (clip_1a + clips_per) - 1\n  gestures:\n    released_immediately: &gt;\n      \"beats\" / PLAY RND${clip_1a}-${clip_1b}\n</code></pre> <p>This is a control template that, when applied to a matrix section, will produce the following output:</p> <pre><code>pad 1: \"beats\" / PLAY RND9-10\npad 2: \"beats\" / PLAY RND11-12\npad 3: \"beats\" / PLAY RND13-14\n...\n</code></pre> <p>And later, we can easily expand this config to add extra functionality:</p> <pre><code>drum_pad_section: \n  vars:\n    offset: 8\n    clips_per: 2\n    shift_offset: 32\n    clip_1a: (me.index * clips_per) + 1 + offset\n    clip_1b: (clip_1a + clips_per) - 1\n    clip_2a: clip_1a + shift_offset\n    clip_2b: clip_2b + shift_offset\n  gestures:\n    released_immediately: &gt;\n      \"beats\" / PLAY RND${clip_1a}-${clip_1b}\n    released_immediately__shift: &gt;\n      \"beats\" / PLAY RND${clip_2a}-${clip_2b}\n</code></pre> <pre><code>pad 1: \"beats\" / PLAY RND9-10\npad 1 (with shift): \"beats\" / PLAY RND41-42\npad 2: \"beats\" / PLAY RND11-12\npad 2 (with shift): \"beats\" / PLAY RND43-44\n</code></pre> <p>Notes</p> <ul> <li>Variables defined in <code>vars</code> are calculated anew every time they are required, i.e. they do not persist between presses of a control.</li> <li>You cannot reference ClyphX Pro variables from inside an expression, e.g. <code>PLAY ${ %my_num% + 10 }</code>, but you can combine zcx templating with ClyphX variables, e.g. <code>%my_track% / PLAY ${me.Index}</code> </li> </ul>"},{"location":"reference/template-reference/#template-locals","title":"template locals","text":"<p>The following variables and functions can be accessed within template strings.</p>"},{"location":"reference/template-reference/#zcx","title":"zcx","text":"<p>Provides access to a <code>ZcxApi</code> object. See the source code for available properties and methods,</p>"},{"location":"reference/template-reference/#song","title":"song","text":"<p>Provides access to the Live set's song object.</p>"},{"location":"reference/template-reference/#ring","title":"ring","text":"<p>Allows references to the enclosed tracks and scenes of the zcx session ring.</p>"},{"location":"reference/template-reference/#print","title":"print","text":"<p>Allows you to write to the log. Mostly useful with Python commands.</p>"},{"location":"reference/template-reference/#msg","title":"msg","text":"<p>Briefly displays a message in the Live UI, like with the msg command.</p>"},{"location":"reference/template-reference/#group-templates","title":"group templates","text":"<p>zcx allows you to define any arbitrary selection of controls as a group of controls. By grouping controls, we can apply a common configuration across all of them.</p> <p>The syntax for defining a group is different for named controls and controls that are part of the matrix.</p>"},{"location":"reference/template-reference/#named-controls","title":"named controls","text":"named_controls.yaml<pre><code>__scene_group:\n  includes: [scene_1, scene_2, scene_3, scene_4]\n  color: red\n  controls:\n    scene_2:\n      color: blue\n  gestures:\n    pressed: SCENE ${me.group_Index}\n</code></pre> <p>For named controls, we create a new entry that starts with a double underscore (<code>__</code>). What follows the <code>__</code> is the group name, in this case <code>scene_group</code>. This group name is up to you.</p> <p>The <code>includes</code> key is a list of controls that belong to this group. Each member of the group will inherit all options defined on the group. In this case each control in the group will launch a scene, relative to its position in that group.</p>"},{"location":"reference/template-reference/#overwriting-options","title":"overwriting options","text":"<p>We can overwrite some or all of the group's options for each member. This is done via the <code>controls</code> key:</p> <pre><code>controls:\n  scene_2:\n    color: blue\n</code></pre> <p><code>controls</code> is a dict of control definitions. Each key of <code>controls</code> is the name of a control in this group. In this <code>scene_2</code> key we can overwrite part or all of the group definition. We can also add options that weren't defined on the group: <pre><code>controls:\n  scene_2:\n    color: blue\n    repeat: true\n</code></pre></p>"},{"location":"reference/template-reference/#matrix-controls","title":"matrix controls","text":"<p>As matrix controls do not have names, the syntax used to group them is slightly different.</p> <p>Groups vs Sections</p> <p>Do not confuse matrix sections with groups.</p> <p>Every matrix control inherently belongs to a matrix section. Groups can be used within a section, or ignored entirely.</p> <p>Look at the config for hypothetical matrix section <code>actions_right.yaml</code>:</p> actions_right.yaml<pre><code>-\n  color: yellow\n  gestures:\n    pressed: SEL / MUTE\n-\n  color: blue\n  gestures:\n    pressed: SEL / SOLO\n-\n  pad_group: my_pad_group\n  color: purple\n  gestures:\n    pressed: ${me.group_Index} / SEL\n  controls:\n    -\n    -\n    -\n    -\n-   \n  color: pink\n  gestures:\n    pressed_delayed: METRO\n</code></pre> <p>Here we have defined the first two controls in this section individually.</p> <p>The third entry in the section has the key <code>pad_group</code>. This indicates that we're looking at the definition for a group named <code>my_pad_group</code> within this section</p> <p>Note</p> <p>It is not required that <code>pad_group</code> be the first key in a group definition, though it is recommended for clarity.</p> <p>You are not required to give a pad group a name. It can be left nameless like so: <pre><code>- \n  pad_group:\n  color: purple\n  ...\n</code></pre></p> <p>The <code>controls</code> key is required. This is a list, and every item in the list represents another member of the group: <pre><code>controls:\n  -\n  -\n  -\n  -\n</code></pre></p> <p>Each of these dashes is a blank or 'null' entry in this list. By looking at <code>controls</code>, we can see that four controls belong to this group. Like above, we are able to overwrite or extend individual group members:</p> <pre><code>controls:\n  -\n  -\n  - color: green\n  -\n</code></pre> <p>Now all controls in this group will take the group definition, except the third control, which will be purple.</p> <p>This is a representation of how zcx processes this section under the hood:</p> <pre><code>-\n  color: yellow\n  gestures:\n    pressed: SEL / MUTE\n-\n  color: blue\n  gestures:\n    pressed: SEL / SOLO\n# group definition is expanded\n-\n  color: purple\n  gestures:\n    pressed: 1 / SEL\n-\n  color: purple\n  gestures:\n    pressed: 2 / SEL\n-\n  color: green  # this option was overwritten\n  gestures:\n    pressed: 3 / SEL\n-\n  color: purple\n  gestures:\n    pressed: 4 / SEL\n# group definition ends\n-   \n  color: pink\n  gestures:\n    pressed_delayed: METRO\n</code></pre>"},{"location":"reference/template-reference/#whole-section-groups","title":"whole-section groups","text":"<p>It is possible to define an entire matrix section with one group definition. To do this, the yaml file for the section should contain a single dict, instead of the usual list:</p> big_section.yaml<pre><code>pad_group:\ncolor: pink\ngestures:\n  pressed: CLIP PLAY ${me.Index}\n</code></pre> <p>This template will be applied for every control in the section. You can imagine the expanded output like this:</p> <pre><code>-\n  color: pink\n  gestures:\n    pressed: CLIP PLAY 1\n-\n  color: pink\n  gestures:\n    pressed: CLIP PLAY 2\n-\n  color: pink\n  gestures:\n    pressed: CLIP PLAY 3\n...\n</code></pre>"},{"location":"reference/template-reference/#section-templates","title":"section templates","text":"<p>An alternative the above method is to define a template inside matrix_sections.yaml. To do so, add a <code>template</code> key:</p> <pre><code>my_section:\n  col_start: 0\n  col_end: 7\n  row_start: 0\n  row_end: 7\n  template:\n    color: red\n</code></pre>"},{"location":"reference/template-reference/#encoder-groups","title":"encoder groups","text":"<p>Encoders can be grouped just like button controls. The main difference is that we use the key <code>encoders</code> for our overrides:</p> <pre><code>__enc_row:\n  includes: [enc_1, enc_2, enc_3, enc_4]\n  binding: &gt;\n    ring(${me.index}) / VOL\n  encoders:\n    enc_2:\n      binding:\n        __shift: &gt;\n          \"my cool track\" / PAN\n</code></pre>"},{"location":"reference/template-reference/#control-templates","title":"control templates","text":"<p>In <code>control_templates.yaml</code>, you may create a control definition that is available for any control to inherit from. Any options defined on the template will be inherited on the child control. In the case of a conflict (the template and child define the same option), the child will overwrite the template.</p> <p>control_templates.yaml<pre><code>__global__:\n  color: 127\n\nhold_warning:\n  gestures:\n    released_immediately: &gt;\n      MSG \"You must hold this control to trigger it!\"\n</code></pre> <pre><code>play:\n  template: hold_warning\n  # color: 127    __global__ option, overwritten\n  color: green\n  gestures:\n    pressed_delayed: SETPLAY\n    released_immediately: &gt; # added from `hold_warning` template\n      MSG \"You must hold this control to trigger it!\"\n</code></pre></p> <p>There is also a special template called <code>__global__</code>. This definition will apply to every control in your zcx script. You can optionally prevent a control from inheriting from <code>__global__</code> like so:</p> <pre><code>my_control:\n  template: null\n</code></pre>"},{"location":"reference/template-reference/#multiple-inheritance","title":"multiple inheritance","text":"<p>You can apply multiple templates sequentially to a control, like so:</p> <pre><code>my_control:\n  template: [foo, bar, baz]\n</code></pre> control_templates.yaml<pre><code>__global__:\n  color: 127\n\nfoo:\n  color: red\n  gestures:\n    pressed: msg \"I was pressed!\"\n\nbar:\n  color: blue\n  gestures:\n    released: msg \"I was released!\"\n\nbaz:\n  color: pink\n</code></pre> <p>This config will result in this control:</p> <pre><code>my_control:\n  color: pink\n  gestures:\n    pressed: msg \"I was pressed!\"\n    released: msg \"I was released!\"\n</code></pre> <p>Notice that all four templates defined a <code>color</code> option.</p> <p>When using multiple templates, zcx merges the template definitions from left to right, in the same order you define them in. When the same option is defined on multiple templates, and the difference is irreconcilable, the rightmost template wins. In this case, the control is <code>pink</code>.</p> <p><code>foo</code> and <code>bar</code> both have a <code>gestures</code> key, but the gestures defined within are compatible, and so <code>my_control</code> gets both the <code>pressed</code> and <code>released</code> gesture.</p>"},{"location":"reference/configuration-files/","title":"Configuration files","text":"<p>zcx is configured through a variety of yaml files.</p> <p>If this is your first time using zcx, make sure to read through the getting started tutorial, as the articles in this section will expand on the concepts explained in that tutorial.</p> <p>If you are using a smaller screen, press the  icon in the top-right to expand this section and see the articles within.</p>"},{"location":"reference/configuration-files/encoders/","title":"encoders.yaml","text":"<p><code>encoders.yaml</code> is where you define the mappings of any encoders (knobs, faders, etc) of your hardware. For more info, see the sub-section of zcx concepts, or the Encoder Reference.</p>"},{"location":"reference/configuration-files/matrix-sections/","title":"matrix_sections.yaml","text":"<p><code>matrix_sections.yaml</code> is where you define logical sections of the control matrix, which must themselves be assigned to a page in <code>pages.yaml</code>. You may also define a section template here.</p> <p>For more info, see the sub-section of zcx concepts.</p>"},{"location":"reference/configuration-files/modes/","title":"modes.yaml","text":"<p>Simply a list of the names of the modes you would like to use in your config.</p> modes.yaml<pre><code>- shift\n- select\n- my_mode\n</code></pre> <p>For more info, see the sub-section of zcx concepts.</p>"},{"location":"reference/configuration-files/named_controls/","title":"named_controls.yaml","text":"<p><code>named_controls</code> is where you configure the controls that exist outside the matrix. For more info, see the sub-section of zcx concepts.</p>"},{"location":"reference/configuration-files/pages/","title":"pages.yaml","text":"<p><code>pages.yaml</code> is where you configure the different pages of the control matrix. For a basic explanation of pages see the sub-section of zcx concepts.</p>"},{"location":"reference/configuration-files/pages/#advanced-settings","title":"advanced settings","text":""},{"location":"reference/configuration-files/pages/#order","title":"order","text":"<p>You may define an <code>order</code> key in <code>pages.yaml</code> to set the order of your pages, rather than moving the entries in the <code>pages</code> key.</p> <pre><code>pages:\n  page_one:\n    - big_section\n  page_two:\n    - big_section\n\norder:\n  - page_two\n  - page_one\n</code></pre>"},{"location":"reference/configuration-files/pages/#on_enter-on_leave","title":"on_enter, on_leave","text":"<p>You can configure a command bundle that is executed when the page is entered and/or when the page is left. Doing so requires a slight change to the normal pages syntax:</p> <pre><code>pages:\n  page_one:\n    sections:\n      - actions_left\n      - actions_right\n    on_enter: METRO\n    on_leave:\n      msg: &gt;\n        left page ${page_number} (${page_name})\n</code></pre>"},{"location":"reference/configuration-files/preferences/","title":"preferences.yaml","text":"<p><code>preferences.yaml</code> allows you to customise various settings of the zcx script. </p>"},{"location":"reference/configuration-files/preferences/#two-levels-of-preferences","title":"two levels of preferences","text":"<p>At the root of your zcx installation is a file <code>_global_preferences.yaml</code>. Inside your <code>_config</code> folder, you may create the file <code>preferences.yaml</code>.</p> <p>As zcx allows per-set configs, the purpose of having multiple files is to allow you to have certain preferences across all of your configs, and expand or modify those preferences per-config. If you only use one zcx config, you may choose to use either of these files.</p>"},{"location":"reference/configuration-files/preferences/#preference-reference","title":"preference reference","text":"<p>Each of these headings represents a top-level yaml entry.</p>"},{"location":"reference/configuration-files/preferences/#action_log","title":"action_log","text":"<pre><code>action_log: true\n</code></pre> <p>When set to <code>true</code>, all triggered ClyphX Pro action lists will be logged.</p>"},{"location":"reference/configuration-files/preferences/#configs","title":"configs","text":"<p>Allows you to configure per-set configs.</p> <p>This setting must be set in <code>_global_preferences.yaml</code></p> <pre><code>configs:\n  - config: dj\n    pattern: dj_set\n\n  - config: solo_set\n    pattern: &gt;\n      [solo]\n\n  - config: mixing\n    pattern: MIX\n</code></pre>"},{"location":"reference/configuration-files/preferences/#initial_hw_mode","title":"initial_hw_mode","text":"<pre><code>initial_hw_mode: zcx\n</code></pre> <p>Options:</p> <ul> <li><code>zcx</code> - When zcx loads, switch the device to user mode.</li> <li><code>live</code> - Do not attempt to take control of the hardware on set load.</li> </ul>"},{"location":"reference/configuration-files/preferences/#load_hardware_plugins","title":"load_hardware_plugins","text":"<pre><code>load_hardware_plugins: true\n</code></pre> <p>Determines whether any hardware-specific plugins (located in <code>zcx/hardware/plugins</code>) will be loaded.</p>"},{"location":"reference/configuration-files/preferences/#load_user_plugins","title":"load_user_plugins","text":"<pre><code>load_user_plugins: true\n</code></pre> <p>Determines whether any user plugins (located in <code>zcx/plugins</code>) will be loaded.</p>"},{"location":"reference/configuration-files/preferences/#log_failed_encoder_bindings","title":"log_failed_encoder_bindings","text":"<pre><code>log_failed_encoder_bindings: true\n</code></pre> <p>By default, when an encoder fails to bind to the specified target an error message is written to the log. In some cases, it may be expected that bindings fail, so you may set this option to <code>false</code>.</p>"},{"location":"reference/configuration-files/preferences/#log_level","title":"log_level","text":"<pre><code>log_level: info\n</code></pre> <p>Configures how detailed the zcx logs are. From most to least detailed, the options are:</p> <ul> <li>debug</li> <li>info</li> <li>warning</li> <li>error</li> <li>critical</li> </ul>"},{"location":"reference/configuration-files/preferences/#osc_output","title":"osc_output","text":"<pre><code>osc_output:\n  encoders:\n    name: true\n    value: true\n    int: true\n    float: true\n  page: true\n  ring_tracks: true\n  ring_pos: true\n</code></pre> <p>Configures what information is sent over OSC.  <code>osc_output: false</code> disables all OSC output.</p> <p>See full lesson for more details.</p>"},{"location":"reference/configuration-files/preferences/#plugins","title":"plugins","text":"<pre><code>plugins:\n  plugin_name:\n    plugin_option_1: true\n    plugin_option_2: false\n</code></pre> <p>Consult the documentation of your plugin to see the available options. If the plugin came with zcx you will find this information in the hardware reference for your controller.</p>"},{"location":"reference/configuration-files/preferences/#session_ring","title":"session_ring","text":"<pre><code>session_ring:\n  width: 8\n  height: 8\n</code></pre> <p>Sets the dimensions of the session ring. You may disable the ring by setting one or both of <code>width</code> and <code>height</code> to <code>0</code>.</p>"},{"location":"reference/configuration-files/preferences/#developer-preferences","title":"developer preferences","text":"<p>The following preferences are only useful when developing the 'core' of zcx.</p>"},{"location":"reference/configuration-files/preferences/#refresh_on_all_sysex","title":"refresh_on_all_sysex","text":"<pre><code>refresh_on_all_sysex: false\n</code></pre> <p>When set to <code>true</code>, zcx will refresh all LED feedback upon receipt of any MIDI Sysex message. This may be useful if you are trying to test controller-specific code for a controller you don't have access to.</p>"},{"location":"reference/control-reference/mode/","title":"mode control","text":"<p>The <code>mode</code> control binds to a particular mode in zcx and displays feedback indicating whether that mode is currently active</p>"},{"location":"reference/control-reference/mode/#yaml-schema","title":"yaml schema","text":"<p>Inherits from standard control.</p> <pre><code>mode: string\n# color: ignored\n</code></pre>"},{"location":"reference/control-reference/mode/#mode","title":"mode","text":"<p><code>string</code></p> <p>The mode to bind to.</p>"},{"location":"reference/control-reference/mode/#color","title":"color","text":"<p><code>ignored</code></p> <p>Feedback is based on whether the control's bound mode is active.</p>"},{"location":"reference/control-reference/page/","title":"page control","text":"<p>The <code>page</code> control is identical to the <code>standard</code> control, except it has a required <code>page</code> option. This control's LED feedback will reflect whether its bound page is currently active. As such, the <code>color</code> option is ignored in favor of active color and inactive color</p> <p>Note</p> <p>Standard controls are already capable of changing pages, and page controls still require you to manually define the page change commands. The only purpose of this control is to enable control feedback.</p> <p>See command reference.</p>"},{"location":"reference/control-reference/page/#yaml-schema","title":"yaml schema","text":"<p>Inherits from standard control.</p> <pre><code>page: string, int\nactive_color: color definition\ninactive_color: color definition\n# color: not implemented\n</code></pre>"},{"location":"reference/control-reference/page/#page","title":"page","text":"<p><code>string | int</code></p> <p>The page name or number this control is bound to. Passing a string value means that the binding is resistant to page order changes, while passing an int may be suitable for a dedicated 'page row'.</p> <p>Note: page numbers are always zero-indexed.</p>"},{"location":"reference/control-reference/page/#color","title":"color","text":"<p><code>not implemented</code></p> <p>Use active color and inactive color.</p>"},{"location":"reference/control-reference/page/#active_color","title":"active_color","text":"<p><code>color definition</code></p> <p>Define a color that will display when this control's bound page is active.</p>"},{"location":"reference/control-reference/page/#inactive_color","title":"inactive_color","text":"<p><code>color definition</code></p> <p>Inverse of active color.</p>"},{"location":"reference/control-reference/page/#properties","title":"properties","text":"<p>These are values attached to controls that can be referenced from within template strings.</p>"},{"location":"reference/control-reference/page/#page_1","title":"page","text":"<p>Returns the zero-indexed page number of this control's bound page.</p>"},{"location":"reference/control-reference/page/#page_2","title":"Page","text":"<p>with a capital <code>P</code></p> <p>Returns <code>page</code> + 1.</p>"},{"location":"reference/control-reference/page/#page_name","title":"page_name","text":"<p>Returns the name of the bound page.</p>"},{"location":"reference/control-reference/page/#is_active","title":"is_active","text":"<p>Returns a boolean representing if the bound page is in view.</p>"},{"location":"reference/control-reference/track/","title":"track control","text":"<p>The <code>track</code> control binds to a particular track in the Live set. An RGB-enabled button will attempt to display animated feedback representing the track's state (playing, recording, etc.). </p> <p>When the <code>track</code> option is configured, zcx will bind to the specified track on set load. The control's bound track can later be reassigned via the API, and the <code>track</code> option may be omitted to create an unbound control on set load.</p> <p>Warning</p> <p>Currently, track controls only consider session view clips when determining playing status, not arrangement view clips.</p>"},{"location":"reference/control-reference/track/#yaml-schema","title":"yaml schema","text":"<p>Inherits from standard control.</p> <pre><code>track: string, int\ncolor: color definition\n</code></pre>"},{"location":"reference/control-reference/track/#track","title":"track","text":"<p><code>string | int</code></p> <p>The track name or number to bind to. Binding by number is generally only recommended for testing purposes.</p>"},{"location":"reference/control-reference/track/#color","title":"color","text":"<p><code>color definition</code></p> <p>By default, the track control will attempt to create a palette of colors based on the color of the bound track. You may optionally pass a color option, and that color will be used as a base instead. Note: if an animated color is specified, only the 'a' color of the animation will be considered. See color reference.</p>"},{"location":"reference/control-reference/track/#options","title":"options","text":"<p>Inherits from standard control.</p>"},{"location":"reference/control-reference/track/#track_1","title":"track","text":"<p>Returns the name of the bound track.</p>"},{"location":"reference/control-reference/transport/","title":"transport control","text":"<p>The <code>transport</code> control binds to a particular function of Live's transport, displaying feedback based on the state of the function.</p> <p>Note</p> <p>Standard controls are already capable of controlling the transport, and transport controls still require you to manually define the action lists to fire. The only purpose of this control is to enable control feedback.</p> <p>See command reference.</p>"},{"location":"reference/control-reference/transport/#yaml-schema","title":"yaml schema","text":"<p>Inherits from standard control.</p> <pre><code>transport: string\n# color: ignored\n</code></pre>"},{"location":"reference/control-reference/transport/#transport","title":"transport","text":"<p><code>string</code></p> <p>The name of the transport function to bind to. These functions are currently supported:</p> <ul> <li><code>play</code></li> <li><code>session_record</code></li> <li><code>metronome</code></li> </ul>"},{"location":"reference/control-reference/transport/#color","title":"color","text":"<p><code>ignored</code></p> <p>Feedback is based on whether the control's bound transport function is active.</p>"},{"location":"reference/control-reference/z-control/","title":"standard control","text":"<p>The below options are avaliable on the base ZControl class which all other control types descend from. Unless otherwise specified, they behave the same way for all control types.</p>"},{"location":"reference/control-reference/z-control/#yaml-schema","title":"yaml schema","text":"<p>These are options you can set on each control via its yaml definition. Some options will not be available in every context.</p> <pre><code>type: string\nalias: string\ncolor: color definition\nincludes: list[string]\nbuttons: dict[ZControl]\ngestures: dict[dict]\npad_group: string\nvars: dict\nrepeat: boolean=false\nexternally_managed_light: boolean=false\ntemplate: string, list[string], null\nprops: dict[any]\nthreshold: int=30\n</code></pre>"},{"location":"reference/control-reference/z-control/#type","title":"type","text":"<p><code>string='standard'</code></p> <p>Changing this option from the default <code>standard</code> will create a specialised ZControl. Allowed value is the name of any installed control classes.</p>"},{"location":"reference/control-reference/z-control/#alias","title":"alias","text":"<p><code>string</code></p> <p>Allows you to provide a name for a matrix control, or an alternate name for a named control, which can later be used to target this control via the zcx API, e.g. the zcx user action.</p>"},{"location":"reference/control-reference/z-control/#color","title":"color","text":"<p><code>color definition</code> </p> <p>The base color of the control. See color reference.</p>"},{"location":"reference/control-reference/z-control/#includes","title":"includes","text":"<p><code>list[string]</code></p> <p>Only available on named control group definitions.</p> <p>See template reference.</p>"},{"location":"reference/control-reference/z-control/#pad_group","title":"pad_group","text":"<p><code>string | null</code></p> <p>Only available on matrix control group definitions.</p> <p>See template reference.</p>"},{"location":"reference/control-reference/z-control/#controls","title":"controls","text":"<p><code>list[ZControl] | dict[ZControl]</code></p> <p>Used in a group control definition to override properties on one or more ZControls in the group. Accepts a list for a group of matrix controls or a dict for a group of named controls.</p>"},{"location":"reference/control-reference/z-control/#gestures","title":"gestures","text":"<p><code>dict[dict[command]]</code></p> <p>See command reference.</p>"},{"location":"reference/control-reference/z-control/#vars","title":"vars","text":"<p><code>dict[dict[string]]</code></p> <p>See template reference.</p>"},{"location":"reference/control-reference/z-control/#repeat","title":"repeat","text":"<p><code>boolean=false</code></p> <p>Repeatedly trigger this control's <code>pressed</code> gesture (with modifiers) while it is held.</p>"},{"location":"reference/control-reference/z-control/#externally_managed_light","title":"externally_managed_light","text":"<p><code>boolean=false</code></p> <p>Suppress most color change events that fire on this control, preventing colors set manually via the API from being overwritten.</p>"},{"location":"reference/control-reference/z-control/#suppress_animations","title":"suppress_animations","text":"<p><code>boolean=false</code></p> <p>Prevent LED animations from firing on this control.</p>"},{"location":"reference/control-reference/z-control/#template","title":"template","text":"<p><code>string | list[string] | null</code></p> <p>The template(s) to apply to this control. See template reference.</p> <p><code>string</code> Apply a single template.</p> <p><code>list[string]</code> Apply each template consecutively. Options that conflict will be overwritten from left to right.</p> <p><code>null</code> Apply no template, including the <code>__global__</code> template.</p>"},{"location":"reference/control-reference/z-control/#props","title":"props","text":"<p><code>dict[string | int]</code></p> <p>Any arbitrary data. Can be referenced from within template strings.</p>"},{"location":"reference/control-reference/z-control/#threshold","title":"threshold","text":"<p><code>int=30</code></p> <p>Override the global velocity threshold, which by default is <code>30</code>. Triggers under this threshold will be ignored.</p>"},{"location":"reference/control-reference/z-control/#properties","title":"properties","text":"<p>These are values attached to controls that can be referenced from within template strings.</p>"},{"location":"reference/control-reference/z-control/#obj","title":"obj","text":"<p>Returns a reference to the actual Python object for the control.</p>"},{"location":"reference/control-reference/z-control/#position-properties","title":"position properties","text":""},{"location":"reference/control-reference/z-control/#index","title":"index","text":"<p>Returns the zero-indexed position of a matrix control within its containing section. Returns 0 for non-matrix controls, or the control's group_index if it belongs to a group.</p>"},{"location":"reference/control-reference/z-control/#index_1","title":"Index","text":"<p>with a capital <code>I</code></p> <p>Returns index + 1.</p>"},{"location":"reference/control-reference/z-control/#group_index","title":"group_index","text":"<p>Returns the zero-indexed position of a control within its containing group.</p>"},{"location":"reference/control-reference/z-control/#group_index_1","title":"group_Index","text":"<p>with a capital <code>I</code></p> <p>Returns group_index + 1.</p>"},{"location":"reference/control-reference/z-control/#location-properties","title":"location properties","text":"<p>Only available on matrix controls.</p>"},{"location":"reference/control-reference/z-control/#x-x_flip","title":"x, x_flip","text":"<p>Returns the zero-indexed column of the control (x) or its mirrored position (x_flip), relative to its containing section.</p>"},{"location":"reference/control-reference/z-control/#y-y_flip","title":"y, y_flip","text":"<p>Returns the zero-indexed row of the control (y) or its mirrored position (y_flip), relative to its containing section.</p>"},{"location":"reference/control-reference/z-control/#global_x-global_x_flip","title":"global_x, global_x_flip","text":"<p>Returns the zero-indexed column of the control (global_x) or its mirrored position (global_x_flip), relative to the entire matrix.</p>"},{"location":"reference/control-reference/z-control/#global_y-global_y_flip","title":"global_y, global_y_flip","text":"<p>Returns the zero-indexed row of the control (global_y) or its mirrored position (global_y_flip), relative to the entire matrix.</p>"},{"location":"reference/control-reference/z-control/#velocity-properties","title":"velocity properties","text":"<p>The following properties are based on the last velocity at which a control was struck. This value will not reset to 0 when the control is released.</p>"},{"location":"reference/control-reference/z-control/#vel","title":"vel","text":"<p>Returns the last velocity as an integer (between 0-127).</p>"},{"location":"reference/control-reference/z-control/#velp","title":"velp","text":"<p>Returns the last velocity as a percentage (float).</p> <p>To use this percentage in a ClyphX action list, you will need to manually add the % sign, e.g:</p> <p><code>SEL / VOL ${me.velp}%</code></p>"},{"location":"reference/control-reference/z-control/#velps","title":"velps","text":"<p>Returns the last velocity as a percentage, but scaled according to the control's threshold.</p> <p>E.g., if a control has a threshold of <code>30</code>, a press with a velocity of <code>30</code> will return <code>0.0</code>.</p>"},{"location":"reference/hardware-reference/","title":"Hardware reference","text":"<p>zcx is available for a variety of MIDI controllers. Apart from using the correct name for named controls, the process of configuring zcx is basically identical, no matter which hardware you have.</p> <p>However, certain controllers may have special features, or even limitations when used with zcx. In such cases, you can refer to the page for your hardware. If you are using a smaller screen, press the  icon in the top-right to expand this section and see the articles within.</p> <p>If a page doesn't exist for your hardware, you can assume that no special zcx functionality exists for that hardware. You can check here to see all known hardware-specific issues.</p> <p>If you think you've found a bug, please see this article to learn how to report it.</p>"},{"location":"reference/hardware-reference/apc-mini-mk2/","title":"Akai APC Mini mk2","text":""},{"location":"reference/hardware-reference/apc-mini-mk2/#limitations","title":"Limitations","text":""},{"location":"reference/hardware-reference/apc-mini-mk2/#animated-colors","title":"Animated colors","text":"<p>Support for animated colors is limited with this hardware. See issues on GitHub for details.</p>"},{"location":"reference/hardware-reference/apc-mini-mk2/#dim-leds","title":"Dim LEDs","text":"<p>For some reason, in the APC's default mode the LEDs are quite dim. If the default brightness is acceptable, then no action is required.</p> <p>There is a workaround, but it requires the use of external software such as Bome MIDI Translator, MidiPipe, MidiFire, or others.</p> <p>First, you will need to edit a hardware-specific file in your installation. The file is <code>_zcx_apc_mini_mk2/hardware/specs.yaml</code>.</p> <pre><code>hardware_name: Akai APC Mini mk2\n\nglobal_midi_channel: 0\n\nbutton_matrix:\n  msg_type: note\n  id_start: 0\n  id_end: 63\n  feedback: rgb\n  momentary: true\n  width: 8\n  playable: false\n  channel: 6\n</code></pre> <p>By adding <code>channel: 6</code> to <code>button_matrix</code>, zcx will send LED feedback on channel 7, which the APC displays at full brightness. Unfortunately, zcx will also listen for MIDI on channel 7, while your hardware will still send on channel 1. This means your matrix controls won't work.</p> <p>Warning</p> <p>When upgrading your zcx installation to a new version, your changes to any files in <code>hardware/</code> will be lost. You will have to edit this file with every upgrade.</p> <p>To work around this, using your aforementioned MIDI software, create a virtual port that takes input from your APC.  Then you will need to filter the matrix controls, and change their channel to 7 (or 6 if your software deals in zero-indexed MIDI channels).  The matrix controls are notes 0-63 (inclusive) on channel 1. You should then output this modified MIDI data on a virtual output port.</p> <p>You should consult the documentation of your chosen software for instructions on achieving the above.</p> <p>Once you have a virtual port, set this port as the Input of your script in Live's MIDI preferences. zcx should now function as normal.</p>"},{"location":"reference/hardware-reference/push-1/","title":"Push 1","text":""},{"location":"reference/hardware-reference/push-1/#display-plugin","title":"Display plugin","text":"<p>zcx for Push 1 ships with a plugin that enables display output. Each line of the display will be used for a specific purpose:</p>"},{"location":"reference/hardware-reference/push-1/#encoder-mappings","title":"encoder mappings","text":"<p>Displays the name of the parameter that the main encoder above it (<code>enc_1</code> - <code>enc_8</code>) is currently bound to.</p>"},{"location":"reference/hardware-reference/push-1/#encoder-values","title":"encoder values","text":"<p>Displays the current value of the aforementioned parameter.</p>"},{"location":"reference/hardware-reference/push-1/#message","title":"message","text":"<p>A reserved space, which can be written to from the zcx user action.</p>"},{"location":"reference/hardware-reference/push-1/#ring_tracks","title":"ring_tracks","text":"<p>Displays the name of the first 8 tracks highlighted by the session ring</p>"},{"location":"reference/hardware-reference/push-1/#selected","title":"selected","text":"<p>Displays the selected track and scene. If the scene is named, the name will be shown. If the scene is an X-Scene, the scene name (action list) will not be shown, unless there is text within the identifier, e.g. an X-Scene with the name <code>[my cool scene] METRO</code> will display <code>my cool scene</code>.</p> <p>You can specify on which line each readout appears via preferences.yaml.</p> <pre><code>plugins:\n  push_1_display:\n    encoder_mappings: 1\n    encoder_values: 2\n    message: 3\n    ring_tracks: 4\n</code></pre>"},{"location":"resources/matrix-gen/","title":"Matrix section config generator","text":"<p>You can use this tool to generate a 'skeleton' config for a matrix section, with helpful comments denoting the row and column of each item.</p> <p>Enter your desired height and width for the section, and this tool will generate the appropriate yaml structure for these dimensions. Click the  button in the top-right corner of the output field to copy to your clipboard, and paste into your code editor.</p> <p>Warning</p> <p>There seems to be a bug where clicking the 'generate' button doesn't always load the config.</p> <p>If this happens, reload the page and it should work.</p>"},{"location":"resources/matrix-gen/#output","title":"Output","text":"<pre><code>your yaml will appear here\n</code></pre>"},{"location":"tutorials/","title":"Index","text":"<p>im da tuts</p>"},{"location":"tutorials/getting-started/","title":"getting started","text":"<p>Here's the stuff you should know before you get stuck in designing your zcx config:</p> <ol> <li> <p>installing zcx</p> <p>How to download, install, and enable zcx.</p> </li> <li> <p>reading zcx configurations</p> <p>This lesson will help you make sense of the syntax used in zcx. If you're already familiar with yaml, you can probably skip this.</p> </li> <li> <p>zcx concepts</p> <p>An introduction to the most important concepts and terminology used in zcx.</p> </li> <li> <p>editing a config</p> <p>Your first steps with configuring zcx.</p> </li> </ol> <p>Note</p> <p>If you're having trouble with any of this content, feel free to join the Discord to get help from a member of the community!</p>"},{"location":"tutorials/getting-started/editing-a-config/","title":"editing a config","text":"<p>Alright, time to actually get started!</p> <p>When you downloaded zcx, it comes with a pre-populated <code>_config</code> folder.  This demo config is included so that you can launch and test zcx without any manual configuration.</p> <p>In this lesson you'll learn about the key files used to configure zcx. By modifying these files you can use the demo config as a template for your own configuration.</p> <p>Note</p> <p>Because every MIDI controller has different physical controls, each config is slightly different. The demo config we'll follow along with comes from the Ableton Push 1. You can follow along with the demo config you have, and it should be fairly similar.</p>"},{"location":"tutorials/getting-started/editing-a-config/#using-a-code-editor","title":"using a code editor","text":"<p>It is highly recommended to use a code editor to view these files, rather than a simple app like TextEdit or Notepad. Using a code editor will display the yaml files with helpful color-coding. The editor will also catch and highlight the most common yaml mistakes.</p> <p>One good editor is Visual Studio Code from Microsoft.</p>"},{"location":"tutorials/getting-started/editing-a-config/#open-the-config-folder","title":"open the config folder","text":"<p>By opening the <code>_config</code> folder, we can see all the necessary files at once. In Visual Studio Code, open the <code>File</code> menu, and select <code>Open Folder</code>. Navigate to your zcx installation and select the <code>_config</code> folder. Press <code>Open</code>.</p>"},{"location":"tutorials/getting-started/editing-a-config/#important-files","title":"important files","text":"<p>Inside the <code>_config</code> folder are quite a few files. We won't need most of them today. The files we're touching are these:</p> <pre><code>zcx/\n\u251c\u2500 _config/\n\u2502  \u251c\u2500 matrix_sections/\n\u2502  \u2502  \u251c\u2500 actions_top_left.yaml\n\u2502  \u251c\u2500 matrix_sections.yaml\n\u2502  \u251c\u2500 modes.yaml\n\u2502  \u251c\u2500 named_controls.yaml\n\u2502  \u251c\u2500 pages.yaml\n</code></pre> <p>If you have a smaller matrix, the file <code>actions_top_left</code> might be called something like <code>actions_left</code>.</p>"},{"location":"tutorials/getting-started/editing-a-config/#pagesyaml","title":"pages.yaml","text":"pages.yaml<pre><code>pages:\n  main_page:\n    - actions_top_left\n    - actions_top_right\n    - actions_bottom_double\n  alt_page:\n    - actions_top_left\n    - actions_bottom_right\n    - actions_bottom_left\n    - actions_top_right\n  ring_page:\n    - ring_control\n  blank_page:\n    - blank_section\n</code></pre> <p>Your <code>pages.yaml</code> probably looks something like this. The page <code>main_page</code> contains the section <code>actions_bottom_double</code>, which is the pretty gradient that appears when you load zcx. The section we'll be working on is <code>actions_top_left</code>, which appears on <code>main_page</code> and <code>alt_page</code>.</p> <p>To navigate between pages, you use one of the predefined controls on your hardware. On the Push 1, it's the <code>state_row</code>, which is the second row of buttons below the display. Note: you can always redefine the page controls (or add more, or not engage with the pages system at all).</p> <p>The order that pages appear in <code>pages.yaml</code> is their internal order within zcx. Note: pages in zcx are zero-indexed, so <code>main</code> is page 0, <code>test_page</code> is page 1, and <code>track_page</code> is page 2.</p> <p>Feel free to change the order of pages:</p> pages.yaml<pre><code>pages:\n  blank_page:\n    - blank_section\n  main_page:\n    - actions_top_left\n    - actions_top_right\n    - actions_bottom_double\n  alt_page:\n    - actions_top_left\n    - actions_bottom_right\n    - actions_bottom_left\n    - actions_top_right\n  ring_page:\n    - ring_control\n</code></pre> <p>You also have the option to add an <code>order</code> key to your <code>pages.yaml</code> like so:</p> pages.yaml<pre><code>order:\n  - blank_page\n  - alt_page\n  - main_page\n</code></pre> <p>The order here will take precedence. If you have an <code>order</code> key, pages not listed here will not be created.</p> <p>And that's where we'll leave <code>pages.yaml</code> for this lesson.</p>"},{"location":"tutorials/getting-started/editing-a-config/#named-controls","title":"named controls","text":"named_controls.yaml<pre><code>mute:\n  gestures:\n    pressed: MUTE\n\nsolo:\n   gestures:\n     pressed: SOLO\n\nmetronome:\n  gestures:\n     pressed: METRO\n\nnew:\n  gestures:\n    pressed: ADDSCENE\n\nduplicate:\n  gestures:\n    pressed: SCENEDUPE\n</code></pre> <p>Inside <code>named_controls.yaml</code> you'll find some control definitions that look like this. Lets have a look at the definition for <code>mute</code>:</p> named_controls.yaml<pre><code>mute:\n  gestures:\n    pressed: MUTE\n</code></pre> <p>Pretty simple. As you might have guessed, when we press the button labeled 'Mute' on the Push, zcx fires the ClyphX action <code>MUTE</code>, which mutes the currently selected track.</p> <p>We can add more functionality to this button: what if when we held it down briefly, it muted all tracks in the set?</p> named_controls.yaml<pre><code>mute:\n  gestures:\n    pressed: MUTE\n    pressed_delayed: ALL / MUTE\n</code></pre> <p>Make that edit, then reload zcx.</p> <p>Now, when you hold down <code>mute</code>, every track in the set gets muted. Well, actually, as soon as you press <code>mute</code> the selected track is muted, then after a moment every other track is muted. This might not be what you want.</p> named_controls.yaml<pre><code>mute:\n  gestures:\n    released_immediately: MUTE\n    pressed_delayed: ALL / MUTE\n</code></pre> <p>We've changed the key <code>pressed</code> to <code>released_immediately</code>. zcx supports six gestures, five of which you'll be familiar with if you've used G-Controls:</p> <ul> <li><code>pressed</code></li> <li><code>pressed_delayed</code></li> <li><code>released</code></li> <li><code>released_immediately</code></li> <li><code>released_delayed</code></li> <li><code>double_clicked</code></li> </ul> <p>This change means that a quick press and release of <code>mute</code> will mute the selected track, but if you press and hold, after a moment all tracks will be muted, without the in-between step of muting the selected track.</p>"},{"location":"tutorials/getting-started/editing-a-config/#complex-definitions","title":"complex definitions","text":"<p>Some of the default definitions may seem complicated:</p> <pre><code>__select_row:\n  includes: [ \n    select_1, select_2, select_3, select_4, select_5, select_6, select_7, select_8 \n  ]\n  color: 1\n  gestures:\n    pressed: &gt;\n      \"${ring.tracks[me.index]}\" / SEL\n</code></pre> <p>This is an example of a group definition, that uses templating to apply a similar control definition across a range of controls. In this definition, the Push 1's eight Select buttons selects a track in Live, relative to the zcx script's session ring.</p> <p>You can learn how to read and compose these definitions in the Template Reference.</p> <p>You may prefer to define each control individually. In this case, comment out (or delete) the group definition, and uncomment the single control definitions found underneath.</p> <pre><code>#__select_row:\n#  includes: [ \n#    select_1, select_2, select_3, select_4, select_5, select_6, select_7, select_8 \n#  ]\n#  color: 1\n#  gestures:\n#    pressed: &gt;\n#      \"${ring.tracks[me.index]}\" / SEL\n\nselect_1:\n  gestures:\n    pressed: DUMMY\n\nselect_2:\n  gestures:\n    pressed: DUMMY\n</code></pre>"},{"location":"tutorials/getting-started/editing-a-config/#modes","title":"modes","text":"<p>What if we wanted to have that <code>mute</code> button double as a solo button? We could add a <code>double_clicked</code> gesture with the action list <code>SOLO</code>, but its a small button and that's a bit tricky. </p> <p>The Push 1 has a <code>shift</code> button. We can make it so the <code>mute</code> button mutes by default, but solos when <code>shift</code> is held.</p> named_controls.yaml<pre><code>mute:\n  gestures:\n    released_immediately: MUTE\n    pressed_delayed: ALL / MUTE\n    pressed__shift: SOLO\n</code></pre> <p>That's all we need to do to add mode functionality to our control. By taking a default gesture and adding the suffix <code>__shift</code>, we're telling zcx to do a special action when the <code>shift</code> mode is active. Now obviously the <code>shift</code> mode is in effect while we hold the <code>shift</code> control, but how does that work? The logic for that is actually in this same file:</p> named_controls.yaml<pre><code>shift:\n  gestures:\n     pressed:\n       mode_on: shift\n     released:\n       mode_off: shift\n</code></pre> <p>The only other thing we need is to have <code>shift</code> listed in our <code>modes.yaml</code>:</p> modes.yaml<pre><code>- shift\n- select\n</code></pre> <p>You can have as many modes as you like. This config has a <code>select</code> mode configured, triggered when we hold the <code>select</code> button. We can even have an extra-special function that triggers when multiple modes are active:</p> named_controls.yaml<pre><code>mute:\n  gestures:\n    released_immediately: MUTE\n    pressed_delayed: ALL / MUTE\n    pressed__shift: SOLO\n    pressed__shift__select: ALL / SOLO\n    # for when you want to listen closely to EVERY track\n</code></pre>"},{"location":"tutorials/getting-started/editing-a-config/#matrix-controls","title":"matrix controls","text":"<p>Let's take a look at the <code>actions_top_left</code> section. Its config file is <code>_config/matrix_sections/actions_top_left.yaml</code>.</p> _config/matrix_sections/actions_top_left.yaml<pre><code>#row 1  \n#col 1  \n- color: green  \n  gestures:  \n    pressed:  \n    # pressed_delayed:  \n    # released_immediately:    \n    # double_clicked:\n#col 2  \n- color: grey  \n  gestures:  \n    pressed:  \n    # pressed_delayed:  \n    # released_immediately:    \n    # double_clicked:\n#col 3  \n- color: grey  \n  gestures:  \n    pressed:  \n    # pressed_delayed:  \n    # released_immediately:    \n    # double_clicked:\n#col 4  \n- color: grey  \n  gestures:  \n    pressed:  \n    # pressed_delayed:  \n    # released_immediately:    \n    # double_clicked:\n#row 2  \n#col 1  \n- color: grey  \n  gestures:\n</code></pre> <p>This section was defined as a 4x4 quarter of the 8x8 pad matrix. This means it has 4 rows of controls, with 4 columns per row, for 16 controls total. This config file is pre-filled with a skeleton definition for each control, as well as helpful <code>#comments</code> indicating which control is which. </p> <p>The data structure you're looking at is called a list. When you see a <code>-</code> that begins the line, that is the start of a new item (control) that belongs to this list. actions_top_left.yaml<pre><code># row 1\n# col 1\n-\n    color: green\n    gestures:\n      pressed:\n# col 2\n-\n    color: grey\n    gestures:\n      pressed:\n</code></pre></p> <p>If you like, you can start each list item with an empty line. You may find this easier to read.</p> <p>Skeleton matrix configs</p> <p>Your zcx distribution comes with a few mostly-blank sections, with helpful comments that indicate the coordinate of each control (like above).</p> <p>If you'd like to generate your own blank config, of custom dimensions, you can use the matrix config generator.</p> <p>And from here, editing controls is pretty much exactly the same as what we did for the named controls. </p> <p>Most pad matrices have RGB feedback, so we can can set them to display many different colors:</p> <pre><code># col 2\n- color: red\n...\n</code></pre> <p>Make that change and reload - the pad is now red. </p> <p>Now scroll through all three pages of the matrix. You'll see that two pages now have a red button at x2y1. That's because in <code>pages.yaml</code>, we set the section <code>actions_top_left</code> to appear on multiple pages.</p> <p>Tip</p> <p>The strings we've used so far have been free of 'single quotes' and \"double quotes\". ClyphX uses double quotes quite a bit, and this can cause a small problem with yaml:</p> <pre><code>gestures:\n  pressed: \"my cool track\" / MUTE\n</code></pre> <p>Because quotes have special significance in programming languages, this definition isn't valid yaml: it expects <code>my cool track</code> to be a complete string (without the quotes), and then freaks out a bit when it encounters <code>/ MUTE</code>. But we can easily work around that:</p> <pre><code>gestures:\n  pressed: &gt;\n    \"my cool track\" / MUTE\n</code></pre> <p>By writing our action list as above (putting a <code>&gt;</code> after the key and writing the value on a new line), we're telling yaml that the entire line is the value we want to associate with <code>pressed</code>.</p>"},{"location":"tutorials/getting-started/editing-a-config/#encoder-mappings","title":"encoder mappings","text":"<p>We define encoder mappings in <code>encoders.yaml</code>.</p> encoders.yaml<pre><code>enc_master:\n  binding:\n    default: MST / VOL\n    __shift: MST / CUE\n</code></pre> <p>For each encoder, we define a target. Encoders are also mode-aware. In this example the encoder controls the Main track's volume by default, and the Preview volume when the Shift button is held.</p> <p>See the Encoder Reference for a list of valid targets.</p>"},{"location":"tutorials/getting-started/editing-a-config/#a-note-on-templating","title":"A note on templating","text":"<p>If you've looked through the demo config, you will have come across several quite complex definitions that look like this:</p> named_controls.yaml<pre><code>__scene_buttons:\n  includes: [\n    scene_1, scene_2, scene_3, scene_4, scene_5, scene_6, scene_7, scene_8\n  ]\n  gestures:\n    pressed: SCENE ${me.Index}\n\n__page_section:\n  includes: [\n    undo, delete, double, quantize\n  ]\n  type: page\n  page: ${me.index}\n  gestures:\n    pressed:\n      page: ${me.index}\n    released_delayed:\n      page: last\n</code></pre> <p>These definitions are using the templating system in zcx. When you're ready, check the template reference to see how it works.</p>"},{"location":"tutorials/getting-started/editing-a-config/#congratulations","title":"congratulations!","text":"<p>Well done! You now understand the basics of configuring zcx! Feel free to experiment!</p>"},{"location":"tutorials/getting-started/installation/","title":"installing zcx","text":"<p>Installing zcx is super easy.</p>"},{"location":"tutorials/getting-started/installation/#get-a-distribution","title":"get a distribution","text":"<p>A 'distribution' is what we call a finished release of a zcx script. It contains the 'core' of zcx, along with hardware-specific code that makes it work with your controller. </p> <p>Click here to see the latest release for all maintained hardware.</p> <p>Scroll to the bottom of that page and check the 'Assets' dropdown.</p>"},{"location":"tutorials/getting-started/installation/#my-hardware-isnt-listed","title":"my hardware isn't listed \ud83d\udc94","text":"<p>No problem. Have a look at the zcx-core discord server to see if there is a pre-release version available. There may be a distribution ready to go that just needs someone who actually owns the hardware to confirm it works. And if there isn't, feel free to put in a request for your hardware!</p> <p>Alternatively, it is relatively easy to create a 'port' of zcx for your controller. See the lesson for details.</p>"},{"location":"tutorials/getting-started/installation/#install-the-script","title":"install the script","text":"<p>Each distribution comes as a .zip file. Unzip that file, and you'll see a folder with the same name. The directory structure looks like this:</p> <pre><code>_zcx_push_1.zip/\n\u251c\u2500 _zcx_push_1/\n\u2502  \u251c\u2500 _zcx_push_1/\n\u2502  \u2502  \u251c\u2500 _config/\n\u2502  \u2502  \u251c\u2500 __init__.py\n\u2502  \u2502  \u251c\u2500 some_python_file.py\n\u2502  \u2502  \u251c\u2500 etc...\n\u2502  \u251c\u2500 user_actions/\n</code></pre> <p>This highlighted folder is the 'root' folder of this zcx distro.  Simply drag this folder into your Live <code>Remote Scripts</code> directory.</p> <p>On macOS the default path is:</p> <p><code>'/Users/[username]/Music/Ableton/User Library/Remote Scripts'</code></p> <p>On Windows it's:</p> <p><code>\\Users\\[username]\\Documents\\Ableton\\User Library\\Remote Scripts</code></p> <p>You can rename the folder to whatever you like, and that's the name that shows up in Live's preferences. We include a leading underscore, because that should push it to the top of the control surface list. Feel free to remove it.</p>"},{"location":"tutorials/getting-started/installation/#optional-install-the-zcx-user-action","title":"optional: install the zcx user action","text":"<p>By installing the zcx user action, you can control zcx from ClyphX action lists. Drag the contents of the <code>user_actions</code> folder into your ClyphX Pro user actions folder, which should be in <code>User Library/Remote Scripts/_user_actions</code>.</p>"},{"location":"tutorials/getting-started/installation/#activate-the-script","title":"activate the script","text":"<p>For our purposes, zcx functions like any other control surface script, so you should follow the Live manual's instructions for that.</p> <p>Note</p> <p>ClyphX Pro should always be in a higher slot than all zcx scripts. I reccomend installing ClyphX Pro in slot 1. It's ok if XT scripts (ClyphX Pro XTA-E) are below zcx scripts.</p> <p>When you assign the script to a slot in Live's preferences, the script automatically loads.</p> <p>You should set the MIDI in and out ports to the relevant hardware before assigning the script to a slot.</p> <p>For your controller's input, check the boxes <code>Track</code> and <code>Remote</code>, and for the output <code>Track</code>, <code>Sync</code> , and <code>Remote</code>.</p> <p>At this point, you may need to reload the script.</p>"},{"location":"tutorials/getting-started/installation/#if-your-controller-has-a-distinct-user-mode","title":"if your controller has a distinct 'user mode'","text":"<p>Many controllers, such as the Push and Launchpad have a 'Live' mode and a 'user' mode. </p> <p>When setting up the Input and Output of the zcx script, you must use the 'user mode' port. For example, Push 1 has the MIDI inputs <code>Ableton Push (Live mode)</code> and <code>Ableton Push (User mode)</code> \u2014 use the latter. You are able to use the 'Live' and 'user' modes of your controller by switching between them with the dedicated hardware button, though the official control surface and the zcx script will each need their own control surface slot.</p> <p>For the Launchpad series, use the port <code>Launchpad X MIDI In</code> or similar, rather than the <code>DAW in</code> and <code>DAW out</code> ports.</p> <p>If you have officially supported hardware, zcx should automatically handle switching the controller's mode. If it doesn't, raise an issue.</p>"},{"location":"tutorials/getting-started/installation/#explore","title":"explore! \ud83c\udf0f","text":"<p>Your zcx distribution comes with a carefully crafted demo config, put together by the maintainer for your hardware. It's designed to give a taste of zcx's capabilities out of the box, and be intuitive to edit. Once you're done with that, continue with this tutorial. :)</p>"},{"location":"tutorials/getting-started/reading-zcx-configurations/","title":"reading zcx configurations","text":"<p>If you're coming from the X and G controls in ClyphX Pro, looking at the configuration files in your zcx folder may feel overwhelming. Don't stress \u2014 you don't need to have any sort of programming knowledge to get started with zcx! </p> <p>Having said that, zcx expects to receive its configuration files in a particular format, just as ClyphX does.</p>"},{"location":"tutorials/getting-started/reading-zcx-configurations/#x-controls-vs-zcontrols","title":"X-Controls vs ZControls","text":"<p>You'll already be familiar with X-Controls from ClyphX:</p> <pre><code>RECORD = CC, 1, 79, 127, 0, SRECFIX 8\n</code></pre> <p>ClyphX also has G-controls, which have more complex functionality, and so need more complex configuration:</p> <pre><code>RECORD = CC, 1, 79, 127, 0, FALSE\nRECORD PRESSED = SEL / ARM\nRECORD PRESSED_DELAYED = SRECFIX 8\n</code></pre> <p>To define the same control in zcx, we'd write it like so:</p> <pre><code>record:\n  color: green\n  gestures:\n    pressed: SEL / ARM\n    pressed_delayed: SRECFIX 8\n</code></pre> <p>At the same time, the above definition may look more complex, yet easier to read. Notice that your web browser is color coding certain words. This is because zcx makes heavy use of an existing format called YAML</p>"},{"location":"tutorials/getting-started/reading-zcx-configurations/#yaml","title":"YAML","text":"<p>\"yam-il\"</p> <p>So what is yaml? Put simply, yaml is a format for organising data in a structured way, making it easy for humans to write, and easy for machines to understand. We'll explain the most important stuff you need to get started with zcx in a moment, but if you'd prefer to watch a video, this one does a great job of explaining the basics (watch until about 5:30).</p>"},{"location":"tutorials/getting-started/reading-zcx-configurations/#keys-and-values","title":"keys and values","text":"<p><code>key: value</code></p> <p>Yaml works by associating keys with values. Take <code>color: green</code>. <code>color</code> is the key, and <code>green</code> is the value. We can imagine an X-Control in yaml like this:</p> <pre><code>control_name: record\nmessage_type: cc\nmidi_channel: 1\ncc_number: 79\non_color: 127\noff_color: 0\naction_list: SRECFIX 8\n</code></pre> <p>Instead of putting everything on one long line, separated by commas, we label the data with a key, and pair it with a value.</p>"},{"location":"tutorials/getting-started/reading-zcx-configurations/#data-types","title":"data types","text":"<p>Yaml is capable of representing many different categories of data. With zcx, you'll only need a few:</p>"},{"location":"tutorials/getting-started/reading-zcx-configurations/#numbers","title":"numbers","text":"<p><code>color: 127</code></p> <p>You know what numbers are.</p>"},{"location":"tutorials/getting-started/reading-zcx-configurations/#strings","title":"strings","text":"<p><code>color: green</code></p> <p>The word 'string' is a bit scarier, but it really just means that the data is a word, or a name, or a sentence, or an action list. Basically, it's got letters.</p>"},{"location":"tutorials/getting-started/reading-zcx-configurations/#booleans","title":"booleans","text":"<p><code>repeat: true</code></p> <p>Either true or false.</p>"},{"location":"tutorials/getting-started/reading-zcx-configurations/#lists","title":"lists","text":"<p><code>includes: [scene_1, scene_2, scene_3, scene_4]</code></p> <p>Literally just a list of values. Those values could be numbers, strings, both, or something else entirely.</p>"},{"location":"tutorials/getting-started/reading-zcx-configurations/#comments","title":"# comments","text":"<pre><code>octave_up:\n  # repeat: True\n  gestures:\n    pressed: METRO # I can write whatever I want here\n</code></pre> <p>When you see a  <code>#</code> on a line of yaml, anything to the right of that <code>#</code> will be totally ignored. If you put a <code>#</code> before the key, like with <code># repeat</code> above, this line essentially 'disappears' from your config when zcx loads it. So, not actually a data type, but important to know.</p>"},{"location":"tutorials/getting-started/reading-zcx-configurations/#nested-yaml","title":"nested yaml","text":"<p>We can also 'nest' yaml objects inside each other:</p> <pre><code>color:\n  pulse:\n    a: red\n    b: purple\n    speed: 1\n</code></pre> <p>And what is an object? Just another set of key-value pairs. \ud83d\ude0e</p>"},{"location":"tutorials/getting-started/reading-zcx-configurations/#easy-right","title":"easy, right?","text":"<p>Don't stress if this doesn't immediately 'click'. Soon, you'll see a lot of examples of zcx definitions and configuration files, which will help to solidify these concepts!</p> <p>One more thing:</p> <p>Yaml files are plain old text, which means you can read and edit them with any text editor, like Notepad or TextEdit. However, it is recommended that you use a more sophisticated editor, such as Microsoft Visual Studio Code, which is free. Using an editor like this will give you that groovy color coding you see above, and the editor will warn you when you make common yaml errors.</p>"},{"location":"tutorials/getting-started/zcx-concepts/","title":"zcx concepts","text":"<p>zcx uses a lot of jargon. Here is a quick guide to the most important concepts.</p>"},{"location":"tutorials/getting-started/zcx-concepts/#zcontrols","title":"ZControls","text":"<p>Roughly equivalent to an X or G control from ClyphX Pro (first party controls). You define ZControls in your configuration file and when you press them they trigger action lists. Like with first party controls, you can configure the control's color. However, ZControls can have many additional options that give you more control(!) over how they behave. There are even special subclasses of controls that offer specific functionality. More on that later.</p> <p>Although MIDI controllers come in all shapes and sizes, zcx is focused on controllers with a 'matrix' or grid of pads or buttons, such as the Ableton Push, Novation Launchpad, Akai APC, and  others like them. Because of this, zcx makes a distinction between controls that form the matrix, and those that don't.</p>"},{"location":"tutorials/getting-started/zcx-concepts/#named-controls","title":"named controls","text":"<p>These controls exist outside of the matrix. That means they perform the same functions regardless of what page the matrix is on. They can be given a simple name, and we can refer to them by that name throughout our configuration. Often, the control's name will be printed on the control.</p> <pre><code>record:\n  color: red\n  gestures:\n    pressed: SRECFIX 8\n</code></pre> <p>Note: while named controls are unaffected by page changes, they are affected by modes.</p> <p>All named controls are defined in one place, <code>named_controls.yaml</code>:</p> <pre><code>zcx/\n\u251c\u2500 _config/\n\u2502  \u251c\u2500 named_controls.yaml\n</code></pre> <p>Note</p> <p>The names used in <code>named_controls.yaml</code> and <code>encoders.yaml</code> have already been mapped to MIDI messages sent by your hardware.</p> <p>To check the names of each control, look in the <code>hardware</code> folder.</p> <pre><code>zcx/\n\u251c\u2500 hardware/\n\u2502  \u251c\u2500 note_buttons.yaml\n\u2502  \u251c\u2500 cc_buttons.yaml\n</code></pre>"},{"location":"tutorials/getting-started/zcx-concepts/#matrix-controls","title":"matrix controls","text":"<p>And obviously, these controls exist within the matrix. In our configuration we don't define them by name or coordinate, but by position within their containing <code>section</code>.</p> <p>What is a section, you ask?</p>"},{"location":"tutorials/getting-started/zcx-concepts/#matrix-sections","title":"matrix sections","text":"<p>A matrix section is a logical segment of the matrix, defined by row and column. These sections you define can be any size.</p> matrix_sections.yaml<pre><code>#       0  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1  \n#       1  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1  \n#       2  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1  \n#       3  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1  \n#       4  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1  \n#       5  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1  \n#       6  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1  \n#       7  \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1 \u25a1  \n#          0 1 2 3 4 5 6 7  \n#\n\nactions_top_left:   #   0 1 2 3\n  col_start: 0      # 0 \u25a1 \u25a1 \u25a1 \u25a1\n  col_end: 3        # 1 \u25a1 \u25a1 \u25a1 \u25a1\n  row_start: 0      # 2 \u25a1 \u25a1 \u25a1 \u25a1\n  row_end: 3        # 3 \u25a1 \u25a1 \u25a1 \u25a1\n\nactions_top_right:  \n  col_start: 4  \n  col_end: 7  \n  row_start: 0  \n  row_end: 3\n\ntrack_section:\n  col_start: 0\n  col_end: 7\n  row_start: 4\n  row_end: 7\n</code></pre> <p>The dimensions or bounds of the matrix are defined in <code>_config/matrix_sections.yaml</code>. However, each section then needs its own config file in <code>_config/matrix_sections/&lt;section name&gt;.yaml</code>.</p> <p>So, looking at the above config, your config directory would have these files:</p> <pre><code>zcx/\n\u251c\u2500 _config/\n\u2502  \u251c\u2500 matrix_sections/\n\u2502  \u2502  \u251c\u2500 actions_top_left.yaml\n\u2502  \u2502  \u251c\u2500 actions_top_right.yaml\n\u2502  \u2502  \u251c\u2500 track_section.yaml\n\u2502  \u251c\u2500 matrix_sections.yaml/\n</code></pre> <p>And in each of those files you define every pad that belongs to that section:</p> actions_top_left.yaml<pre><code># row 1\n# col 1\n- color: red\n  gestures:\n    pressed: METRO\n# col 2\n- color: blue\n  gestures:\n    pressed: SETPLAY\n</code></pre> <p>Or you can have one definition that applies to all pads based on their position within the section:</p> scene_section.yaml<pre><code>color:\n  palette: rainbow\ngestures:\n  pressed: SCENE ${me.Index} \n  # `SCENE 1` for pad 1, `SCENE 2` for pad 2...\n  pressed__select: SCENE SEL ${me.Index}\n</code></pre> <p>Tip</p> <p>You will learn more about defining matrix controls in the next lesson.</p>"},{"location":"tutorials/getting-started/zcx-concepts/#pages","title":"pages","text":"<p>There's a good chance pages are why you're interested in zcx in the first place.  Pages contain sections which contain controls. </p> pages.yaml<pre><code>pages:\n  main_page:\n    - actions_top_left\n    - actions_top_right\n    - actions_bottom_double\n  alt_page:\n    - actions_top_left\n    - actions_bottom_right\n    - actions_bottom_left\n    - actions_top_right\n  ring_page:\n    - ring_control\n  blank_page:\n    - blank_section\n</code></pre> <p>By assigning controls to sections, and not directly to pages, we can have one section appear on multiple pages, or even on all of them, without defining the same control every time.</p> <p>One thing we can't do is have sections on a page that overlap: </p> <p>matrix_sections.yaml<pre><code>big_section:\n  col_start: 0\n  col_end: 7\n  row_start: 0\n  row_end: 7\n\ntiny_section:\n  col_start: 0\n  col_end: 1\n  row_start: 0\n  row_end: 1\n</code></pre> pages.yaml<pre><code>my_page:\n  - big_section\n  - tiny_section    # not gonna fit :(\n</code></pre></p> <p>If you try to do this, zcx will throw an error.</p> <p>Warning</p> <p>Matrix sections are always bound to their defined coordinates, which means while they can appear on multiple pages, they'll always be in the same place.</p>"},{"location":"tutorials/getting-started/zcx-concepts/#modes","title":"modes","text":"<p>Any control can be assigned as a modifier or 'mode' control.</p> <pre><code>shift:\n  gestures:\n    pressed:\n      mode_on: shift\n    released:\n      mode_off: shift\n\nrecord:\n  gestures:\n    pressed: SRECFIX 8\n    pressed__shift: SRECFIX 16\n</code></pre> <p>A mode is just a keyword we can activate, and when activated we can enable different functionality on our controls like you see above.</p> <p>You can even require multiple modes for particular functionality:</p> <pre><code>record:\n  gestures:\n    presssed__shift__select: SRECFIX 64\n</code></pre> <p>The names of these modes are completely arbitrary, but they must be defined in your <code>modes.yaml</code> file.</p> modes.yaml<pre><code>- shift\n- select\n- drums\n</code></pre>"},{"location":"tutorials/getting-started/zcx-concepts/#encoder-mappings","title":"encoder mappings","text":"<p>zcx allows you to dynamically map encoders (knobs, faders, etc.) to parameters in Live. Targeting of parameters follows the same syntax as ClyphX Pro encoder bindings:</p> encoders.yaml<pre><code>tempo:\n  binding: SEL / VOL\n</code></pre> <p>Encoders are also mode-aware: <pre><code>tempo:\n  binding:\n    default: SEL / VOL\n    __shift: SEL / PAN\n</code></pre></p>"},{"location":"tutorials/getting-started/zcx-concepts/#control-classes","title":"control classes","text":"<p>The most common type of control you'll use is the standard ZControl. There are also special subclasses of control that offer extra functionality, often in the LED feedback they provide.</p> <p>One class of control is the page control,  which is bound to a page you specify. It shows one color when its bound page is in view, and another when it isn't. Another is the transport control: you can bind your <code>play</code> button to Live's transport, and it will turn green while the set is playing, and white when it stops. Just like it did on the original script for your controller.</p>"}]}